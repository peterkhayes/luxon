{"version":3,"file":"luxon.js","sources":["../../src/impl/util.js","../../src/impl/formats.js","../../src/impl/english.js","../../src/errors.js","../../src/zone.js","../../src/zones/localZone.js","../../src/zones/IANAZone.js","../../src/zones/fixedOffsetZone.js","../../src/zones/invalidZone.js","../../src/impl/zoneUtil.js","../../src/settings.js","../../src/impl/formatter.js","../../src/impl/locale.js","../../src/impl/regexParser.js","../../src/impl/invalid.js","../../src/duration.js","../../src/interval.js","../../src/info.js","../../src/impl/diff.js","../../src/impl/tokenParser.js","../../src/impl/conversions.js","../../src/datetime.js"],"sourcesContent":["/*\n  This is just a junk drawer, containing anything used across multiple classes.\n  Because Luxon is small(ish), this should stay small and we won't worry about splitting\n  it up into, say, parsingUtil.js and basicUtil.js and so on. But they are divided up by feature area.\n*/\n\n/**\n * @private\n */\n\n// TYPES\n\nexport function isUndefined(o) {\n  return typeof o === \"undefined\";\n}\n\nexport function isNumber(o) {\n  return typeof o === \"number\";\n}\n\nexport function isString(o) {\n  return typeof o === \"string\";\n}\n\nexport function isDate(o) {\n  return Object.prototype.toString.call(o) === \"[object Date]\";\n}\n\n// CAPABILITIES\n\nexport function hasIntl() {\n  return typeof Intl !== \"undefined\" && Intl.DateTimeFormat;\n}\n\nexport function hasFormatToParts() {\n  return !isUndefined(Intl.DateTimeFormat.prototype.formatToParts);\n}\n\n// OBJECTS AND ARRAYS\n\nexport function maybeArray(thing) {\n  return Array.isArray(thing) ? thing : [thing];\n}\n\nexport function bestBy(arr, by, compare) {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  return arr.reduce((best, next) => {\n    const pair = [by(next), next];\n    if (!best) {\n      return pair;\n    } else if (compare(best[0], pair[0]) === best[0]) {\n      return best;\n    } else {\n      return pair;\n    }\n  }, null)[1];\n}\n\nexport function pick(obj, keys) {\n  return keys.reduce((a, k) => {\n    a[k] = obj[k];\n    return a;\n  }, {});\n}\n\n// NUMBERS AND STRINGS\n\nexport function numberBetween(thing, bottom, top) {\n  return isNumber(thing) && thing >= bottom && thing <= top;\n}\n\n// x % n but takes the sign of n instead of x\nexport function floorMod(x, n) {\n  return x - n * Math.floor(x / n);\n}\n\nexport function padStart(input, n = 2) {\n  if (input.toString().length < n) {\n    return (\"0\".repeat(n) + input).slice(-n);\n  } else {\n    return input.toString();\n  }\n}\n\nexport function parseMillis(fraction) {\n  if (isUndefined(fraction)) {\n    return NaN;\n  } else {\n    const f = parseFloat(\"0.\" + fraction) * 1000;\n    return Math.floor(f);\n  }\n}\n\nexport function roundTo(number, digits) {\n  const factor = 10 ** digits;\n  return Math.round(number * factor) / factor;\n}\n\n// DATE BASICS\n\nexport function isLeapYear(year) {\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\n\nexport function daysInYear(year) {\n  return isLeapYear(year) ? 366 : 365;\n}\n\nexport function daysInMonth(year, month) {\n  const modMonth = floorMod(month - 1, 12) + 1,\n    modYear = year + (month - modMonth) / 12;\n\n  if (modMonth === 2) {\n    return isLeapYear(modYear) ? 29 : 28;\n  } else {\n    return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth - 1];\n  }\n}\n\nexport function weeksInWeekYear(weekYear) {\n  const p1 =\n      (weekYear +\n        Math.floor(weekYear / 4) -\n        Math.floor(weekYear / 100) +\n        Math.floor(weekYear / 400)) %\n      7,\n    last = weekYear - 1,\n    p2 = (last + Math.floor(last / 4) - Math.floor(last / 100) + Math.floor(last / 400)) % 7;\n  return p1 === 4 || p2 === 3 ? 53 : 52;\n}\n\nexport function untruncateYear(year) {\n  if (year > 99) {\n    return year;\n  } else return year > 60 ? 1900 + year : 2000 + year;\n}\n\n// PARSING\n\nexport function parseZoneInfo(ts, offsetFormat, locale, timeZone = null) {\n  const date = new Date(ts),\n    intlOpts = {\n      hour12: false,\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\"\n    };\n\n  if (timeZone) {\n    intlOpts.timeZone = timeZone;\n  }\n\n  const modified = Object.assign({ timeZoneName: offsetFormat }, intlOpts),\n    intl = hasIntl();\n\n  if (intl && hasFormatToParts()) {\n    const parsed = new Intl.DateTimeFormat(locale, modified)\n      .formatToParts(date)\n      .find(m => m.type.toLowerCase() === \"timezonename\");\n    return parsed ? parsed.value : null;\n  } else if (intl) {\n    // this probably doesn't work for all locales\n    const without = new Intl.DateTimeFormat(locale, intlOpts).format(date),\n      included = new Intl.DateTimeFormat(locale, modified).format(date),\n      diffed = included.substring(without.length),\n      trimmed = diffed.replace(/^[, ]+/, \"\");\n    return trimmed;\n  } else {\n    return null;\n  }\n}\n\n// signedOffset('-5', '30') -> -330\nexport function signedOffset(offHourStr, offMinuteStr) {\n  const offHour = parseInt(offHourStr, 10) || 0,\n    offMin = parseInt(offMinuteStr, 10) || 0,\n    offMinSigned = offHour < 0 ? -offMin : offMin;\n  return offHour * 60 + offMinSigned;\n}\n\n// COERCION\n\nexport function normalizeObject(obj, normalizer, ignoreUnknown = false) {\n  const normalized = {};\n  for (const u in obj) {\n    if (obj.hasOwnProperty(u)) {\n      const v = obj[u];\n      if (v !== null && !isUndefined(v) && !Number.isNaN(v)) {\n        const mapped = normalizer(u, ignoreUnknown);\n        if (mapped) {\n          normalized[mapped] = v;\n        }\n      }\n    }\n  }\n  return normalized;\n}\n\nexport function timeObject(obj) {\n  return pick(obj, [\"hour\", \"minute\", \"second\", \"millisecond\"]);\n}\n","/**\n * @private\n */\n\nconst n = \"numeric\",\n  s = \"short\",\n  l = \"long\",\n  d2 = \"2-digit\";\n\nexport const DATE_SHORT = {\n  year: n,\n  month: n,\n  day: n\n};\n\nexport const DATE_MED = {\n  year: n,\n  month: s,\n  day: n\n};\n\nexport const DATE_FULL = {\n  year: n,\n  month: l,\n  day: n\n};\n\nexport const DATE_HUGE = {\n  year: n,\n  month: l,\n  day: n,\n  weekday: l\n};\n\nexport const TIME_SIMPLE = {\n  hour: n,\n  minute: d2\n};\n\nexport const TIME_WITH_SECONDS = {\n  hour: n,\n  minute: d2,\n  second: d2\n};\n\nexport const TIME_WITH_SHORT_OFFSET = {\n  hour: n,\n  minute: d2,\n  second: d2,\n  timeZoneName: s\n};\n\nexport const TIME_WITH_LONG_OFFSET = {\n  hour: n,\n  minute: d2,\n  second: d2,\n  timeZoneName: l\n};\n\nexport const TIME_24_SIMPLE = {\n  hour: n,\n  minute: d2,\n  hour12: false\n};\n\n/**\n * {@link toLocaleString}; format like '09:30:23', always 24-hour.\n */\nexport const TIME_24_WITH_SECONDS = {\n  hour: n,\n  minute: d2,\n  second: d2,\n  hour12: false\n};\n\n/**\n * {@link toLocaleString}; format like '09:30:23 EDT', always 24-hour.\n */\nexport const TIME_24_WITH_SHORT_OFFSET = {\n  hour: n,\n  minute: d2,\n  second: d2,\n  hour12: false,\n  timeZoneName: s\n};\n\n/**\n * {@link toLocaleString}; format like '09:30:23 Eastern Daylight Time', always 24-hour.\n */\nexport const TIME_24_WITH_LONG_OFFSET = {\n  hour: n,\n  minute: d2,\n  second: d2,\n  hour12: false,\n  timeZoneName: l\n};\n\n/**\n * {@link toLocaleString}; format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.\n */\nexport const DATETIME_SHORT = {\n  year: n,\n  month: n,\n  day: n,\n  hour: n,\n  minute: d2\n};\n\n/**\n * {@link toLocaleString}; format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.\n */\nexport const DATETIME_SHORT_WITH_SECONDS = {\n  year: n,\n  month: n,\n  day: n,\n  hour: n,\n  minute: d2,\n  second: d2\n};\n\nexport const DATETIME_MED = {\n  year: n,\n  month: s,\n  day: n,\n  hour: n,\n  minute: d2\n};\n\nexport const DATETIME_MED_WITH_SECONDS = {\n  year: n,\n  month: s,\n  day: n,\n  hour: n,\n  minute: d2,\n  second: d2\n};\n\nexport const DATETIME_FULL = {\n  year: n,\n  month: l,\n  day: n,\n  hour: n,\n  minute: d2,\n  timeZoneName: s\n};\n\nexport const DATETIME_FULL_WITH_SECONDS = {\n  year: n,\n  month: l,\n  day: n,\n  hour: n,\n  minute: d2,\n  second: d2,\n  timeZoneName: s\n};\n\nexport const DATETIME_HUGE = {\n  year: n,\n  month: l,\n  day: n,\n  weekday: l,\n  hour: n,\n  minute: d2,\n  timeZoneName: l\n};\n\nexport const DATETIME_HUGE_WITH_SECONDS = {\n  year: n,\n  month: l,\n  day: n,\n  weekday: l,\n  hour: n,\n  minute: d2,\n  second: d2,\n  timeZoneName: l\n};\n","import * as Formats from \"./formats\";\nimport { pick } from \"./util\";\n\nfunction stringify(obj) {\n  return JSON.stringify(obj, Object.keys(obj).sort());\n}\n\n/**\n * @private\n */\n\nexport const monthsLong = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\"\n];\n\nexport const monthsShort = [\n  \"Jan\",\n  \"Feb\",\n  \"Mar\",\n  \"Apr\",\n  \"May\",\n  \"Jun\",\n  \"Jul\",\n  \"Aug\",\n  \"Sep\",\n  \"Oct\",\n  \"Nov\",\n  \"Dec\"\n];\n\nexport const monthsNarrow = [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"];\n\nexport function months(length) {\n  switch (length) {\n    case \"narrow\":\n      return monthsNarrow;\n    case \"short\":\n      return monthsShort;\n    case \"long\":\n      return monthsLong;\n    case \"numeric\":\n      return [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"];\n    case \"2-digit\":\n      return [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"];\n    default:\n      return null;\n  }\n}\n\nexport const weekdaysLong = [\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n  \"Sunday\"\n];\n\nexport const weekdaysShort = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n\nexport const weekdaysNarrow = [\"M\", \"T\", \"W\", \"T\", \"F\", \"S\", \"S\"];\n\nexport function weekdays(length) {\n  switch (length) {\n    case \"narrow\":\n      return weekdaysNarrow;\n    case \"short\":\n      return weekdaysShort;\n    case \"long\":\n      return weekdaysLong;\n    case \"numeric\":\n      return [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"];\n    default:\n      return null;\n  }\n}\n\nexport const meridiems = [\"AM\", \"PM\"];\n\nexport const erasLong = [\"Before Christ\", \"Anno Domini\"];\n\nexport const erasShort = [\"BC\", \"AD\"];\n\nexport const erasNarrow = [\"B\", \"A\"];\n\nexport function eras(length) {\n  switch (length) {\n    case \"narrow\":\n      return erasNarrow;\n    case \"short\":\n      return erasShort;\n    case \"long\":\n      return erasLong;\n    default:\n      return null;\n  }\n}\n\nexport function meridiemForDateTime(dt) {\n  return meridiems[dt.hour < 12 ? 0 : 1];\n}\n\nexport function weekdayForDateTime(dt, length) {\n  return weekdays(length)[dt.weekday - 1];\n}\n\nexport function monthForDateTime(dt, length) {\n  return months(length)[dt.month - 1];\n}\n\nexport function eraForDateTime(dt, length) {\n  return eras(length)[dt.year < 0 ? 0 : 1];\n}\n\nexport function formatString(knownFormat) {\n  // these all have the offsets removed because we don't have access to them\n  // without all the intl stuff this is backfilling\n  const filtered = pick(knownFormat, [\n      \"weekday\",\n      \"era\",\n      \"year\",\n      \"month\",\n      \"day\",\n      \"hour\",\n      \"minute\",\n      \"second\",\n      \"timeZoneName\",\n      \"hour12\"\n    ]),\n    key = stringify(filtered),\n    dateTimeHuge = \"EEEE, LLLL d, yyyy, h:mm a\";\n  switch (key) {\n    case stringify(Formats.DATE_SHORT):\n      return \"M/d/yyyy\";\n    case stringify(Formats.DATE_MED):\n      return \"LLL d, yyyy\";\n    case stringify(Formats.DATE_FULL):\n      return \"LLLL d, yyyy\";\n    case stringify(Formats.DATE_HUGE):\n      return \"EEEE, LLLL d, yyyy\";\n    case stringify(Formats.TIME_SIMPLE):\n      return \"h:mm a\";\n    case stringify(Formats.TIME_WITH_SECONDS):\n      return \"h:mm:ss a\";\n    case stringify(Formats.TIME_WITH_SHORT_OFFSET):\n      return \"h:mm a\";\n    case stringify(Formats.TIME_WITH_LONG_OFFSET):\n      return \"h:mm a\";\n    case stringify(Formats.TIME_24_SIMPLE):\n      return \"HH:mm\";\n    case stringify(Formats.TIME_24_WITH_SECONDS):\n      return \"HH:mm:ss\";\n    case stringify(Formats.TIME_24_WITH_SHORT_OFFSET):\n      return \"HH:mm\";\n    case stringify(Formats.TIME_24_WITH_LONG_OFFSET):\n      return \"HH:mm\";\n    case stringify(Formats.DATETIME_SHORT):\n      return \"M/d/yyyy, h:mm a\";\n    case stringify(Formats.DATETIME_MED):\n      return \"LLL d, yyyy, h:mm a\";\n    case stringify(Formats.DATETIME_FULL):\n      return \"LLLL d, yyyy, h:mm a\";\n    case stringify(Formats.DATETIME_HUGE):\n      return dateTimeHuge;\n    case stringify(Formats.DATETIME_SHORT_WITH_SECONDS):\n      return \"M/d/yyyy, h:mm:ss a\";\n    case stringify(Formats.DATETIME_MED_WITH_SECONDS):\n      return \"LLL d, yyyy, h:mm:ss a\";\n    case stringify(Formats.DATETIME_FULL_WITH_SECONDS):\n      return \"LLLL d, yyyy, h:mm:ss a\";\n    case stringify(Formats.DATETIME_HUGE_WITH_SECONDS):\n      return \"EEEE, LLLL d, yyyy, h:mm:ss a\";\n    default:\n      return dateTimeHuge;\n  }\n}\n","// these aren't really private, but nor are they really useful to document\n\n/**\n * @private\n */\nclass LuxonError extends Error {}\n\n/**\n * @private\n */\nexport class InvalidDateTimeError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid DateTime: ${reason.toMessage()}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidIntervalError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid Interval: ${reason.toMessage()}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidDurationError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid Duration: ${reason.toMessage()}`);\n  }\n}\n\n/**\n * @private\n */\nexport class ConflictingSpecificationError extends LuxonError {}\n\n/**\n * @private\n */\nexport class InvalidUnitError extends LuxonError {\n  constructor(unit) {\n    super(`Invalid unit ${unit}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidArgumentError extends LuxonError {}\n\n/**\n * @private\n */\nexport class ZoneIsAbstractError extends LuxonError {\n  constructor() {\n    super(\"Zone is an abstract class\");\n  }\n}\n","/* eslint no-unused-vars: \"off\" */\nimport { ZoneIsAbstractError } from \"./errors\";\n\n/**\n * @interface\n */\nexport default class Zone {\n  /**\n   * The type of zone\n   * @abstract\n   * @type {string}\n   */\n  get type() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * The name of this zone.\n   * @abstract\n   * @type {string}\n   */\n  get name() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns whether the offset is known to be fixed for the whole year.\n   * @abstract\n   * @type {boolean}\n   */\n  get universal() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns the offset's common name (such as EST) at the specified timestamp\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to get the name\n   * @param {Object} opts - Options to affect the format\n   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.\n   * @param {string} opts.locale - What locale to return the offset name in.\n   * @return {string}\n   */\n  offsetName(ts, opts) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return the offset in minutes for this zone at the specified timestamp.\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to compute the offset\n   * @return {number}\n   */\n  offset(ts) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return whether this Zone is equal to another zoner\n   * @abstract\n   * @param {Zone} otherZone - the zone to compare\n   * @return {boolean}\n   */\n  equals(otherZone) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return whether this Zone is valid.\n   * @abstract\n   * @type {boolean}\n   */\n  get isValid() {\n    throw new ZoneIsAbstractError();\n  }\n}\n","import { parseZoneInfo, hasIntl } from \"../impl/util\";\nimport Zone from \"../zone\";\n\nlet singleton = null;\n\nexport default class LocalZone extends Zone {\n  static get instance() {\n    if (singleton === null) {\n      singleton = new LocalZone();\n    }\n    return singleton;\n  }\n\n  get type() {\n    return \"local\";\n  }\n\n  get name() {\n    if (hasIntl()) {\n      return new Intl.DateTimeFormat().resolvedOptions().timeZone;\n    } else return \"local\";\n  }\n\n  get universal() {\n    return false;\n  }\n\n  offsetName(ts, { format, locale }) {\n    return parseZoneInfo(ts, format, locale);\n  }\n\n  offset(ts) {\n    return -new Date(ts).getTimezoneOffset();\n  }\n\n  equals(otherZone) {\n    return otherZone.type === \"local\";\n  }\n\n  get isValid() {\n    return true;\n  }\n}\n","import { parseZoneInfo, isUndefined } from \"../impl/util\";\nimport Zone from \"../zone\";\n\nconst dtfCache = {};\nfunction makeDTF(zone) {\n  if (!dtfCache[zone]) {\n    dtfCache[zone] = new Intl.DateTimeFormat(\"en-US\", {\n      hour12: false,\n      timeZone: zone,\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\"\n    });\n  }\n  return dtfCache[zone];\n}\n\nconst typeToPos = {\n  year: 0,\n  month: 1,\n  day: 2,\n  hour: 3,\n  minute: 4,\n  second: 5\n};\n\nfunction hackyOffset(dtf, date) {\n  const formatted = dtf.format(date).replace(/\\u200E/g, \"\"),\n    parsed = /(\\d+)\\/(\\d+)\\/(\\d+),? (\\d+):(\\d+):(\\d+)/.exec(formatted),\n    [, fMonth, fDay, fYear, fHour, fMinute, fSecond] = parsed;\n  return [fYear, fMonth, fDay, fHour, fMinute, fSecond];\n}\n\nfunction partsOffset(dtf, date) {\n  const formatted = dtf.formatToParts(date),\n    filled = [];\n  for (let i = 0; i < formatted.length; i++) {\n    const { type, value } = formatted[i],\n      pos = typeToPos[type];\n\n    if (!isUndefined(pos)) {\n      filled[pos] = parseInt(value, 10);\n    }\n  }\n  return filled;\n}\n\nexport default class IANAZone extends Zone {\n  static isValidSpecifier(s) {\n    return s && s.match(/^[a-z_+-]{1,256}(\\/[a-z_+-]{1,256}(\\/[a-z_+-]{1,256})?)?$/i);\n  }\n\n  static isValidZone(zone) {\n    try {\n      new Intl.DateTimeFormat(\"en-US\", { timeZone: zone }).format();\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  // Etc/GMT+8 -> -480\n  static parseGMTOffset(specifier) {\n    if (specifier) {\n      const match = specifier.match(/^Etc\\/GMT([+-]\\d{1,2})$/i);\n      if (match) {\n        return -60 * parseInt(match[1]);\n      }\n    }\n    return null;\n  }\n\n  constructor(name) {\n    super();\n    this.zoneName = name;\n    this.valid = IANAZone.isValidZone(name);\n  }\n\n  get type() {\n    return \"iana\";\n  }\n\n  get name() {\n    return this.zoneName;\n  }\n\n  get universal() {\n    return false;\n  }\n\n  offsetName(ts, { format, locale }) {\n    return parseZoneInfo(ts, format, locale, this.zoneName);\n  }\n\n  offset(ts) {\n    const date = new Date(ts),\n      dtf = makeDTF(this.zoneName),\n      [fYear, fMonth, fDay, fHour, fMinute, fSecond] = dtf.formatToParts\n        ? partsOffset(dtf, date)\n        : hackyOffset(dtf, date),\n      asUTC = Date.UTC(fYear, fMonth - 1, fDay, fHour, fMinute, fSecond);\n    let asTS = date.valueOf();\n    asTS -= asTS % 1000;\n    return (asUTC - asTS) / (60 * 1000);\n  }\n\n  equals(otherZone) {\n    return otherZone.type === \"iana\" && otherZone.zoneName === this.zoneName;\n  }\n\n  get isValid() {\n    return this.valid;\n  }\n}\n","import { padStart, signedOffset } from \"../impl/util\";\nimport Zone from \"../zone\";\n\nlet singleton = null;\n\nfunction hoursMinutesOffset(z) {\n  const hours = Math.trunc(z.fixed / 60),\n    minutes = Math.abs(z.fixed % 60),\n    sign = hours > 0 ? \"+\" : \"-\",\n    base = sign + Math.abs(hours);\n  return minutes > 0 ? `${base}:${padStart(minutes, 2)}` : base;\n}\n\nexport default class FixedOffsetZone extends Zone {\n  static get utcInstance() {\n    if (singleton === null) {\n      singleton = new FixedOffsetZone(0);\n    }\n    return singleton;\n  }\n\n  static instance(offset) {\n    return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);\n  }\n\n  static parseSpecifier(s) {\n    if (s) {\n      const r = s.match(/^utc(?:([+-]\\d{1,2})(?::(\\d{2}))?)?$/i);\n      if (r) {\n        return new FixedOffsetZone(signedOffset(r[1], r[2]));\n      }\n    }\n    return null;\n  }\n\n  constructor(offset) {\n    super();\n    this.fixed = offset;\n  }\n\n  get type() {\n    return \"fixed\";\n  }\n\n  get name() {\n    return this.fixed === 0 ? \"UTC\" : `UTC${hoursMinutesOffset(this)}`;\n  }\n\n  offsetName() {\n    return this.name;\n  }\n\n  get universal() {\n    return true;\n  }\n\n  offset() {\n    return this.fixed;\n  }\n\n  equals(otherZone) {\n    return otherZone.type === \"fixed\" && otherZone.fixed === this.fixed;\n  }\n\n  get isValid() {\n    return true;\n  }\n}\n","import Zone from \"../zone\";\n\nexport default class InvalidZone extends Zone {\n  constructor(zoneName) {\n    super();\n    this.zoneName = zoneName;\n  }\n\n  get type() {\n    return \"invalid\";\n  }\n\n  get name() {\n    return this.zoneName;\n  }\n\n  get universal() {\n    return false;\n  }\n\n  offsetName() {\n    return null;\n  }\n\n  offset() {\n    return NaN;\n  }\n\n  equals() {\n    return false;\n  }\n\n  get isValid() {\n    return false;\n  }\n}\n","/**\n * @private\n */\n\nimport Zone from \"../zone\";\nimport LocalZone from \"../zones/localZone\";\nimport IANAZone from \"../zones/IANAZone\";\nimport FixedOffsetZone from \"../zones/fixedOffsetZone\";\nimport InvalidZone from \"../zones/invalidZone\";\n\nimport { isUndefined, isString, isNumber } from \"./util\";\n\nexport function normalizeZone(input, defaultZone) {\n  let offset;\n  if (isUndefined(input) || input === null) {\n    return defaultZone;\n  } else if (input instanceof Zone) {\n    return input;\n  } else if (isString(input)) {\n    const lowered = input.toLowerCase();\n    if (lowered === \"local\") return LocalZone.instance;\n    else if (lowered === \"utc\" || lowered === \"gmt\") return FixedOffsetZone.utcInstance;\n    else if ((offset = IANAZone.parseGMTOffset(input)) != null) {\n      // handle Etc/GMT-4, which V8 chokes on\n      return FixedOffsetZone.instance(offset);\n    } else if (IANAZone.isValidSpecifier(lowered)) return new IANAZone(input);\n    else return FixedOffsetZone.parseSpecifier(lowered) || new InvalidZone(input);\n  } else if (isNumber(input)) {\n    return FixedOffsetZone.instance(input);\n  } else if (typeof input === \"object\" && input.offset && typeof input.offset === \"number\") {\n    // This is dumb, but the instanceof check above doesn't seem to really work\n    // so we're duck checking it\n    return input;\n  } else {\n    return new InvalidZone(input);\n  }\n}\n","import LocalZone from \"./zones/localZone\";\nimport Locale from \"./impl/locale\";\n\nimport { normalizeZone } from \"./impl/zoneUtil\";\n\nlet now = () => Date.now(),\n  defaultZone = null, // not setting this directly to LocalZone.instance bc loading order issues\n  defaultLocale = null,\n  defaultNumberingSystem = null,\n  defaultOutputCalendar = null,\n  throwOnInvalid = false;\n\n/**\n * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.\n */\nexport default class Settings {\n  /**\n   * Get the callback for returning the current timestamp.\n   * @type {function}\n   */\n  static get now() {\n    return now;\n  }\n\n  /**\n   * Set the callback for returning the current timestamp.\n   * The function should return a number, which will be interpreted as an Epoch millisecond count\n   * @type {function}\n   * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future\n   * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time\n   */\n  static set now(n) {\n    now = n;\n  }\n\n  /**\n   * Get the default time zone to create DateTimes in.\n   * @type {string}\n   */\n  static get defaultZoneName() {\n    return (defaultZone || LocalZone.instance).name;\n  }\n\n  /**\n   * Set the default time zone to create DateTimes in. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultZoneName(z) {\n    if (!z) {\n      defaultZone = null;\n    } else {\n      defaultZone = normalizeZone(z);\n    }\n  }\n\n  /**\n   * Get the default time zone object to create DateTimes in. Does not affect existing instances.\n   * @type {Zone}\n   */\n  static get defaultZone() {\n    return defaultZone || LocalZone.instance;\n  }\n\n  /**\n   * Get the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultLocale() {\n    return defaultLocale;\n  }\n\n  /**\n   * Set the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultLocale(locale) {\n    defaultLocale = locale;\n  }\n\n  /**\n   * Get the default numbering system to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultNumberingSystem() {\n    return defaultNumberingSystem;\n  }\n\n  /**\n   * Set the default numbering system to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultNumberingSystem(numberingSystem) {\n    defaultNumberingSystem = numberingSystem;\n  }\n\n  /**\n   * Get the default output calendar to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultOutputCalendar() {\n    return defaultOutputCalendar;\n  }\n\n  /**\n   * Set the default output calendar to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultOutputCalendar(outputCalendar) {\n    defaultOutputCalendar = outputCalendar;\n  }\n\n  /**\n   * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {boolean}\n   */\n  static get throwOnInvalid() {\n    return throwOnInvalid;\n  }\n\n  /**\n   * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {boolean}\n   */\n  static set throwOnInvalid(t) {\n    throwOnInvalid = t;\n  }\n\n  /**\n   * Reset Luxon's global caches. Should only be necessary in testing scenarios.\n   * @return {void}\n   */\n  static resetCaches() {\n    Locale.resetCache();\n  }\n}\n","import * as English from \"./english\";\nimport * as Formats from \"./formats\";\nimport { padStart } from \"./util\";\n\nfunction stringifyTokens(splits, tokenToString) {\n  let s = \"\";\n  for (const token of splits) {\n    if (token.literal) {\n      s += token.val;\n    } else {\n      s += tokenToString(token.val);\n    }\n  }\n  return s;\n}\n\nconst tokenToObject = {\n  D: Formats.DATE_SHORT,\n  DD: Formats.DATE_MED,\n  DDD: Formats.DATE_FULL,\n  DDDD: Formats.DATE_HUGE,\n  t: Formats.TIME_SIMPLE,\n  tt: Formats.TIME_WITH_SECONDS,\n  ttt: Formats.TIME_WITH_SHORT_OFFSET,\n  tttt: Formats.TIME_WITH_LONG_OFFSET,\n  T: Formats.TIME_24_SIMPLE,\n  TT: Formats.TIME_24_WITH_SECONDS,\n  TTT: Formats.TIME_24_WITH_SHORT_OFFSET,\n  TTTT: Formats.TIME_24_WITH_LONG_OFFSET,\n  f: Formats.DATETIME_SHORT,\n  ff: Formats.DATETIME_MED,\n  fff: Formats.DATETIME_FULL,\n  ffff: Formats.DATETIME_HUGE,\n  F: Formats.DATETIME_SHORT_WITH_SECONDS,\n  FF: Formats.DATETIME_MED_WITH_SECONDS,\n  FFF: Formats.DATETIME_FULL_WITH_SECONDS,\n  FFFF: Formats.DATETIME_HUGE_WITH_SECONDS\n};\n\n/**\n * @private\n */\n\nexport default class Formatter {\n  static create(locale, opts = {}) {\n    return new Formatter(locale, opts);\n  }\n\n  static parseFormat(fmt) {\n    let current = null,\n      currentFull = \"\",\n      bracketed = false;\n    const splits = [];\n    for (let i = 0; i < fmt.length; i++) {\n      const c = fmt.charAt(i);\n      if (c === \"'\") {\n        if (currentFull.length > 0) {\n          splits.push({ literal: bracketed, val: currentFull });\n        }\n        current = null;\n        currentFull = \"\";\n        bracketed = !bracketed;\n      } else if (bracketed) {\n        currentFull += c;\n      } else if (c === current) {\n        currentFull += c;\n      } else {\n        if (currentFull.length > 0) {\n          splits.push({ literal: false, val: currentFull });\n        }\n        currentFull = c;\n        current = c;\n      }\n    }\n\n    if (currentFull.length > 0) {\n      splits.push({ literal: bracketed, val: currentFull });\n    }\n\n    return splits;\n  }\n\n  constructor(locale, formatOpts) {\n    this.opts = formatOpts;\n    this.loc = locale;\n    this.systemLoc = null;\n  }\n\n  formatWithSystemDefault(dt, opts) {\n    if (this.systemLoc === null) {\n      this.systemLoc = this.loc.redefaultToSystem();\n    }\n    const df = this.systemLoc.dtFormatter(dt, Object.assign({}, this.opts, opts));\n    return df.format();\n  }\n\n  formatDateTime(dt, opts = {}) {\n    const df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));\n    return df.format();\n  }\n\n  formatDateTimeParts(dt, opts = {}) {\n    const df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));\n    return df.formatToParts();\n  }\n\n  resolvedOptions(dt, opts = {}) {\n    const df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));\n    return df.resolvedOptions();\n  }\n\n  num(n, p = 0) {\n    // we get some perf out of doing this here, annoyingly\n    if (this.opts.forceSimple) {\n      return padStart(n, p);\n    }\n\n    const opts = Object.assign({}, this.opts);\n\n    if (p > 0) {\n      opts.padTo = p;\n    }\n\n    return this.loc.numberFormatter(opts).format(n);\n  }\n\n  formatDateTimeFromString(dt, fmt) {\n    const knownEnglish = this.loc.listingMode() === \"en\";\n    const string = (opts, extract) => this.loc.extract(dt, opts, extract),\n      formatOffset = opts => {\n        if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {\n          return \"Z\";\n        }\n\n        const hours = Math.trunc(dt.offset / 60),\n          minutes = Math.abs(dt.offset % 60),\n          sign = hours >= 0 ? \"+\" : \"-\",\n          base = `${sign}${Math.abs(hours)}`;\n\n        switch (opts.format) {\n          case \"short\":\n            return `${sign}${this.num(Math.abs(hours), 2)}:${this.num(minutes, 2)}`;\n          case \"narrow\":\n            return minutes > 0 ? `${base}:${minutes}` : base;\n          case \"techie\":\n            return `${sign}${this.num(Math.abs(hours), 2)}${this.num(minutes, 2)}`;\n          default:\n            throw new RangeError(`Value format ${opts.format} is out of range for property format`);\n        }\n      },\n      meridiem = () =>\n        knownEnglish\n          ? English.meridiemForDateTime(dt)\n          : string({ hour: \"numeric\", hour12: true }, \"dayperiod\"),\n      month = (length, standalone) =>\n        knownEnglish\n          ? English.monthForDateTime(dt, length)\n          : string(standalone ? { month: length } : { month: length, day: \"numeric\" }, \"month\"),\n      weekday = (length, standalone) =>\n        knownEnglish\n          ? English.weekdayForDateTime(dt, length)\n          : string(\n              standalone ? { weekday: length } : { weekday: length, month: \"long\", day: \"numeric\" },\n              \"weekday\"\n            ),\n      maybeMacro = token => {\n        const macro = tokenToObject[token];\n        if (macro) {\n          return this.formatWithSystemDefault(dt, macro);\n        } else {\n          return token;\n        }\n      },\n      era = length =>\n        knownEnglish ? English.eraForDateTime(dt, length) : string({ era: length }, \"era\"),\n      tokenToString = token => {\n        const outputCal = this.loc.outputCalendar;\n\n        // Where possible: http://cldr.unicode.org/translation/date-time#TOC-Stand-Alone-vs.-Format-Styles\n        switch (token) {\n          // ms\n          case \"S\":\n            return this.num(dt.millisecond);\n          case \"u\":\n          // falls through\n          case \"SSS\":\n            return this.num(dt.millisecond, 3);\n          // seconds\n          case \"s\":\n            return this.num(dt.second);\n          case \"ss\":\n            return this.num(dt.second, 2);\n          // minutes\n          case \"m\":\n            return this.num(dt.minute);\n          case \"mm\":\n            return this.num(dt.minute, 2);\n          // hours\n          case \"h\":\n            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);\n          case \"hh\":\n            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);\n          case \"H\":\n            return this.num(dt.hour);\n          case \"HH\":\n            return this.num(dt.hour, 2);\n          // offset\n          case \"Z\":\n            // like +6\n            return formatOffset({ format: \"narrow\", allowZ: this.opts.allowZ });\n          case \"ZZ\":\n            // like +06:00\n            return formatOffset({ format: \"short\", allowZ: this.opts.allowZ });\n          case \"ZZZ\":\n            // like +0600\n            return formatOffset({ format: \"techie\", allowZ: false });\n          case \"ZZZZ\":\n            // like EST\n            return dt.offsetNameShort;\n          case \"ZZZZZ\":\n            // like Eastern Standard Time\n            return dt.offsetNameLong;\n          // zone\n          case \"z\":\n            // like America/New_York\n            return dt.zoneName;\n          // meridiems\n          case \"a\":\n            return meridiem();\n          // dates\n          case \"d\":\n            return outputCal ? string({ day: \"numeric\" }, \"day\") : this.num(dt.day);\n          case \"dd\":\n            return outputCal ? string({ day: \"2-digit\" }, \"day\") : this.num(dt.day, 2);\n          // weekdays - standalone\n          case \"c\":\n            // like 1\n            return this.num(dt.weekday);\n          case \"ccc\":\n            // like 'Tues'\n            return weekday(\"short\", true);\n          case \"cccc\":\n            // like 'Tuesday'\n            return weekday(\"long\", true);\n          case \"ccccc\":\n            // like 'T'\n            return weekday(\"narrow\", true);\n          // weekdays - format\n          case \"E\":\n            // like 1\n            return this.num(dt.weekday);\n          case \"EEE\":\n            // like 'Tues'\n            return weekday(\"short\", false);\n          case \"EEEE\":\n            // like 'Tuesday'\n            return weekday(\"long\", false);\n          case \"EEEEE\":\n            // like 'T'\n            return weekday(\"narrow\", false);\n          // months - standalone\n          case \"L\":\n            // like 1\n            return outputCal\n              ? string({ month: \"numeric\", day: \"numeric\" }, \"month\")\n              : this.num(dt.month);\n          case \"LL\":\n            // like 01, doesn't seem to work\n            return outputCal\n              ? string({ month: \"2-digit\", day: \"numeric\" }, \"month\")\n              : this.num(dt.month, 2);\n          case \"LLL\":\n            // like Jan\n            return month(\"short\", true);\n          case \"LLLL\":\n            // like January\n            return month(\"long\", true);\n          case \"LLLLL\":\n            // like J\n            return month(\"narrow\", true);\n          // months - format\n          case \"M\":\n            // like 1\n            return outputCal ? string({ month: \"numeric\" }, \"month\") : this.num(dt.month);\n          case \"MM\":\n            // like 01\n            return outputCal ? string({ month: \"2-digit\" }, \"month\") : this.num(dt.month, 2);\n          case \"MMM\":\n            // like Jan\n            return month(\"short\", false);\n          case \"MMMM\":\n            // like January\n            return month(\"long\", false);\n          case \"MMMMM\":\n            // like J\n            return month(\"narrow\", false);\n          // years\n          case \"y\":\n            // like 2014\n            return outputCal ? string({ year: \"numeric\" }, \"year\") : this.num(dt.year);\n          case \"yy\":\n            // like 14\n            return outputCal\n              ? string({ year: \"2-digit\" }, \"year\")\n              : this.num(dt.year.toString().slice(-2), 2);\n          case \"yyyy\":\n            // like 0012\n            return outputCal ? string({ year: \"numeric\" }, \"year\") : this.num(dt.year, 4);\n          case \"yyyyyy\":\n            // like 000012\n            return outputCal ? string({ year: \"numeric\" }, \"year\") : this.num(dt.year, 6);\n          // eras\n          case \"G\":\n            // like AD\n            return era(\"short\");\n          case \"GG\":\n            // like Anno Domini\n            return era(\"long\");\n          case \"GGGGG\":\n            return era(\"narrow\");\n          case \"kk\":\n            return this.num(dt.weekYear.toString().slice(-2), 2);\n          case \"kkkk\":\n            return this.num(dt.weekYear, 4);\n          case \"W\":\n            return this.num(dt.weekNumber);\n          case \"WW\":\n            return this.num(dt.weekNumber, 2);\n          case \"o\":\n            return this.num(dt.ordinal);\n          case \"ooo\":\n            return this.num(dt.ordinal, 3);\n          case \"q\":\n            // like 1\n            return this.num(dt.quarter);\n          case \"qq\":\n            // like 01\n            return this.num(dt.quarter, 2);\n          case \"X\":\n            return this.num(Math.floor(dt.ts / 1000));\n          case \"x\":\n            return this.num(dt.ts);\n          default:\n            return maybeMacro(token);\n        }\n      };\n\n    return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);\n  }\n\n  formatDurationFromString(dur, fmt) {\n    const tokenToField = token => {\n        switch (token[0]) {\n          case \"S\":\n            return \"millisecond\";\n          case \"s\":\n            return \"second\";\n          case \"m\":\n            return \"minute\";\n          case \"h\":\n            return \"hour\";\n          case \"d\":\n            return \"day\";\n          case \"M\":\n            return \"month\";\n          case \"y\":\n            return \"year\";\n          default:\n            return null;\n        }\n      },\n      tokenToString = lildur => token => {\n        const mapped = tokenToField(token);\n        if (mapped) {\n          return this.num(lildur.get(mapped), token.length);\n        } else {\n          return token;\n        }\n      },\n      tokens = Formatter.parseFormat(fmt),\n      realTokens = tokens.reduce(\n        (found, { literal, val }) => (literal ? found : found.concat(val)),\n        []\n      ),\n      collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter(t => t));\n    return stringifyTokens(tokens, tokenToString(collapsed));\n  }\n}\n","import { hasFormatToParts, hasIntl, padStart, roundTo } from \"./util\";\nimport * as English from \"./english\";\nimport Settings from \"../settings\";\nimport DateTime from \"../datetime\";\nimport Formatter from \"./formatter\";\n\nlet intlDTCache = {};\nfunction getCachedDTF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let dtf = intlDTCache[key];\n  if (!dtf) {\n    dtf = new Intl.DateTimeFormat(locString, opts);\n    intlDTCache[key] = dtf;\n  }\n  return dtf;\n}\n\nlet intlNumCache = {};\nfunction getCachendINF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let inf = intlNumCache[key];\n  if (!inf) {\n    inf = new Intl.NumberFormat(locString, opts);\n    intlNumCache[key] = inf;\n  }\n  return inf;\n}\n\nlet sysLocaleCache = null;\nfunction systemLocale() {\n  if (sysLocaleCache) {\n    return sysLocaleCache;\n  } else if (hasIntl()) {\n    const computedSys = new Intl.DateTimeFormat().resolvedOptions().locale;\n    // node sometimes defaults to \"und\". Override that because that is dumb\n    sysLocaleCache = computedSys === \"und\" ? \"en-US\" : computedSys;\n    return sysLocaleCache;\n  } else {\n    sysLocaleCache = \"en-US\";\n    return sysLocaleCache;\n  }\n}\n\nfunction parseLocaleString(localeStr) {\n  // I really want to avoid writing a BCP 47 parser\n  // see, e.g. https://github.com/wooorm/bcp-47\n  // Intead, we'll do this:\n\n  // a) if the string has no -u extensions, just leave it alone\n  // b) if it does, use Intl to resolve everything\n  // c) if Intl fails, try again without the -u\n\n  const uIndex = localeStr.indexOf(\"-u-\");\n  if (uIndex === -1) {\n    return [localeStr];\n  } else {\n    let options;\n    const smaller = localeStr.substring(0, uIndex);\n    try {\n      options = getCachedDTF(localeStr).resolvedOptions();\n    } catch (e) {\n      options = getCachedDTF(smaller).resolvedOptions();\n    }\n\n    const { numberingSystem, calendar } = options;\n    // return the smaller one so that we can append the calendar and numbering overrides to it\n    return [smaller, numberingSystem, calendar];\n  }\n}\n\nfunction intlConfigString(localeStr, numberingSystem, outputCalendar) {\n  if (hasIntl()) {\n    if (outputCalendar || numberingSystem) {\n      localeStr += \"-u\";\n\n      if (outputCalendar) {\n        localeStr += `-ca-${outputCalendar}`;\n      }\n\n      if (numberingSystem) {\n        localeStr += `-nu-${numberingSystem}`;\n      }\n      return localeStr;\n    } else {\n      return localeStr;\n    }\n  } else {\n    return [];\n  }\n}\n\nfunction mapMonths(f) {\n  const ms = [];\n  for (let i = 1; i <= 12; i++) {\n    const dt = DateTime.utc(2016, i, 1);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\nfunction mapWeekdays(f) {\n  const ms = [];\n  for (let i = 1; i <= 7; i++) {\n    const dt = DateTime.utc(2016, 11, 13 + i);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\nfunction listStuff(loc, length, defaultOK, englishFn, intlFn) {\n  const mode = loc.listingMode(defaultOK);\n\n  if (mode === \"error\") {\n    return null;\n  } else if (mode === \"en\") {\n    return englishFn(length);\n  } else {\n    return intlFn(length);\n  }\n}\n\nfunction supportsFastNumbers(loc) {\n  if (loc.numberingSystem && loc.numberingSystem !== \"latn\") {\n    return false;\n  } else {\n    return (\n      loc.numberingSystem === \"latn\" ||\n      !loc.locale ||\n      loc.locale.startsWith(\"en\") ||\n      (hasIntl() && Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === \"latn\")\n    );\n  }\n}\n\n/**\n * @private\n */\n\nclass SimpleNumberFormatter {\n  constructor(opts) {\n    this.padTo = opts.padTo || 0;\n    this.floor = opts.floor || false;\n  }\n\n  format(i) {\n    // to match the browser's numberformatter defaults\n    const fixed = this.floor ? Math.floor(i) : roundTo(i, 3);\n    return padStart(fixed, this.padTo);\n  }\n}\n\nclass IntlNumberFormatter {\n  constructor(intl, opts) {\n    const intlOpts = { useGrouping: false };\n\n    if (opts.padTo > 0) {\n      intlOpts.minimumIntegerDigits = opts.padTo;\n    }\n\n    this.floor = opts.floor;\n    this.inf = getCachendINF(intl, intlOpts);\n  }\n\n  format(i) {\n    const fixed = this.floor ? Math.floor(i) : i;\n    return this.inf.format(fixed);\n  }\n}\n\n/**\n * @private\n */\n\nclass PolyDateFormatter {\n  constructor(dt, intl, opts) {\n    this.opts = opts;\n    this.hasIntl = hasIntl();\n\n    let z;\n    if (dt.zone.universal && this.hasIntl) {\n      // Chromium doesn't support fixed-offset zones like Etc/GMT+8 in its formatter,\n      // See https://bugs.chromium.org/p/chromium/issues/detail?id=364374.\n      // So we have to make do. Two cases:\n      // 1. The format options tell us to show the zone. We can't do that, so the best\n      // we can do is format the date in UTC.\n      // 2. The format options don't tell us to show the zone. Then we can adjust them\n      // the time and tell the formatter to show it to us in UTC, so that the time is right\n      // and the bad zone doesn't show up.\n      // We can clean all this up when Chrome fixes this.\n      z = \"UTC\";\n      if (opts.timeZoneName) {\n        this.dt = dt;\n      } else {\n        this.dt = dt.offset === 0 ? dt : DateTime.fromMillis(dt.ts + dt.offset * 60 * 1000);\n      }\n    } else if (dt.zone.type === \"local\") {\n      this.dt = dt;\n    } else {\n      this.dt = dt;\n      z = dt.zone.name;\n    }\n\n    if (this.hasIntl) {\n      const intlOpts = Object.assign({}, this.opts);\n      if (z) {\n        intlOpts.timeZone = z;\n      }\n      this.dtf = getCachedDTF(intl, intlOpts);\n    }\n  }\n\n  format() {\n    if (this.hasIntl) {\n      return this.dtf.format(this.dt.toJSDate());\n    } else {\n      const tokenFormat = English.formatString(this.opts),\n        loc = Locale.create(\"en-US\");\n      return Formatter.create(loc).formatDateTimeFromString(this.dt, tokenFormat);\n    }\n  }\n\n  formatToParts() {\n    if (this.hasIntl && hasFormatToParts()) {\n      return this.dtf.formatToParts(this.dt.toJSDate());\n    } else {\n      // This is kind of a cop out. We actually could do this for English. However, we couldn't do it for intl strings\n      // and IMO it's too weird to have an uncanny valley like that\n      return [];\n    }\n  }\n\n  resolvedOptions() {\n    if (this.hasIntl) {\n      return this.dtf.resolvedOptions();\n    } else {\n      return {\n        locale: \"en-US\",\n        numberingSystem: \"latn\",\n        outputCalendar: \"gregory\"\n      };\n    }\n  }\n}\n\n/**\n * @private\n */\n\nexport default class Locale {\n  static fromOpts(opts) {\n    return Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar, opts.defaultToEN);\n  }\n\n  static create(locale, numberingSystem, outputCalendar, defaultToEN = false) {\n    const specifiedLocale = locale || Settings.defaultLocale,\n      // the system locale is useful for human readable strings but annoying for parsing/formatting known formats\n      localeR = specifiedLocale || (defaultToEN ? \"en-US\" : systemLocale()),\n      numberingSystemR = numberingSystem || Settings.defaultNumberingSystem,\n      outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;\n\n    return new Locale(localeR, numberingSystemR, outputCalendarR, specifiedLocale);\n  }\n\n  static resetCache() {\n    sysLocaleCache = null;\n    intlDTCache = {};\n    intlNumCache = {};\n  }\n\n  static fromObject({ locale, numberingSystem, outputCalendar } = {}) {\n    return Locale.create(locale, numberingSystem, outputCalendar);\n  }\n\n  constructor(locale, numbering, outputCalendar, specifiedLocale) {\n    let [parsedLocale, parsedNumberingSystem, parsedOutputCalendar] = parseLocaleString(locale);\n\n    this.locale = parsedLocale;\n    this.numberingSystem = numbering || parsedNumberingSystem || null;\n    this.outputCalendar = outputCalendar || parsedOutputCalendar || null;\n    this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);\n\n    this.weekdaysCache = { format: {}, standalone: {} };\n    this.monthsCache = { format: {}, standalone: {} };\n    this.meridiemCache = null;\n    this.eraCache = {};\n\n    this.specifiedLocale = specifiedLocale;\n    this.fastNumbersCached = null;\n  }\n\n  get fastNumbers() {\n    if (this.fastNumbersCached == null) {\n      this.fastNumbersCached = supportsFastNumbers(this);\n    }\n\n    return this.fastNumbersCached;\n  }\n\n  listingMode(defaultOK = true) {\n    const intl = hasIntl(),\n      hasFTP = intl && hasFormatToParts(),\n      isActuallyEn =\n        this.locale === \"en\" ||\n        this.locale.toLowerCase() === \"en-us\" ||\n        (intl &&\n          Intl.DateTimeFormat(this.intl)\n            .resolvedOptions()\n            .locale.startsWith(\"en-us\")),\n      hasNoWeirdness =\n        (this.numberingSystem === null || this.numberingSystem === \"latn\") &&\n        (this.outputCalendar === null || this.outputCalendar === \"gregory\");\n\n    if (!hasFTP && !(isActuallyEn && hasNoWeirdness) && !defaultOK) {\n      return \"error\";\n    } else if (!hasFTP || (isActuallyEn && hasNoWeirdness)) {\n      return \"en\";\n    } else {\n      return \"intl\";\n    }\n  }\n\n  clone(alts) {\n    if (!alts || Object.getOwnPropertyNames(alts).length === 0) {\n      return this;\n    } else {\n      return Locale.create(\n        alts.locale || this.specifiedLocale,\n        alts.numberingSystem || this.numberingSystem,\n        alts.outputCalendar || this.outputCalendar,\n        alts.defaultToEN || false\n      );\n    }\n  }\n\n  redefaultToEN(alts = {}) {\n    return this.clone(Object.assign({}, alts, { defaultToEN: true }));\n  }\n\n  redefaultToSystem(alts = {}) {\n    return this.clone(Object.assign({}, alts, { defaultToEN: false }));\n  }\n\n  months(length, format = false, defaultOK = true) {\n    return listStuff(this, length, defaultOK, English.months, () => {\n      const intl = format ? { month: length, day: \"numeric\" } : { month: length },\n        formatStr = format ? \"format\" : \"standalone\";\n      if (!this.monthsCache[formatStr][length]) {\n        this.monthsCache[formatStr][length] = mapMonths(dt => this.extract(dt, intl, \"month\"));\n      }\n      return this.monthsCache[formatStr][length];\n    });\n  }\n\n  weekdays(length, format = false, defaultOK = true) {\n    return listStuff(this, length, defaultOK, English.weekdays, () => {\n      const intl = format\n          ? { weekday: length, year: \"numeric\", month: \"long\", day: \"numeric\" }\n          : { weekday: length },\n        formatStr = format ? \"format\" : \"standalone\";\n      if (!this.weekdaysCache[formatStr][length]) {\n        this.weekdaysCache[formatStr][length] = mapWeekdays(dt =>\n          this.extract(dt, intl, \"weekday\")\n        );\n      }\n      return this.weekdaysCache[formatStr][length];\n    });\n  }\n\n  meridiems(defaultOK = true) {\n    return listStuff(\n      this,\n      undefined,\n      defaultOK,\n      () => English.meridiems,\n      () => {\n        // In theory there could be aribitrary day periods. We're gonna assume there are exactly two\n        // for AM and PM. This is probably wrong, but it's makes parsing way easier.\n        if (!this.meridiemCache) {\n          const intl = { hour: \"numeric\", hour12: true };\n          this.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(\n            dt => this.extract(dt, intl, \"dayperiod\")\n          );\n        }\n\n        return this.meridiemCache;\n      }\n    );\n  }\n\n  eras(length, defaultOK = true) {\n    return listStuff(this, length, defaultOK, English.eras, () => {\n      const intl = { era: length };\n\n      // This is utter bullshit. Different calendars are going to define eras totally differently. What I need is the minimum set of dates\n      // to definitely enumerate them.\n      if (!this.eraCache[length]) {\n        this.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map(dt =>\n          this.extract(dt, intl, \"era\")\n        );\n      }\n\n      return this.eraCache[length];\n    });\n  }\n\n  extract(dt, intlOpts, field) {\n    const df = this.dtFormatter(dt, intlOpts),\n      results = df.formatToParts(),\n      matching = results.find(m => m.type.toLowerCase() === field);\n\n    return matching ? matching.value : null;\n  }\n\n  numberFormatter(opts = {}) {\n    // this forcesimple option is never used (the only caller short-circuits on it, but it seems safer to leave)\n    // (in contrast, the rest of the condition is used heavily)\n    if (opts.forceSimple || this.fastNumbers || !hasIntl()) {\n      return new SimpleNumberFormatter(opts);\n    } else {\n      return new IntlNumberFormatter(this.intl, opts);\n    }\n  }\n\n  dtFormatter(dt, intlOpts = {}) {\n    return new PolyDateFormatter(dt, this.intl, intlOpts);\n  }\n\n  equals(other) {\n    return (\n      this.locale === other.locale &&\n      this.numberingSystem === other.numberingSystem &&\n      this.outputCalendar === other.outputCalendar\n    );\n  }\n}\n","import { untruncateYear, signedOffset, parseMillis } from \"./util\";\nimport * as English from \"./english\";\nimport FixedOffsetZone from \"../zones/fixedOffsetZone\";\nimport IANAZone from \"../zones/IANAZone\";\n\n/*\n * This file handles parsing for well-specified formats. Here's how it works:\n * Two things go into parsing: a regex to match with and an extractor to take apart the groups in the match.\n * An extractor is just a function that takes a regex match array and returns a { year: ..., month: ... } object\n * parse() does the work of executing the regex and applying the extractor. It takes multiple regex/extractor pairs to try in sequence.\n * Extractors can take a \"cursor\" representing the offset in the match to look at. This makes it easy to combine extractors.\n * combineExtractors() does the work of combining them, keeping track of the cursor through multiple extractions.\n * Some extractions are super dumb and simpleParse and fromStrings help DRY them.\n */\n\nfunction combineRegexes(...regexes) {\n  const full = regexes.reduce((f, r) => f + r.source, \"\");\n  return RegExp(`^${full}$`);\n}\n\nfunction combineExtractors(...extractors) {\n  return m =>\n    extractors\n      .reduce(\n        ([mergedVals, mergedZone, cursor], ex) => {\n          const [val, zone, next] = ex(m, cursor);\n          return [Object.assign(mergedVals, val), mergedZone || zone, next];\n        },\n        [{}, null, 1]\n      )\n      .slice(0, 2);\n}\n\nfunction parse(s, ...patterns) {\n  if (s == null) {\n    return [null, null];\n  }\n\n  for (const [regex, extractor] of patterns) {\n    const m = regex.exec(s);\n    if (m) {\n      return extractor(m);\n    }\n  }\n  return [null, null];\n}\n\nfunction simpleParse(...keys) {\n  return (match, cursor) => {\n    const ret = {};\n    let i;\n\n    for (i = 0; i < keys.length; i++) {\n      ret[keys[i]] = parseInt(match[cursor + i]);\n    }\n    return [ret, null, cursor + i];\n  };\n}\n\n// ISO and SQL parsing\nconst offsetRegex = /(?:(Z)|([+-]\\d\\d)(?::?(\\d\\d))?)/,\n  isoTimeBaseRegex = /(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:[.,](\\d{1,9}))?)?)?/,\n  isoTimeRegex = RegExp(`${isoTimeBaseRegex.source}${offsetRegex.source}?`),\n  isoTimeExtensionRegex = RegExp(`(?:T${isoTimeRegex.source})?`),\n  isoYmdRegex = /([+-]\\d{6}|\\d{4})(?:-?(\\d\\d)(?:-?(\\d\\d))?)?/,\n  isoWeekRegex = /(\\d{4})-?W(\\d\\d)(?:-?(\\d))?/,\n  isoOrdinalRegex = /(\\d{4})-?(\\d{3})/,\n  extractISOWeekData = simpleParse(\"weekYear\", \"weekNumber\", \"weekDay\"),\n  extractISOOrdinalData = simpleParse(\"year\", \"ordinal\"),\n  sqlYmdRegex = /(\\d{4})-(\\d\\d)-(\\d\\d)/, // dumbed-down version of the ISO one\n  sqlTimeRegex = RegExp(\n    `${isoTimeBaseRegex.source} ?(?:${offsetRegex.source}|([a-zA-Z_]{1,256}/[a-zA-Z_]{1,256}))?`\n  ),\n  sqlTimeExtensionRegex = RegExp(`(?: ${sqlTimeRegex.source})?`);\n\nfunction extractISOYmd(match, cursor) {\n  const item = {\n    year: parseInt(match[cursor]),\n    month: parseInt(match[cursor + 1]) || 1,\n    day: parseInt(match[cursor + 2]) || 1\n  };\n\n  return [item, null, cursor + 3];\n}\n\nfunction extractISOTime(match, cursor) {\n  const item = {\n    hour: parseInt(match[cursor]) || 0,\n    minute: parseInt(match[cursor + 1]) || 0,\n    second: parseInt(match[cursor + 2]) || 0,\n    millisecond: parseMillis(match[cursor + 3])\n  };\n\n  return [item, null, cursor + 4];\n}\n\nfunction extractISOOffset(match, cursor) {\n  const local = !match[cursor] && !match[cursor + 1],\n    fullOffset = signedOffset(match[cursor + 1], match[cursor + 2]),\n    zone = local ? null : FixedOffsetZone.instance(fullOffset);\n  return [{}, zone, cursor + 3];\n}\n\nfunction extractIANAZone(match, cursor) {\n  const zone = match[cursor] ? new IANAZone(match[cursor]) : null;\n  return [{}, zone, cursor + 1];\n}\n\n// ISO duration parsing\n\nconst isoDuration = /^P(?:(?:(-?\\d{1,9})Y)?(?:(-?\\d{1,9})M)?(?:(-?\\d{1,9})D)?(?:T(?:(-?\\d{1,9})H)?(?:(-?\\d{1,9})M)?(?:(-?\\d{1,9})(?:[.,](-?\\d{1,9}))?S)?)?|(-?\\d{1,9})W)$/;\n\nfunction extractISODuration(match) {\n  const [\n    ,\n    yearStr,\n    monthStr,\n    dayStr,\n    hourStr,\n    minuteStr,\n    secondStr,\n    millisecondsStr,\n    weekStr\n  ] = match;\n\n  return [\n    {\n      years: parseInt(yearStr),\n      months: parseInt(monthStr),\n      weeks: parseInt(weekStr),\n      days: parseInt(dayStr),\n      hours: parseInt(hourStr),\n      minutes: parseInt(minuteStr),\n      seconds: parseInt(secondStr),\n      milliseconds: parseMillis(millisecondsStr)\n    }\n  ];\n}\n\n// These are a little braindead. EDT *should* tell us that we're in, say, America/New_York\n// and not just that we're in -240 *right now*. But since I don't think these are used that often\n// I'm just going to ignore that\nconst obsOffsets = {\n  GMT: 0,\n  EDT: -4 * 60,\n  EST: -5 * 60,\n  CDT: -5 * 60,\n  CST: -6 * 60,\n  MDT: -6 * 60,\n  MST: -7 * 60,\n  PDT: -7 * 60,\n  PST: -8 * 60\n};\n\nfunction fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\n  const result = {\n    year: yearStr.length === 2 ? untruncateYear(parseInt(yearStr)) : parseInt(yearStr),\n    month:\n      monthStr.length === 2 ? parseInt(monthStr, 10) : English.monthsShort.indexOf(monthStr) + 1,\n    day: parseInt(dayStr),\n    hour: parseInt(hourStr),\n    minute: parseInt(minuteStr)\n  };\n\n  if (secondStr) result.second = parseInt(secondStr);\n  if (weekdayStr) {\n    result.weekday =\n      weekdayStr.length > 3\n        ? English.weekdaysLong.indexOf(weekdayStr) + 1\n        : English.weekdaysShort.indexOf(weekdayStr) + 1;\n  }\n\n  return result;\n}\n\n// RFC 2822/5322\nconst rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\\d\\d)(\\d\\d)))$/;\n\nfunction extractRFC2822(match) {\n  const [\n      ,\n      weekdayStr,\n      dayStr,\n      monthStr,\n      yearStr,\n      hourStr,\n      minuteStr,\n      secondStr,\n      obsOffset,\n      milOffset,\n      offHourStr,\n      offMinuteStr\n    ] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n\n  let offset;\n  if (obsOffset) {\n    offset = obsOffsets[obsOffset];\n  } else if (milOffset) {\n    offset = 0;\n  } else {\n    offset = signedOffset(offHourStr, offMinuteStr);\n  }\n\n  return [result, new FixedOffsetZone(offset)];\n}\n\nfunction preprocessRFC2822(s) {\n  // Remove comments and folding whitespace and replace multiple-spaces with a single space\n  return s\n    .replace(/\\([^)]*\\)|[\\n\\t]/g, \" \")\n    .replace(/(\\s\\s+)/g, \" \")\n    .trim();\n}\n\n// http date\n\nconst rfc1123 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\\d\\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\\d{4}) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n  rfc850 = /^(Monday|Tuesday|Wedsday|Thursday|Friday|Saturday|Sunday), (\\d\\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n  ascii = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \\d|\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) (\\d{4})$/;\n\nfunction extractRFC1123Or850(match) {\n  const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\n\nfunction extractASCII(match) {\n  const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\n\n/**\n * @private\n */\n\nexport function parseISODate(s) {\n  return parse(\n    s,\n    [\n      combineRegexes(isoYmdRegex, isoTimeExtensionRegex),\n      combineExtractors(extractISOYmd, extractISOTime, extractISOOffset)\n    ],\n    [\n      combineRegexes(isoWeekRegex, isoTimeExtensionRegex),\n      combineExtractors(extractISOWeekData, extractISOTime, extractISOOffset)\n    ],\n    [\n      combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex),\n      combineExtractors(extractISOOrdinalData, extractISOTime)\n    ],\n    [combineRegexes(isoTimeRegex), combineExtractors(extractISOTime, extractISOOffset)]\n  );\n}\n\nexport function parseRFC2822Date(s) {\n  return parse(preprocessRFC2822(s), [rfc2822, extractRFC2822]);\n}\n\nexport function parseHTTPDate(s) {\n  return parse(\n    s,\n    [rfc1123, extractRFC1123Or850],\n    [rfc850, extractRFC1123Or850],\n    [ascii, extractASCII]\n  );\n}\n\nexport function parseISODuration(s) {\n  return parse(s, [isoDuration, extractISODuration]);\n}\n\nexport function parseSQL(s) {\n  return parse(\n    s,\n    [\n      combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex),\n      combineExtractors(extractISOYmd, extractISOTime, extractISOOffset, extractIANAZone)\n    ],\n    [\n      combineRegexes(sqlTimeRegex),\n      combineExtractors(extractISOTime, extractISOOffset, extractIANAZone)\n    ]\n  );\n}\n","export default class Invalid {\n  constructor(reason, explanation) {\n    this.reason = reason;\n    this.explanation = explanation;\n  }\n\n  toMessage() {\n    if (this.explanation) {\n      return `${this.reason}: ${this.explanation}`;\n    } else {\n      return this.reason;\n    }\n  }\n}\n","import { isUndefined, isNumber, normalizeObject } from \"./impl/util\";\nimport Locale from \"./impl/locale\";\nimport Formatter from \"./impl/formatter\";\nimport { parseISODuration } from \"./impl/regexParser\";\nimport Settings from \"./settings\";\nimport { InvalidArgumentError, InvalidDurationError, InvalidUnitError } from \"./errors\";\nimport Invalid from \"./impl/invalid\";\n\nconst INVALID = \"Invalid Duration\";\n\n// unit conversion constants\nconst lowOrderMatrix = {\n    weeks: {\n      days: 7,\n      hours: 7 * 24,\n      minutes: 7 * 24 * 60,\n      seconds: 7 * 24 * 60 * 60,\n      milliseconds: 7 * 24 * 60 * 60 * 1000\n    },\n    days: {\n      hours: 24,\n      minutes: 24 * 60,\n      seconds: 24 * 60 * 60,\n      milliseconds: 24 * 60 * 60 * 1000\n    },\n    hours: { minutes: 60, seconds: 60 * 60, milliseconds: 60 * 60 * 1000 },\n    minutes: { seconds: 60, milliseconds: 60 * 1000 },\n    seconds: { milliseconds: 1000 }\n  },\n  casualMatrix = Object.assign(\n    {\n      years: {\n        months: 12,\n        weeks: 52,\n        days: 365,\n        hours: 365 * 24,\n        minutes: 365 * 24 * 60,\n        seconds: 365 * 24 * 60 * 60,\n        milliseconds: 365 * 24 * 60 * 60 * 1000\n      },\n      quarters: {\n        months: 3,\n        weeks: 13,\n        days: 91,\n        hours: 91 * 24,\n        minutes: 91 * 24 * 60,\n        milliseconds: 91 * 24 * 60 * 60 * 1000\n      },\n      months: {\n        weeks: 4,\n        days: 30,\n        hours: 30 * 24,\n        minutes: 30 * 24 * 60,\n        seconds: 30 * 24 * 60 * 60,\n        milliseconds: 30 * 24 * 60 * 60 * 1000\n      }\n    },\n    lowOrderMatrix\n  ),\n  daysInYearAccurate = 146097.0 / 400,\n  daysInMonthAccurate = 146097.0 / 4800,\n  accurateMatrix = Object.assign(\n    {\n      years: {\n        months: 12,\n        weeks: daysInYearAccurate / 7,\n        days: daysInYearAccurate,\n        hours: daysInYearAccurate * 24,\n        minutes: daysInYearAccurate * 24 * 60,\n        seconds: daysInYearAccurate * 24 * 60 * 60,\n        milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000\n      },\n      quarters: {\n        months: 3,\n        weeks: daysInYearAccurate / 28,\n        days: daysInYearAccurate / 4,\n        hours: (daysInYearAccurate * 24) / 4,\n        minutes: (daysInYearAccurate * 24 * 60) / 4,\n        seconds: (daysInYearAccurate * 24 * 60 * 60) / 4,\n        milliseconds: (daysInYearAccurate * 24 * 60 * 60 * 1000) / 4\n      },\n      months: {\n        weeks: daysInMonthAccurate / 7,\n        days: daysInMonthAccurate,\n        hours: daysInMonthAccurate * 24,\n        minutes: daysInMonthAccurate * 24 * 60,\n        seconds: daysInMonthAccurate * 24 * 60 * 60,\n        milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1000\n      }\n    },\n    lowOrderMatrix\n  );\n\n// units ordered by size\nconst orderedUnits = [\n  \"years\",\n  \"quarters\",\n  \"months\",\n  \"weeks\",\n  \"days\",\n  \"hours\",\n  \"minutes\",\n  \"seconds\",\n  \"milliseconds\"\n];\n\nconst reverseUnits = orderedUnits.slice(0).reverse();\n\n// clone really means \"create another instance just like this one, but with these changes\"\nfunction clone(dur, alts, clear = false) {\n  // deep merge for vals\n  const conf = {\n    values: clear ? alts.values : Object.assign({}, dur.values, alts.values || {}),\n    loc: dur.loc.clone(alts.loc),\n    conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy\n  };\n  return new Duration(conf);\n}\n\nfunction antiTrunc(n) {\n  return n < 0 ? Math.floor(n) : Math.ceil(n);\n}\n\n// NB: mutates parameters\nfunction convert(matrix, fromMap, fromUnit, toMap, toUnit) {\n  const conv = matrix[toUnit][fromUnit],\n    raw = fromMap[fromUnit] / conv,\n    sameSign = Math.sign(raw) === Math.sign(toMap[toUnit]),\n    // ok, so this is wild, but see the matrix in the tests\n    added =\n      !sameSign && toMap[toUnit] !== 0 && Math.abs(raw) <= 1 ? antiTrunc(raw) : Math.trunc(raw);\n  toMap[toUnit] += added;\n  fromMap[fromUnit] -= added * conv;\n}\n\n// NB: mutates parameters\nfunction normalizeValues(matrix, vals) {\n  reverseUnits.reduce((previous, current) => {\n    if (!isUndefined(vals[current])) {\n      if (previous) {\n        convert(matrix, vals, previous, vals, current);\n      }\n      return current;\n    } else {\n      return previous;\n    }\n  }, null);\n}\n\n/**\n * A Duration object represents a period of time, like \"2 months\" or \"1 day, 1 hour\". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime.plus} to add a Duration object to a DateTime, producing another DateTime.\n *\n * Here is a brief overview of commonly used methods and getters in Duration:\n *\n * * **Creation** To create a Duration, use {@link Duration.fromMillis}, {@link Duration.fromObject}, or {@link Duration.fromISO}.\n * * **Unit values** See the {@link Duration.years}, {@link Duration.months}, {@link Duration.weeks}, {@link Duration.days}, {@link Duration.hours}, {@link Duration.minutes}, {@link Duration.seconds}, {@link Duration.milliseconds} accessors.\n * * **Configuration** See  {@link Duration.locale} and {@link Duration.numberingSystem} accessors.\n * * **Transformation** To create new Durations out of old ones use {@link Duration.plus}, {@link Duration.minus}, {@link Duration.normalize}, {@link Duration.set}, {@link Duration.reconfigure}, {@link Duration.shiftTo}, and {@link Duration.negate}.\n * * **Output** To convert the Duration into other representations, see {@link Duration.as}, {@link Duration.toISO}, {@link Duration.toFormat}, and {@link Duration.toJSON}\n *\n * There's are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.\n */\nexport default class Duration {\n  /**\n   * @private\n   */\n  constructor(config) {\n    const accurate = config.conversionAccuracy === \"longterm\" || false;\n    /**\n     * @access private\n     */\n    this.values = config.values;\n    /**\n     * @access private\n     */\n    this.loc = config.loc || Locale.create();\n    /**\n     * @access private\n     */\n    this.conversionAccuracy = accurate ? \"longterm\" : \"casual\";\n    /**\n     * @access private\n     */\n    this.invalid = config.invalid || null;\n    /**\n     * @access private\n     */\n    this.matrix = accurate ? accurateMatrix : casualMatrix;\n    /**\n     * @access private\n     */\n    this.isLuxonDuration = true;\n  }\n\n  /**\n   * Create Duration from a number of milliseconds.\n   * @param {number} count of milliseconds\n   * @param {Object} opts - options for parsing\n   * @param {string} [opts.locale='en-US'] - the locale to use\n   * @param {string} opts.numberingSystem - the numbering system to use\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  static fromMillis(count, opts) {\n    return Duration.fromObject(Object.assign({ milliseconds: count }, opts));\n  }\n\n  /**\n   * Create a Duration from a Javascript object with keys like 'years' and 'hours.\n   * If this object is empty then zero  milliseconds duration is returned.\n   * @param {Object} obj - the object to create the DateTime from\n   * @param {number} obj.years\n   * @param {number} obj.quarters\n   * @param {number} obj.months\n   * @param {number} obj.weeks\n   * @param {number} obj.days\n   * @param {number} obj.hours\n   * @param {number} obj.minutes\n   * @param {number} obj.seconds\n   * @param {number} obj.milliseconds\n   * @param {string} [obj.locale='en-US'] - the locale to use\n   * @param {string} obj.numberingSystem - the numbering system to use\n   * @param {string} [obj.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  static fromObject(obj) {\n    if (obj == null || typeof obj !== \"object\") {\n      throw new InvalidArgumentError(\n        `Duration.fromObject: argument expected to be an object, got ${typeof obj}`\n      );\n    }\n    return new Duration({\n      values: normalizeObject(obj, Duration.normalizeUnit, true),\n      loc: Locale.fromObject(obj),\n      conversionAccuracy: obj.conversionAccuracy\n    });\n  }\n\n  /**\n   * Create a Duration from an ISO 8601 duration string.\n   * @param {string} text - text to parse\n   * @param {Object} opts - options for parsing\n   * @param {string} [opts.locale='en-US'] - the locale to use\n   * @param {string} opts.numberingSystem - the numbering system to use\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\n   * @example Duration.fromISO('P3Y6M4DT12H30M5S').toObject() //=> { years: 3, months: 6, day: 4, hours: 12, minutes: 30, seconds: 5 }\n   * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }\n   * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }\n   * @return {Duration}\n   */\n  static fromISO(text, opts) {\n    const [parsed] = parseISODuration(text);\n    if (parsed) {\n      const obj = Object.assign(parsed, opts);\n      return Duration.fromObject(obj);\n    } else {\n      return Duration.invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ISO 8601`);\n    }\n  }\n\n  /**\n   * Create an invalid Duration.\n   * @param {string} reason - simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {Duration}\n   */\n  static invalid(reason, explanation = null) {\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the Duration is invalid\");\n    }\n\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (Settings.throwOnInvalid) {\n      throw new InvalidDurationError(invalid);\n    } else {\n      return new Duration({ invalid });\n    }\n  }\n\n  /**\n   * @private\n   */\n  static normalizeUnit(unit, ignoreUnknown = false) {\n    const normalized = {\n      year: \"years\",\n      years: \"years\",\n      quarter: \"quarters\",\n      quarters: \"quarters\",\n      month: \"months\",\n      months: \"months\",\n      week: \"weeks\",\n      weeks: \"weeks\",\n      day: \"days\",\n      days: \"days\",\n      hour: \"hours\",\n      hours: \"hours\",\n      minute: \"minutes\",\n      minutes: \"minutes\",\n      second: \"seconds\",\n      seconds: \"seconds\",\n      millisecond: \"milliseconds\",\n      milliseconds: \"milliseconds\"\n    }[unit ? unit.toLowerCase() : unit];\n\n    if (!ignoreUnknown && !normalized) throw new InvalidUnitError(unit);\n\n    return normalized;\n  }\n\n  /**\n   * Check if an object is a Duration. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n  static isDuration(o) {\n    return o.isLuxonDuration;\n  }\n\n  /**\n   * Get  the locale of a Duration, such 'en-GB'\n   * @type {string}\n   */\n  get locale() {\n    return this.isValid ? this.loc.locale : null;\n  }\n\n  /**\n   * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration\n   *\n   * @type {string}\n   */\n  get numberingSystem() {\n    return this.isValid ? this.loc.numberingSystem : null;\n  }\n\n  /**\n   * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:\n   * * `S` for milliseconds\n   * * `s` for seconds\n   * * `m` for minutes\n   * * `h` for hours\n   * * `d` for days\n   * * `M` for months\n   * * `y` for years\n   * Notes:\n   * * Add padding by repeating the token, e.g. \"yy\" pads the years to two digits, \"hhhh\" pads the hours out to four digits\n   * * The duration will be converted to the set of units in the format string using {@link Duration.shiftTo} and the Durations's conversion accuracy setting.\n   * @param {string} fmt - the format string\n   * @param {Object} opts - options\n   * @param {boolean} [opts.floor=true] - floor numerical values\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"y d s\") //=> \"1 6 2\"\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"yy dd sss\") //=> \"01 06 002\"\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"M S\") //=> \"12 518402000\"\n   * @return {string}\n   */\n  toFormat(fmt, opts = {}) {\n    // reverse-compat since 1.2; we always round down now, never up, and we do it by default\n    const fmtOpts = Object.assign({}, opts, {\n      floor: opts.round !== false && opts.floor !== false\n    });\n    return this.isValid\n      ? Formatter.create(this.loc, fmtOpts).formatDurationFromString(this, fmt)\n      : INVALID;\n  }\n\n  /**\n   * Returns a Javascript object with this Duration's values.\n   * @param opts - options for generating the object\n   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }\n   * @return {Object}\n   */\n  toObject(opts = {}) {\n    if (!this.isValid) return {};\n\n    const base = Object.assign({}, this.values);\n\n    if (opts.includeConfig) {\n      base.conversionAccuracy = this.conversionAccuracy;\n      base.numberingSystem = this.loc.numberingSystem;\n      base.locale = this.loc.locale;\n    }\n    return base;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Duration.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\n   * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'\n   * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'\n   * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'\n   * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'\n   * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'\n   * @return {string}\n   */\n  toISO() {\n    // we could use the formatter, but this is an easier way to get the minimum string\n    if (!this.isValid) return null;\n\n    let s = \"P\";\n    if (this.years !== 0) s += this.years + \"Y\";\n    if (this.months !== 0 || this.quarters !== 0) s += this.months + this.quarters * 3 + \"M\";\n    if (this.days !== 0 || this.weeks !== 0) s += this.days + this.weeks * 7 + \"D\";\n    if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0)\n      s += \"T\";\n    if (this.hours !== 0) s += this.hours + \"H\";\n    if (this.minutes !== 0) s += this.minutes + \"M\";\n    if (this.seconds !== 0 || this.milliseconds !== 0)\n      s += this.seconds + this.milliseconds / 1000 + \"S\";\n    return s;\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.\n   * @return {string}\n   */\n  toJSON() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.\n   * @return {string}\n   */\n  toString() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns an milliseconds value of this Duration.\n   * @return {number}\n   */\n  valueOf() {\n    return this.as(\"milliseconds\");\n  }\n\n  /**\n   * Make this Duration longer by the specified amount. Return a newly-constructed Duration.\n   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @return {Duration}\n   */\n  plus(duration) {\n    if (!this.isValid) return this;\n\n    const dur = friendlyDuration(duration),\n      result = {};\n\n    for (const k of orderedUnits) {\n      if (dur.values.hasOwnProperty(k) || this.values.hasOwnProperty(k)) {\n        result[k] = dur.get(k) + this.get(k);\n      }\n    }\n\n    return clone(this, { values: result }, true);\n  }\n\n  /**\n   * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.\n   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @return {Duration}\n   */\n  minus(duration) {\n    if (!this.isValid) return this;\n\n    const dur = friendlyDuration(duration);\n    return this.plus(dur.negate());\n  }\n\n  /**\n   * Get the value of unit.\n   * @param {string} unit - a unit such as 'minute' or 'day'\n   * @example Duration.fromObject({years: 2, days: 3}).years //=> 2\n   * @example Duration.fromObject({years: 2, days: 3}).months //=> 0\n   * @example Duration.fromObject({years: 2, days: 3}).days //=> 3\n   * @return {number}\n   */\n  get(unit) {\n    return this[Duration.normalizeUnit(unit)];\n  }\n\n  /**\n   * \"Set\" the values of specified units. Return a newly-constructed Duration.\n   * @param {Object} values - a mapping of units to numbers\n   * @example dur.set({ years: 2017 })\n   * @example dur.set({ hours: 8, minutes: 30 })\n   * @return {Duration}\n   */\n  set(values) {\n    const mixed = Object.assign(this.values, normalizeObject(values, Duration.normalizeUnit));\n    return clone(this, { values: mixed });\n  }\n\n  /**\n   * \"Set\" the locale and/or numberingSystem.  Returns a newly-constructed Duration.\n   * @example dur.reconfigure({ locale: 'en-GB' })\n   * @return {Duration}\n   */\n  reconfigure({ locale, numberingSystem, conversionAccuracy } = {}) {\n    const loc = this.loc.clone({ locale, numberingSystem }),\n      opts = { loc };\n\n    if (conversionAccuracy) {\n      opts.conversionAccuracy = conversionAccuracy;\n    }\n\n    return clone(this, opts);\n  }\n\n  /**\n   * Return the length of the duration in the specified unit.\n   * @param {string} unit - a unit such as 'minutes' or 'days'\n   * @example Duration.fromObject({years: 1}).as('days') //=> 365\n   * @example Duration.fromObject({years: 1}).as('months') //=> 12\n   * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5\n   * @return {number}\n   */\n  as(unit) {\n    return this.isValid ? this.shiftTo(unit).get(unit) : NaN;\n  }\n\n  /**\n   * Reduce this Duration to its canonical representation in its current units.\n   * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }\n   * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }\n   * @return {Duration}\n   */\n  normalize() {\n    if (!this.isValid) return this;\n    const vals = this.toObject();\n    normalizeValues(this.matrix, vals);\n    return Duration.fromObject(vals);\n  }\n\n  /**\n   * Convert this Duration into its representation in a different set of units.\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }\n   * @return {Duration}\n   */\n  shiftTo(...units) {\n    if (!this.isValid) return this;\n\n    if (units.length === 0) {\n      return this;\n    }\n\n    units = units.map(u => Duration.normalizeUnit(u));\n\n    const built = {},\n      accumulated = {},\n      vals = this.toObject();\n    let lastUnit;\n\n    normalizeValues(this.matrix, vals);\n\n    for (const k of orderedUnits) {\n      if (units.indexOf(k) >= 0) {\n        lastUnit = k;\n\n        let own = 0;\n\n        // anything we haven't boiled down yet should get boiled to this unit\n        for (const ak in accumulated) {\n          if (accumulated.hasOwnProperty(ak)) {\n            own += this.matrix[ak][k] * accumulated[ak];\n            accumulated[ak] = 0;\n          }\n        }\n\n        // plus anything that's already in this unit\n        if (isNumber(vals[k])) {\n          own += vals[k];\n        }\n\n        const i = Math.trunc(own);\n        built[k] = i;\n        accumulated[k] = own - i; // we'd like to absorb these fractions in another unit\n\n        // plus anything further down the chain that should be rolled up in to this\n        for (const down in vals) {\n          if (orderedUnits.indexOf(down) > orderedUnits.indexOf(k)) {\n            convert(this.matrix, vals, down, built, k);\n          }\n        }\n        // otherwise, keep it in the wings to boil it later\n      } else if (isNumber(vals[k])) {\n        accumulated[k] = vals[k];\n      }\n    }\n\n    // anything leftover becomes the decimal for the last unit\n    if (lastUnit) {\n      for (const key in accumulated) {\n        if (accumulated.hasOwnProperty(key)) {\n          if (accumulated[key] !== 0) {\n            built[lastUnit] +=\n              key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];\n          }\n        }\n      }\n    }\n\n    return clone(this, { values: built }, true);\n  }\n\n  /**\n   * Return the negative of this Duration.\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }\n   * @return {Duration}\n   */\n  negate() {\n    if (!this.isValid) return this;\n    const negated = {};\n    for (const k of Object.keys(this.values)) {\n      negated[k] = -this.values[k];\n    }\n    return clone(this, { values: negated }, true);\n  }\n\n  /**\n   * Get the years.\n   * @type {number}\n   */\n  get years() {\n    return this.isValid ? this.values.years || 0 : NaN;\n  }\n\n  /**\n   * Get the quarters.\n   * @type {number}\n   */\n  get quarters() {\n    return this.isValid ? this.values.quarters || 0 : NaN;\n  }\n\n  /**\n   * Get the months.\n   * @type {number}\n   */\n  get months() {\n    return this.isValid ? this.values.months || 0 : NaN;\n  }\n\n  /**\n   * Get the weeks\n   * @type {number}\n   */\n  get weeks() {\n    return this.isValid ? this.values.weeks || 0 : NaN;\n  }\n\n  /**\n   * Get the days.\n   * @type {number}\n   */\n  get days() {\n    return this.isValid ? this.values.days || 0 : NaN;\n  }\n\n  /**\n   * Get the hours.\n   * @type {number}\n   */\n  get hours() {\n    return this.isValid ? this.values.hours || 0 : NaN;\n  }\n\n  /**\n   * Get the minutes.\n   * @type {number}\n   */\n  get minutes() {\n    return this.isValid ? this.values.minutes || 0 : NaN;\n  }\n\n  /**\n   * Get the seconds.\n   * @return {number}\n   */\n  get seconds() {\n    return this.isValid ? this.values.seconds || 0 : NaN;\n  }\n\n  /**\n   * Get the milliseconds.\n   * @return {number}\n   */\n  get milliseconds() {\n    return this.isValid ? this.values.milliseconds || 0 : NaN;\n  }\n\n  /**\n   * Returns whether the Duration is invalid. Invalid durations are returned by diff operations\n   * on invalid DateTimes or Intervals.\n   * @return {boolean}\n   */\n  get isValid() {\n    return this.invalid === null;\n  }\n\n  /**\n   * Returns an error code if this Duration became invalid, or null if the Duration is valid\n   * @return {string}\n   */\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n\n  /**\n   * Returns an explanation of why this Duration became invalid, or null if the Duration is valid\n   * @type {string}\n   */\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n\n  /**\n   * Equality check\n   * Two Durations are equal iff they have the same units and the same values for each unit.\n   * @param {Duration} other\n   * @return {boolean}\n   */\n  equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n\n    if (!this.loc.equals(other.loc)) {\n      return false;\n    }\n\n    for (const u of orderedUnits) {\n      if (this.values[u] !== other.values[u]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n/**\n * @private\n */\nexport function friendlyDuration(durationish) {\n  if (isNumber(durationish)) {\n    return Duration.fromMillis(durationish);\n  } else if (Duration.isDuration(durationish)) {\n    return durationish;\n  } else if (typeof durationish === \"object\") {\n    return Duration.fromObject(durationish);\n  } else {\n    throw new InvalidArgumentError(\n      `Unknown duration argument ${durationish} of type ${typeof durationish}`\n    );\n  }\n}\n","import DateTime, { friendlyDateTime } from \"./datetime\";\nimport Duration, { friendlyDuration } from \"./duration\";\nimport Settings from \"./settings\";\nimport { InvalidArgumentError, InvalidIntervalError } from \"./errors\";\nimport Invalid from \"./impl/invalid\";\n\nconst INVALID = \"Invalid Interval\";\n\n// checks if the start is equal to or before the end\nfunction validateStartEnd(start, end) {\n  if (!start || !start.isValid) {\n    return new Invalid(\"missing or invalid start\");\n  } else if (!end || !end.isValid) {\n    return new Invalid(\"missing or invalid end\");\n  } else if (end < start) {\n    return new Invalid(\n      \"end before start\",\n      `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`\n    );\n  } else {\n    return null;\n  }\n}\n\n/**\n * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.\n *\n * Here is a brief overview of the most commonly used methods and getters in Interval:\n *\n * * **Creation** To create an Interval, use {@link fromDateTimes}, {@link after}, {@link before}, or {@link fromISO}.\n * * **Accessors** Use {@link start} and {@link end} to get the start and end.\n * * **Interrogation** To analyze the Interval, use {@link count}, {@link length}, {@link hasSame}, {@link contains}, {@link isAfter}, or {@link isBefore}.\n * * **Transformation** To create other Intervals out of this one, use {@link set}, {@link splitAt}, {@link splitBy}, {@link divideEqually}, {@link merge}, {@link xor}, {@link union}, {@link intersection}, or {@link difference}.\n * * **Comparison** To compare this Interval to another one, use {@link equals}, {@link overlaps}, {@link abutsStart}, {@link abutsEnd}, {@link engulfs}\n * * **Output*** To convert the Interval into other representations, see {@link toString}, {@link toISO}, {@link toFormat}, and {@link toDuration}.\n */\nexport default class Interval {\n  /**\n   * @private\n   */\n  constructor(config) {\n    /**\n     * @access private\n     */\n    this.s = config.start;\n    /**\n     * @access private\n     */\n    this.e = config.end;\n    /**\n     * @access private\n     */\n    this.invalid = config.invalid || null;\n    /**\n     * @access private\n     */\n    this.isLuxonInterval = true;\n  }\n\n  /**\n   * Create an invalid Interval.\n   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {Interval}\n   */\n  static invalid(reason, explanation = null) {\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the Interval is invalid\");\n    }\n\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (Settings.throwOnInvalid) {\n      throw new InvalidIntervalError(invalid);\n    } else {\n      return new Interval({ invalid });\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.\n   * @param {DateTime|Date|Object} start\n   * @param {DateTime|Date|Object} end\n   * @return {Interval}\n   */\n  static fromDateTimes(start, end) {\n    const builtStart = friendlyDateTime(start),\n      builtEnd = friendlyDateTime(end);\n\n    return new Interval({\n      start: builtStart,\n      end: builtEnd,\n      invalid: validateStartEnd(builtStart, builtEnd)\n    });\n  }\n\n  /**\n   * Create an Interval from a start DateTime and a Duration to extend to.\n   * @param {DateTime|Date|Object} start\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static after(start, duration) {\n    const dur = friendlyDuration(duration),\n      dt = friendlyDateTime(start);\n    return Interval.fromDateTimes(dt, dt.plus(dur));\n  }\n\n  /**\n   * Create an Interval from an end DateTime and a Duration to extend backwards to.\n   * @param {DateTime|Date|Object} end\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static before(end, duration) {\n    const dur = friendlyDuration(duration),\n      dt = friendlyDateTime(end);\n    return Interval.fromDateTimes(dt.minus(dur), dt);\n  }\n\n  /**\n   * Create an Interval from an ISO 8601 string.\n   * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.\n   * @param {string} text - the ISO string to parse\n   * @param {Object} [opts] - options to pass {@link DateTime.fromISO} and optionally {@link Duration.fromISO}\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {Interval}\n   */\n  static fromISO(text, opts) {\n    const [s, e] = (text || \"\").split(\"/\", 2);\n    if (s && e) {\n      const start = DateTime.fromISO(s, opts),\n        end = DateTime.fromISO(e, opts);\n\n      if (start.isValid && end.isValid) {\n        return Interval.fromDateTimes(start, end);\n      }\n\n      if (start.isValid) {\n        const dur = Duration.fromISO(e, opts);\n        if (dur.isValid) {\n          return Interval.after(start, dur);\n        }\n      } else if (end.isValid) {\n        const dur = Duration.fromISO(s, opts);\n        if (dur.isValid) {\n          return Interval.before(end, dur);\n        }\n      }\n    }\n    return Interval.invalid(\"unparsable\", `the input \"${text}\" can't be parsed asISO 8601`);\n  }\n\n  /**\n   * Check if an object is an Interval. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n  static isInterval(o) {\n    return o instanceof Interval || o.isLuxonInterval;\n  }\n\n  /**\n   * Returns the start of the Interval\n   * @type {DateTime}\n   */\n  get start() {\n    return this.isValid ? this.s : null;\n  }\n\n  /**\n   * Returns the end of the Interval\n   * @type {DateTime}\n   */\n  get end() {\n    return this.isValid ? this.e : null;\n  }\n\n  /**\n   * Returns whether this Interval's end is at least its start, i.e. that the Interval isn't 'backwards'.\n   * @type {boolean}\n   */\n  get isValid() {\n    return this.invalidReason === null;\n  }\n\n  /**\n   * Returns an error code if this Interval is invalid, or null if the Interval is valid\n   * @type {string}\n   */\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n\n  /**\n   * Returns an explanation of why this Interval became invalid, or null if the Interval is valid\n   * @type {string}\n   */\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n\n  /**\n   * Returns the length of the Interval in the specified unit.\n   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.\n   * @return {number}\n   */\n  length(unit = \"milliseconds\") {\n    return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;\n  }\n\n  /**\n   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.\n   * Unlike {@link length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'\n   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'\n   * @param {string} [unit='milliseconds'] - the unit of time to count.\n   * @return {number}\n   */\n  count(unit = \"milliseconds\") {\n    if (!this.isValid) return NaN;\n    const start = this.start.startOf(unit),\n      end = this.end.startOf(unit);\n    return Math.floor(end.diff(start, unit).get(unit)) + 1;\n  }\n\n  /**\n   * Returns whether this Interval's start and end are both in the same unit of time\n   * @param {string} unit - the unit of time to check sameness on\n   * @return {boolean}\n   */\n  hasSame(unit) {\n    return this.isValid ? this.e.minus(1).hasSame(this.s, unit) : false;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end DateTimes.\n   * @return {boolean}\n   */\n  isEmpty() {\n    return this.s.valueOf() === this.e.valueOf();\n  }\n\n  /**\n   * Return whether this Interval's start is after the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isAfter(dateTime) {\n    if (!this.isValid) return false;\n    return this.s > dateTime;\n  }\n\n  /**\n   * Return whether this Interval's end is before the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isBefore(dateTime) {\n    if (!this.isValid) return false;\n    return this.e <= dateTime;\n  }\n\n  /**\n   * Return whether this Interval contains the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  contains(dateTime) {\n    if (!this.isValid) return false;\n    return this.s <= dateTime && this.e > dateTime;\n  }\n\n  /**\n   * \"Sets\" the start and/or end dates. Returns a newly-constructed Interval.\n   * @param {Object} values - the values to set\n   * @param {DateTime} values.start - the starting DateTime\n   * @param {DateTime} values.end - the ending DateTime\n   * @return {Interval}\n   */\n  set({ start, end } = {}) {\n    if (!this.isValid) return this;\n    return Interval.fromDateTimes(start || this.s, end || this.e);\n  }\n\n  /**\n   * Split this Interval at each of the specified DateTimes\n   * @param {...[DateTime]} dateTimes - the unit of time to count.\n   * @return {[Interval]}\n   */\n  splitAt(...dateTimes) {\n    if (!this.isValid) return [];\n    const sorted = dateTimes.map(friendlyDateTime).sort(),\n      results = [];\n    let { s } = this,\n      i = 0;\n\n    while (s < this.e) {\n      const added = sorted[i] || this.e,\n        next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      i += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into smaller Intervals, each of the specified length.\n   * Left over time is grouped into a smaller interval\n   * @param {Duration|Object|number} duration - The length of each resulting interval.\n   * @return {[Interval]}\n   */\n  splitBy(duration) {\n    const dur = friendlyDuration(duration);\n\n    if (!this.isValid || !dur.isValid || dur.as(\"milliseconds\") === 0) {\n      return [];\n    }\n\n    let { s } = this,\n      added,\n      next;\n\n    const results = [];\n    while (s < this.e) {\n      added = s.plus(dur);\n      next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into the specified number of smaller intervals.\n   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.\n   * @return {[Interval]}\n   */\n  divideEqually(numberOfParts) {\n    if (!this.isValid) return [];\n    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);\n  }\n\n  /**\n   * Return whether this Interval overlaps with the specified Interval\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  overlaps(other) {\n    return this.e > other.s && this.s < other.e;\n  }\n\n  /**\n   * Return whether this Interval's end is adjacent to the specified Interval's start.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsStart(other) {\n    if (!this.isValid) return false;\n    return +this.e === +other.s;\n  }\n\n  /**\n   * Return whether this Interval's start is adjacent to the specified Interval's end.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsEnd(other) {\n    if (!this.isValid) return false;\n    return +other.e === +this.s;\n  }\n\n  /**\n   * Return whether this Interval engulfs the start and end of the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  engulfs(other) {\n    if (!this.isValid) return false;\n    return this.s <= other.s && this.e >= other.e;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end as the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n\n    return this.s.equals(other.s) && this.e.equals(other.e);\n  }\n\n  /**\n   * Return an Interval representing the intersection of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.\n   * Returns null if the intersection is empty, i.e., the intervals don't intersect.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  intersection(other) {\n    if (!this.isValid) return this;\n    const s = this.s > other.s ? this.s : other.s,\n      e = this.e < other.e ? this.e : other.e;\n\n    if (s > e) {\n      return null;\n    } else {\n      return Interval.fromDateTimes(s, e);\n    }\n  }\n\n  /**\n   * Return an Interval representing the union of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  union(other) {\n    if (!this.isValid) return this;\n    const s = this.s < other.s ? this.s : other.s,\n      e = this.e > other.e ? this.e : other.e;\n    return Interval.fromDateTimes(s, e);\n  }\n\n  /**\n   * Merge an array of Intervals into a equivalent minimal set of Intervals.\n   * Combines overlapping and adjacent Intervals.\n   * @param {[Interval]} intervals\n   * @return {[Interval]}\n   */\n  static merge(intervals) {\n    const [found, final] = intervals.sort((a, b) => a.s - b.s).reduce(\n      ([sofar, current], item) => {\n        if (!current) {\n          return [sofar, item];\n        } else if (current.overlaps(item) || current.abutsStart(item)) {\n          return [sofar, current.union(item)];\n        } else {\n          return [sofar.concat([current]), item];\n        }\n      },\n      [[], null]\n    );\n    if (final) {\n      found.push(final);\n    }\n    return found;\n  }\n\n  /**\n   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.\n   * @param {[Interval]} intervals\n   * @return {[Interval]}\n   */\n  static xor(intervals) {\n    let start = null,\n      currentCount = 0;\n    const results = [],\n      ends = intervals.map(i => [{ time: i.s, type: \"s\" }, { time: i.e, type: \"e\" }]),\n      flattened = Array.prototype.concat(...ends),\n      arr = flattened.sort((a, b) => a.time - b.time);\n\n    for (const i of arr) {\n      currentCount += i.type === \"s\" ? 1 : -1;\n\n      if (currentCount === 1) {\n        start = i.time;\n      } else {\n        if (start && +start !== +i.time) {\n          results.push(Interval.fromDateTimes(start, i.time));\n        }\n\n        start = null;\n      }\n    }\n\n    return Interval.merge(results);\n  }\n\n  /**\n   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.\n   * @param {...Interval} intervals\n   * @return {[Interval]}\n   */\n  difference(...intervals) {\n    return Interval.xor([this].concat(intervals))\n      .map(i => this.intersection(i))\n      .filter(i => i && !i.isEmpty());\n  }\n\n  /**\n   * Returns a string representation of this Interval appropriate for debugging.\n   * @return {string}\n   */\n  toString() {\n    if (!this.isValid) return INVALID;\n    return `[${this.s.toISO()} – ${this.e.toISO()})`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Interval.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime.toISO}\n   * @return {string}\n   */\n  toISO(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;\n  }\n\n  /**\n   * Returns a string representation of this Interval formatted according to the specified format string.\n   * @param {string} dateFormat - the format string. This string formats the start and end time. See {@link DateTime.toFormat} for details.\n   * @param {Object} opts - options\n   * @param {string} [opts.separator =  ' – '] - a separator to place between the start and end representations\n   * @return {string}\n   */\n  toFormat(dateFormat, { separator = \" – \" } = {}) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;\n  }\n\n  /**\n   * Return a Duration representing the time spanned by this interval.\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }\n   * @return {Duration}\n   */\n  toDuration(unit, opts) {\n    if (!this.isValid) {\n      return Duration.invalid(this.invalidReason);\n    }\n    return this.e.diff(this.s, unit, opts);\n  }\n}\n","import DateTime from \"./datetime\";\nimport Settings from \"./settings\";\nimport Locale from \"./impl/locale\";\nimport IANAZone from \"./zones/IANAZone\";\n\nimport { hasFormatToParts, hasIntl } from \"./impl/util\";\n\n/**\n * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.\n */\nexport default class Info {\n  /**\n   * Return whether the specified zone contains a DST.\n   * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.\n   * @return {boolean}\n   */\n  static hasDST(zone = Settings.defaultZone) {\n    const proto = DateTime.local()\n      .setZone(zone)\n      .set({ month: 12 });\n\n    return !zone.universal && proto.offset !== proto.set({ month: 6 }).offset;\n  }\n\n  /**\n   * Return whether the specified zone is a valid IANA specifier.\n   * @param {string} zone - Zone to check\n   * @return {boolean}\n   */\n  static isValidIANAZone(zone) {\n    return !!IANAZone.isValidSpecifier(zone) && IANAZone.isValidZone(zone);\n  }\n\n  /**\n   * Return an array of standalone month names.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @example Info.months()[0] //=> 'January'\n   * @example Info.months('short')[0] //=> 'Jan'\n   * @example Info.months('numeric')[0] //=> '1'\n   * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'\n   * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'\n   * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'\n   * @return {[string]}\n   */\n  static months(\n    length = \"long\",\n    { locale = null, numberingSystem = null, outputCalendar = \"gregory\" } = {}\n  ) {\n    return Locale.create(locale, numberingSystem, outputCalendar).months(length);\n  }\n\n  /**\n   * Return an array of format month names.\n   * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that\n   * changes the string.\n   * See {@link months}\n   * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @return {[string]}\n   */\n  static monthsFormat(\n    length = \"long\",\n    { locale = null, numberingSystem = null, outputCalendar = \"gregory\" } = {}\n  ) {\n    return Locale.create(locale, numberingSystem, outputCalendar).months(length, true);\n  }\n\n  /**\n   * Return an array of standalone week names.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {string} [length='long'] - the length of the month representation, such as \"narrow\", \"short\", \"long\".\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @example Info.weekdays()[0] //=> 'Monday'\n   * @example Info.weekdays('short')[0] //=> 'Mon'\n   * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'\n   * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'\n   * @return {[string]}\n   */\n  static weekdays(length = \"long\", { locale = null, numberingSystem = null } = {}) {\n    return Locale.create(locale, numberingSystem, null).weekdays(length);\n  }\n\n  /**\n   * Return an array of format week names.\n   * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that\n   * changes the string.\n   * See {@link weekdays}\n   * @param {string} [length='long'] - the length of the month representation, such as \"narrow\", \"short\", \"long\".\n   * @param {Object} opts - options\n   * @param {string} [opts.locale=null] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @return {[string]}\n   */\n  static weekdaysFormat(length = \"long\", { locale = null, numberingSystem = null } = {}) {\n    return Locale.create(locale, numberingSystem, null).weekdays(length, true);\n  }\n\n  /**\n   * Return an array of meridiems.\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @example Info.meridiems() //=> [ 'AM', 'PM' ]\n   * @example Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]\n   * @return {[string]}\n   */\n  static meridiems({ locale = null } = {}) {\n    return Locale.create(locale).meridiems();\n  }\n\n  /**\n   * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.\n   * @param {string} [length='short'] - the length of the era representation, such as \"short\" or \"long\".\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @example Info.eras() //=> [ 'BC', 'AD' ]\n   * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]\n   * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]\n   * @return {[string]}\n   */\n  static eras(length = \"short\", { locale = null } = {}) {\n    return Locale.create(locale, null, \"gregory\").eras(length);\n  }\n\n  /**\n   * Return the set of available features in this environment.\n   * Some features of Luxon are not available in all environments. For example, on older browsers, timezone support is not available. Use this function to figure out if that's the case.\n   * Keys:\n   * * `zones`: whether this environment supports IANA timezones\n   * * `intlTokens`: whether this environment supports internationalized token-based formatting/parsing\n   * * `intl`: whether this environment supports general internationalization\n   * @example Info.features() //=> { intl: true, intlTokens: false, zones: true }\n   * @return {Object}\n   */\n  static features() {\n    let intl = false,\n      intlTokens = false,\n      zones = false;\n\n    if (hasIntl()) {\n      intl = true;\n      intlTokens = hasFormatToParts();\n\n      try {\n        zones =\n          new Intl.DateTimeFormat(\"en\", { timeZone: \"America/New_York\" }).resolvedOptions()\n            .timeZone === \"America/New_York\";\n      } catch (e) {\n        zones = false;\n      }\n    }\n\n    return { intl, intlTokens, zones };\n  }\n}\n","import Duration from \"../duration\";\n\nfunction dayDiff(earlier, later) {\n  const utcDayStart = dt =>\n      dt\n        .toUTC(0, { keepLocalTime: true })\n        .startOf(\"day\")\n        .valueOf(),\n    ms = utcDayStart(later) - utcDayStart(earlier);\n  return Math.floor(Duration.fromMillis(ms).as(\"days\"));\n}\n\nfunction highOrderDiffs(cursor, later, units) {\n  const differs = [\n    [\"years\", (a, b) => b.year - a.year],\n    [\"months\", (a, b) => b.month - a.month + (b.year - a.year) * 12],\n    [\n      \"weeks\",\n      (a, b) => {\n        const days = dayDiff(a, b);\n        return (days - (days % 7)) / 7;\n      }\n    ],\n    [\"days\", dayDiff]\n  ];\n\n  const results = {};\n  let lowestOrder, highWater;\n\n  for (const [unit, differ] of differs) {\n    if (units.indexOf(unit) >= 0) {\n      lowestOrder = unit;\n\n      let delta = differ(cursor, later);\n\n      highWater = cursor.plus({ [unit]: delta });\n\n      if (highWater > later) {\n        cursor = highWater.minus({ [unit]: 1 });\n        delta -= 1;\n      } else {\n        cursor = highWater;\n      }\n\n      results[unit] = delta;\n    }\n  }\n\n  return [cursor, results, highWater, lowestOrder];\n}\n\nexport default function(earlier, later, units, opts) {\n  let [cursor, results, highWater, lowestOrder] = highOrderDiffs(earlier, later, units);\n\n  const remainingMillis = later - cursor;\n\n  const lowerOrderUnits = units.filter(\n    u => [\"hours\", \"minutes\", \"seconds\", \"milliseconds\"].indexOf(u) >= 0\n  );\n\n  if (lowerOrderUnits.length === 0) {\n    if (highWater < later) {\n      highWater = cursor.plus({ [lowestOrder]: 1 });\n    }\n\n    if (highWater !== cursor) {\n      results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (highWater - cursor);\n    }\n  }\n\n  const duration = Duration.fromObject(Object.assign(results, opts));\n\n  if (lowerOrderUnits.length > 0) {\n    return Duration.fromMillis(remainingMillis, opts)\n      .shiftTo(...lowerOrderUnits)\n      .plus(duration);\n  } else {\n    return duration;\n  }\n}\n","import { parseMillis, isUndefined, untruncateYear, signedOffset } from \"./util\";\nimport Formatter from \"./formatter\";\nimport FixedOffsetZone from \"../zones/fixedOffsetZone\";\nimport IANAZone from \"../zones/IANAZone\";\n\nconst MISSING_FTP = \"missing Intl.DateTimeFormat.formatToParts support\";\n\nfunction intUnit(regex, post = i => i) {\n  return { regex, deser: ([s]) => post(parseInt(s)) };\n}\n\nfunction fixListRegex(s) {\n  // make dots optional and also make them literal\n  return s.replace(/\\./, \"\\\\.?\");\n}\n\nfunction stripInsensitivities(s) {\n  return s.replace(/\\./, \"\").toLowerCase();\n}\n\nfunction oneOf(strings, startIndex) {\n  if (strings === null) {\n    return null;\n  } else {\n    return {\n      regex: RegExp(strings.map(fixListRegex).join(\"|\")),\n      deser: ([s]) =>\n        strings.findIndex(i => stripInsensitivities(s) === stripInsensitivities(i)) + startIndex\n    };\n  }\n}\n\nfunction offset(regex, groups) {\n  return { regex, deser: ([, h, m]) => signedOffset(h, m), groups };\n}\n\nfunction simple(regex) {\n  return { regex, deser: ([s]) => s };\n}\n\nfunction unitForToken(token, loc) {\n  const one = /\\d/,\n    two = /\\d{2}/,\n    three = /\\d{3}/,\n    four = /\\d{4}/,\n    oneOrTwo = /\\d{1,2}/,\n    oneToThree = /\\d{1,3}/,\n    twoToFour = /\\d{2,4}/,\n    literal = t => ({ regex: RegExp(t.val), deser: ([s]) => s, literal: true }),\n    unitate = t => {\n      if (token.literal) {\n        return literal(t);\n      }\n      switch (t.val) {\n        // era\n        case \"G\":\n          return oneOf(loc.eras(\"short\", false), 0);\n        case \"GG\":\n          return oneOf(loc.eras(\"long\", false), 0);\n        // years\n        case \"y\":\n          return intUnit(/\\d{1,6}/);\n        case \"yy\":\n          return intUnit(twoToFour, untruncateYear);\n        case \"yyyy\":\n          return intUnit(four);\n        case \"yyyyy\":\n          return intUnit(/\\d{4,6}/);\n        case \"yyyyyy\":\n          return intUnit(/\\d{6}/);\n        // months\n        case \"M\":\n          return intUnit(oneOrTwo);\n        case \"MM\":\n          return intUnit(two);\n        case \"MMM\":\n          return oneOf(loc.months(\"short\", false, false), 1);\n        case \"MMMM\":\n          return oneOf(loc.months(\"long\", false, false), 1);\n        case \"L\":\n          return intUnit(oneOrTwo);\n        case \"LL\":\n          return intUnit(two);\n        case \"LLL\":\n          return oneOf(loc.months(\"short\", true, false), 1);\n        case \"LLLL\":\n          return oneOf(loc.months(\"long\", true, false), 1);\n        // dates\n        case \"d\":\n          return intUnit(oneOrTwo);\n        case \"dd\":\n          return intUnit(two);\n        // ordinals\n        case \"o\":\n          return intUnit(oneToThree);\n        case \"ooo\":\n          return intUnit(three);\n        // time\n        case \"HH\":\n          return intUnit(two);\n        case \"H\":\n          return intUnit(oneOrTwo);\n        case \"hh\":\n          return intUnit(two);\n        case \"h\":\n          return intUnit(oneOrTwo);\n        case \"mm\":\n          return intUnit(two);\n        case \"m\":\n          return intUnit(oneOrTwo);\n        case \"s\":\n          return intUnit(oneOrTwo);\n        case \"ss\":\n          return intUnit(two);\n        case \"S\":\n          return intUnit(oneToThree);\n        case \"SSS\":\n          return intUnit(three);\n        case \"u\":\n          return simple(/\\d{1,9}/);\n        // meridiem\n        case \"a\":\n          return oneOf(loc.meridiems(), 0);\n        // weekYear (k)\n        case \"kkkk\":\n          return intUnit(four);\n        case \"kk\":\n          return intUnit(twoToFour, untruncateYear);\n        // weekNumber (W)\n        case \"W\":\n          return intUnit(oneOrTwo);\n        case \"WW\":\n          return intUnit(two);\n        // weekdays\n        case \"E\":\n        case \"c\":\n          return intUnit(one);\n        case \"EEE\":\n          return oneOf(loc.weekdays(\"short\", false, false), 1);\n        case \"EEEE\":\n          return oneOf(loc.weekdays(\"long\", false, false), 1);\n        case \"ccc\":\n          return oneOf(loc.weekdays(\"short\", true, false), 1);\n        case \"cccc\":\n          return oneOf(loc.weekdays(\"long\", true, false), 1);\n        // offset/zone\n        case \"Z\":\n        case \"ZZ\":\n          return offset(/([+-]\\d{1,2})(?::(\\d{2}))?/, 2);\n        case \"ZZZ\":\n          return offset(/([+-]\\d{1,2})(\\d{2})?/, 2);\n        // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing\n        // because we don't have any way to figure out what they are\n        case \"z\":\n          return simple(/[a-z_+-]{1,256}(\\/[a-z_+-]{1,256}(\\/[a-z_+-]{1,256})?)?/i);\n        default:\n          return literal(t);\n      }\n    };\n\n  const unit = unitate(token) || {\n    invalidReason: MISSING_FTP\n  };\n\n  unit.token = token;\n\n  return unit;\n}\n\nfunction buildRegex(units) {\n  const re = units.map(u => u.regex).reduce((f, r) => `${f}(${r.source})`, \"\");\n  return [`^${re}$`, units];\n}\n\nfunction match(input, regex, handlers) {\n  const matches = input.match(regex);\n\n  if (matches) {\n    const all = {};\n    let matchIndex = 1;\n    for (const i in handlers) {\n      if (handlers.hasOwnProperty(i)) {\n        const h = handlers[i],\n          groups = h.groups ? h.groups + 1 : 1;\n        if (!h.literal && h.token) {\n          all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));\n        }\n        matchIndex += groups;\n      }\n    }\n    return [matches, all];\n  } else {\n    return [matches, {}];\n  }\n}\n\nfunction dateTimeFromMatches(matches) {\n  const toField = token => {\n    switch (token) {\n      case \"S\":\n        return \"millisecond\";\n      case \"s\":\n        return \"second\";\n      case \"m\":\n        return \"minute\";\n      case \"h\":\n      case \"H\":\n        return \"hour\";\n      case \"d\":\n        return \"day\";\n      case \"o\":\n        return \"ordinal\";\n      case \"L\":\n      case \"M\":\n        return \"month\";\n      case \"y\":\n        return \"year\";\n      case \"E\":\n      case \"c\":\n        return \"weekday\";\n      case \"W\":\n        return \"weekNumber\";\n      case \"k\":\n        return \"weekYear\";\n      default:\n        return null;\n    }\n  };\n\n  let zone;\n  if (!isUndefined(matches.Z)) {\n    zone = new FixedOffsetZone(matches.Z);\n  } else if (!isUndefined(matches.z)) {\n    zone = new IANAZone(matches.z);\n  } else {\n    zone = null;\n  }\n\n  if (!isUndefined(matches.h)) {\n    if (matches.h < 12 && matches.a === 1) {\n      matches.h += 12;\n    } else if (matches.h === 12 && matches.a === 0) {\n      matches.h = 0;\n    }\n  }\n\n  if (matches.G === 0 && matches.y) {\n    matches.y = -matches.y;\n  }\n\n  if (!isUndefined(matches.u)) {\n    matches.S = parseMillis(matches.u);\n  }\n\n  const vals = Object.keys(matches).reduce((r, k) => {\n    const f = toField(k);\n    if (f) {\n      r[f] = matches[k];\n    }\n\n    return r;\n  }, {});\n\n  return [vals, zone];\n}\n\n/**\n * @private\n */\n\nexport function explainFromTokens(locale, input, format) {\n  const tokens = Formatter.parseFormat(format),\n    units = tokens.map(t => unitForToken(t, locale)),\n    disqualifyingUnit = units.find(t => t.invalidReason);\n\n  if (disqualifyingUnit) {\n    return { input, tokens, invalidReason: disqualifyingUnit.invalidReason };\n  } else {\n    const [regexString, handlers] = buildRegex(units),\n      regex = RegExp(regexString, \"i\"),\n      [rawMatches, matches] = match(input, regex, handlers),\n      [result, zone] = matches ? dateTimeFromMatches(matches) : [null, null];\n\n    return { input, tokens, regex, rawMatches, matches, result, zone };\n  }\n}\n\nexport function parseFromTokens(locale, input, format) {\n  const { result, zone, invalidReason } = explainFromTokens(locale, input, format);\n  return [result, zone, invalidReason];\n}\n","import {\n  numberBetween,\n  isLeapYear,\n  timeObject,\n  daysInYear,\n  daysInMonth,\n  weeksInWeekYear,\n  isNumber\n} from \"./util\";\nimport Invalid from \"./invalid\";\n\nconst nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],\n  leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];\n\nfunction unitOutOfRange(unit, value) {\n  return new Invalid(\n    \"unit out of range\",\n    `you specified ${value} (of type ${typeof value}) as a ${unit}, which is invalid`\n  );\n}\n\nfunction dayOfWeek(year, month, day) {\n  const js = new Date(Date.UTC(year, month - 1, day)).getUTCDay();\n  return js === 0 ? 7 : js;\n}\n\nfunction computeOrdinal(year, month, day) {\n  return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];\n}\n\nfunction uncomputeOrdinal(year, ordinal) {\n  const table = isLeapYear(year) ? leapLadder : nonLeapLadder,\n    month0 = table.findIndex(i => i < ordinal),\n    day = ordinal - table[month0];\n  return { month: month0 + 1, day };\n}\n\n/**\n * @private\n */\n\nexport function gregorianToWeek(gregObj) {\n  const { year, month, day } = gregObj,\n    ordinal = computeOrdinal(year, month, day),\n    weekday = dayOfWeek(year, month, day);\n\n  let weekNumber = Math.floor((ordinal - weekday + 10) / 7),\n    weekYear;\n\n  if (weekNumber < 1) {\n    weekYear = year - 1;\n    weekNumber = weeksInWeekYear(weekYear);\n  } else if (weekNumber > weeksInWeekYear(year)) {\n    weekYear = year + 1;\n    weekNumber = 1;\n  } else {\n    weekYear = year;\n  }\n\n  return Object.assign({ weekYear, weekNumber, weekday }, timeObject(gregObj));\n}\n\nexport function weekToGregorian(weekData) {\n  const { weekYear, weekNumber, weekday } = weekData,\n    weekdayOfJan4 = dayOfWeek(weekYear, 1, 4),\n    yearInDays = daysInYear(weekYear);\n\n  let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 3,\n    year;\n\n  if (ordinal < 1) {\n    year = weekYear - 1;\n    ordinal += daysInYear(year);\n  } else if (ordinal > yearInDays) {\n    year = weekYear + 1;\n    ordinal -= daysInYear(weekYear);\n  } else {\n    year = weekYear;\n  }\n\n  const { month, day } = uncomputeOrdinal(year, ordinal);\n\n  return Object.assign({ year, month, day }, timeObject(weekData));\n}\n\nexport function gregorianToOrdinal(gregData) {\n  const { year, month, day } = gregData,\n    ordinal = computeOrdinal(year, month, day);\n\n  return Object.assign({ year, ordinal }, timeObject(gregData));\n}\n\nexport function ordinalToGregorian(ordinalData) {\n  const { year, ordinal } = ordinalData,\n    { month, day } = uncomputeOrdinal(year, ordinal);\n\n  return Object.assign({ year, month, day }, timeObject(ordinalData));\n}\n\nexport function hasInvalidWeekData(obj) {\n  const validYear = isNumber(obj.weekYear),\n    validWeek = numberBetween(obj.weekNumber, 1, weeksInWeekYear(obj.weekYear)),\n    validWeekday = numberBetween(obj.weekday, 1, 7);\n\n  if (!validYear) {\n    return unitOutOfRange(\"weekYear\", obj.weekYear);\n  } else if (!validWeek) {\n    return unitOutOfRange(\"week\", obj.week);\n  } else if (!validWeekday) {\n    return unitOutOfRange(\"weekday\", obj.weekday);\n  } else return false;\n}\n\nexport function hasInvalidOrdinalData(obj) {\n  const validYear = isNumber(obj.year),\n    validOrdinal = numberBetween(obj.ordinal, 1, daysInYear(obj.year));\n\n  if (!validYear) {\n    return unitOutOfRange(\"year\", obj.year);\n  } else if (!validOrdinal) {\n    return unitOutOfRange(\"ordinal\", obj.ordinal);\n  } else return false;\n}\n\nexport function hasInvalidGregorianData(obj) {\n  const validYear = isNumber(obj.year),\n    validMonth = numberBetween(obj.month, 1, 12),\n    validDay = numberBetween(obj.day, 1, daysInMonth(obj.year, obj.month));\n\n  if (!validYear) {\n    return unitOutOfRange(\"year\", obj.year);\n  } else if (!validMonth) {\n    return unitOutOfRange(\"month\", obj.month);\n  } else if (!validDay) {\n    return unitOutOfRange(\"day\", obj.day);\n  } else return false;\n}\n\nexport function hasInvalidTimeData(obj) {\n  const validHour = numberBetween(obj.hour, 0, 23),\n    validMinute = numberBetween(obj.minute, 0, 59),\n    validSecond = numberBetween(obj.second, 0, 59),\n    validMillisecond = numberBetween(obj.millisecond, 0, 999);\n\n  if (!validHour) {\n    return unitOutOfRange(\"hour\", obj.hour);\n  } else if (!validMinute) {\n    return unitOutOfRange(\"minute\", obj.minute);\n  } else if (!validSecond) {\n    return unitOutOfRange(\"second\", obj.secon);\n  } else if (!validMillisecond) {\n    return unitOutOfRange(\"millisecond\", obj.millisecond);\n  } else return false;\n}\n","import Duration, { friendlyDuration } from \"./duration\";\nimport Interval from \"./interval\";\nimport Settings from \"./settings\";\nimport Info from \"./info\";\nimport Formatter from \"./impl/formatter\";\nimport FixedOffsetZone from \"./zones/fixedOffsetZone\";\nimport LocalZone from \"./zones/localZone\";\nimport Locale from \"./impl/locale\";\nimport {\n  isUndefined,\n  maybeArray,\n  isDate,\n  isNumber,\n  bestBy,\n  daysInMonth,\n  daysInYear,\n  isLeapYear,\n  weeksInWeekYear,\n  normalizeObject\n} from \"./impl/util\";\nimport { normalizeZone } from \"./impl/zoneUtil\";\nimport diff from \"./impl/diff\";\nimport { parseRFC2822Date, parseISODate, parseHTTPDate, parseSQL } from \"./impl/regexParser\";\nimport { parseFromTokens, explainFromTokens } from \"./impl/tokenParser\";\nimport {\n  gregorianToWeek,\n  weekToGregorian,\n  gregorianToOrdinal,\n  ordinalToGregorian,\n  hasInvalidGregorianData,\n  hasInvalidWeekData,\n  hasInvalidOrdinalData,\n  hasInvalidTimeData\n} from \"./impl/conversions\";\nimport * as Formats from \"./impl/formats\";\nimport {\n  InvalidArgumentError,\n  ConflictingSpecificationError,\n  InvalidUnitError,\n  InvalidDateTimeError\n} from \"./errors\";\nimport Invalid from \"./impl/invalid\";\n\nconst INVALID = \"Invalid DateTime\";\n\nfunction unsupportedZone(zone) {\n  return new Invalid(\"unsupported zone\", `the zone \"${zone.name}\" is not supported`);\n}\n\n// we cache week data on the DT object and this intermediates the cache\nfunction possiblyCachedWeekData(dt) {\n  if (dt.weekData === null) {\n    dt.weekData = gregorianToWeek(dt.c);\n  }\n  return dt.weekData;\n}\n\n// clone really means, \"make a new object with these modifications\". all \"setters\" really use this\n// to create a new object while only changing some of the properties\nfunction clone(inst, alts) {\n  const current = {\n    ts: inst.ts,\n    zone: inst.zone,\n    c: inst.c,\n    o: inst.o,\n    loc: inst.loc,\n    invalid: inst.invalid\n  };\n  return new DateTime(Object.assign({}, current, alts, { old: current }));\n}\n\n// find the right offset a given local time. The o input is our guess, which determines which\n// offset we'll pick in ambiguous cases (e.g. there are two 3 AMs b/c Fallback DST)\nfunction fixOffset(localTS, o, tz) {\n  // Our UTC time is just a guess because our offset is just a guess\n  let utcGuess = localTS - o * 60 * 1000;\n\n  // Test whether the zone matches the offset for this ts\n  const o2 = tz.offset(utcGuess);\n\n  // If so, offset didn't change and we're done\n  if (o === o2) {\n    return [utcGuess, o];\n  }\n\n  // If not, change the ts by the difference in the offset\n  utcGuess -= (o2 - o) * 60 * 1000;\n\n  // If that gives us the local time we want, we're done\n  const o3 = tz.offset(utcGuess);\n  if (o2 === o3) {\n    return [utcGuess, o2];\n  }\n\n  // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time\n  return [localTS - Math.min(o2, o3) * 60 * 1000, Math.max(o2, o3)];\n}\n\n// convert an epoch timestamp into a calendar object with the given offset\nfunction tsToObj(ts, offset) {\n  ts += offset * 60 * 1000;\n\n  const d = new Date(ts);\n\n  return {\n    year: d.getUTCFullYear(),\n    month: d.getUTCMonth() + 1,\n    day: d.getUTCDate(),\n    hour: d.getUTCHours(),\n    minute: d.getUTCMinutes(),\n    second: d.getUTCSeconds(),\n    millisecond: d.getUTCMilliseconds()\n  };\n}\n\n// covert a calendar object to a local timestamp (epoch, but with the offset baked in)\nfunction objToLocalTS(obj) {\n  let d = Date.UTC(\n    obj.year,\n    obj.month - 1,\n    obj.day,\n    obj.hour,\n    obj.minute,\n    obj.second,\n    obj.millisecond\n  );\n\n  // for legacy reasons, years between 0 and 99 are interpreted as 19XX; revert that\n  if (obj.year < 100 && obj.year >= 0) {\n    d = new Date(d);\n    d.setUTCFullYear(obj.year);\n  }\n  return +d;\n}\n\n// convert a calendar object to a epoch timestamp\nfunction objToTS(obj, offset, zone) {\n  return fixOffset(objToLocalTS(obj), offset, zone);\n}\n\n// create a new DT instance by adding a duration, adjusting for DSTs\nfunction adjustTime(inst, dur) {\n  const oPre = inst.o,\n    year = inst.c.year + dur.years,\n    month = inst.c.month + dur.months + dur.quarters * 3,\n    c = Object.assign({}, inst.c, {\n      year,\n      month,\n      day: Math.min(inst.c.day, daysInMonth(year, month)) + dur.days + dur.weeks * 7\n    }),\n    millisToAdd = Duration.fromObject({\n      hours: dur.hours,\n      minutes: dur.minutes,\n      seconds: dur.seconds,\n      milliseconds: dur.milliseconds\n    }).as(\"milliseconds\"),\n    localTS = objToLocalTS(c);\n\n  let [ts, o] = fixOffset(localTS, oPre, inst.zone);\n\n  if (millisToAdd !== 0) {\n    ts += millisToAdd;\n    // that could have changed the offset by going over a DST, but we want to keep the ts the same\n    o = inst.zone.offset(ts);\n  }\n\n  return { ts, o };\n}\n\n// helper useful in turning the results of parsing into real dates\n// by handling the zone options\nfunction parseDataToDateTime(parsed, parsedZone, opts, format, text) {\n  const { setZone, zone } = opts;\n  if (parsed && Object.keys(parsed).length !== 0) {\n    const interpretationZone = parsedZone || zone,\n      inst = DateTime.fromObject(\n        Object.assign(parsed, opts, {\n          zone: interpretationZone\n        })\n      );\n    return setZone ? inst : inst.setZone(zone);\n  } else {\n    return DateTime.invalid(\n      new Invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ${format}`)\n    );\n  }\n}\n\n// if you want to output a technical format (e.g. RFC 2822), this helper\n// helps handle the details\nfunction toTechFormat(dt, format) {\n  return dt.isValid\n    ? Formatter.create(Locale.create(\"en-US\"), {\n        allowZ: true,\n        forceSimple: true\n      }).formatDateTimeFromString(dt, format)\n    : null;\n}\n\n// technical time formats (e.g. the time part of ISO 8601), take some options\n// and this commonizes their handling\nfunction toTechTimeFormat(\n  dt,\n  {\n    suppressSeconds = false,\n    suppressMilliseconds = false,\n    includeOffset = true,\n    includeZone = false,\n    spaceZone = false\n  }\n) {\n  let fmt = \"HH:mm\";\n\n  if (!suppressSeconds || dt.second !== 0 || dt.millisecond !== 0) {\n    fmt += \":ss\";\n    if (!suppressMilliseconds || dt.millisecond !== 0) {\n      fmt += \".SSS\";\n    }\n  }\n\n  if ((includeZone || includeOffset) && spaceZone) {\n    fmt += \" \";\n  }\n\n  if (includeZone) {\n    fmt += \"z\";\n  } else if (includeOffset) {\n    fmt += \"ZZ\";\n  }\n\n  return toTechFormat(dt, fmt);\n}\n\n// defaults for unspecified units in the supported calendars\nconst defaultUnitValues = {\n    month: 1,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  },\n  defaultWeekUnitValues = {\n    weekNumber: 1,\n    weekday: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  },\n  defaultOrdinalUnitValues = {\n    ordinal: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  };\n\n// Units in the supported calendars, sorted by bigness\nconst orderedUnits = [\"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\", \"millisecond\"],\n  orderedWeekUnits = [\n    \"weekYear\",\n    \"weekNumber\",\n    \"weekday\",\n    \"hour\",\n    \"minute\",\n    \"second\",\n    \"millisecond\"\n  ],\n  orderedOrdinalUnits = [\"year\", \"ordinal\", \"hour\", \"minute\", \"second\", \"millisecond\"];\n\n// standardize case and plurality in units\nfunction normalizeUnit(unit, ignoreUnknown = false) {\n  const normalized = {\n    year: \"year\",\n    years: \"year\",\n    month: \"month\",\n    months: \"month\",\n    day: \"day\",\n    days: \"day\",\n    hour: \"hour\",\n    hours: \"hour\",\n    minute: \"minute\",\n    minutes: \"minute\",\n    second: \"second\",\n    seconds: \"second\",\n    millisecond: \"millisecond\",\n    milliseconds: \"millisecond\",\n    weekday: \"weekday\",\n    weekdays: \"weekday\",\n    weeknumber: \"weekNumber\",\n    weeksnumber: \"weekNumber\",\n    weeknumbers: \"weekNumber\",\n    weekyear: \"weekYear\",\n    weekyears: \"weekYear\",\n    ordinal: \"ordinal\"\n  }[unit ? unit.toLowerCase() : unit];\n\n  if (!ignoreUnknown && !normalized) throw new InvalidUnitError(unit);\n\n  return normalized;\n}\n\n// this is a dumbed down version of fromObject() that runs about 60% faster\n// but doesn't do any validation, makes a bunch of assumptions about what units\n// are present, and so on.\nfunction quickDT(obj, zone) {\n  // assume we have the higher-order units\n  for (const u of orderedUnits) {\n    if (isUndefined(obj[u])) {\n      obj[u] = defaultUnitValues[u];\n    }\n  }\n\n  const invalid = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);\n  if (invalid) {\n    return DateTime.invalid(invalid);\n  }\n\n  const tsNow = Settings.now(),\n    offsetProvis = zone.offset(tsNow),\n    [ts, o] = objToTS(obj, offsetProvis, zone);\n\n  return new DateTime({\n    ts,\n    zone,\n    o\n  });\n}\n\n/**\n * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.\n *\n * A DateTime comprises of:\n * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.\n * * A time zone. Each instance is considered in the context of a specific zone (by default the local system's zone).\n * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.\n *\n * Here is a brief overview of the most commonly used functionality it provides:\n *\n * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link local}, {@link utc}, and (most flexibly) {@link fromObject}. To create one from a standard string format, use {@link fromISO}, {@link fromHTTP}, and {@link fromRFC2822}. To create one from a custom string format, use {@link fromFormat}. To create one from a native JS date, use {@link fromJSDate}.\n * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link toObject}), use the {@link year}, {@link month},\n * {@link day}, {@link hour}, {@link minute}, {@link second}, {@link millisecond} accessors.\n * * **Week calendar**: For ISO week calendar attributes, see the {@link weekYear}, {@link weekNumber}, and {@link weekday} accessors.\n * * **Configuration** See the {@link locale} and {@link numberingSystem} accessors.\n * * **Transformation**: To transform the DateTime into other DateTimes, use {@link set}, {@link reconfigure}, {@link setZone}, {@link setLocale}, {@link plus}, {@link minus}, {@link endOf}, {@link startOf}, {@link toUTC}, and {@link toLocal}.\n * * **Output**: To convert the DateTime to other representations, use the {@link toJSON}, {@link toISO}, {@link toHTTP}, {@link toObject}, {@link toRFC2822}, {@link toString}, {@link toLocaleString}, {@link toFormat}, {@link toMillis} and {@link toJSDate}.\n *\n * There's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.\n */\nexport default class DateTime {\n  /**\n   * @access private\n   */\n  constructor(config) {\n    const zone = config.zone || Settings.defaultZone,\n      invalid =\n        config.invalid ||\n        (Number.isNaN(config.ts) ? new Invalid(\"invalid input\") : null) ||\n        (!zone.isValid ? unsupportedZone(zone) : null);\n    /**\n     * @access private\n     */\n    this.ts = isUndefined(config.ts) ? Settings.now() : config.ts;\n\n    let c = null,\n      o = null;\n    if (!invalid) {\n      const unchanged = config.old && config.old.ts === this.ts && config.old.zone.equals(zone);\n      c = unchanged ? config.old.c : tsToObj(this.ts, zone.offset(this.ts));\n      o = unchanged ? config.old.o : zone.offset(this.ts);\n    }\n\n    /**\n     * @access private\n     */\n    this.zone = zone;\n    /**\n     * @access private\n     */\n    this.loc = config.loc || Locale.create();\n    /**\n     * @access private\n     */\n    this.invalid = invalid;\n    /**\n     * @access private\n     */\n    this.weekData = null;\n    /**\n     * @access private\n     */\n    this.c = c;\n    /**\n     * @access private\n     */\n    this.o = o;\n    /**\n     * @access private\n     */\n    this.isLuxonDateTime = true;\n  }\n\n  // CONSTRUCT\n\n  /**\n   * Create a local DateTime\n   * @param {number} year - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used\n   * @param {number} [month=1] - The month, 1-indexed\n   * @param {number} [day=1] - The day of the month\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\n   * @param {number} [minute=0] - The minute of the hour, i.e. a number between 0 and 59\n   * @param {number} [second=0] - The second of the minute, i.e. a number between 0 and 59\n   * @param {number} [millisecond=0] - The millisecond of the second, i.e. a number between 0 and 999\n   * @example DateTime.local()                            //~> now\n   * @example DateTime.local(2017)                        //~> 2017-01-01T00:00:00\n   * @example DateTime.local(2017, 3)                     //~> 2017-03-01T00:00:00\n   * @example DateTime.local(2017, 3, 12)                 //~> 2017-03-12T00:00:00\n   * @example DateTime.local(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00\n   * @example DateTime.local(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.765\n   * @return {DateTime}\n   */\n  static local(year, month, day, hour, minute, second, millisecond) {\n    if (isUndefined(year)) {\n      return new DateTime({ ts: Settings.now() });\n    } else {\n      return quickDT(\n        {\n          year,\n          month,\n          day,\n          hour,\n          minute,\n          second,\n          millisecond\n        },\n        Settings.defaultZone\n      );\n    }\n  }\n\n  /**\n   * Create a DateTime in UTC\n   * @param {number} year - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used\n   * @param {number} [month=1] - The month, 1-indexed\n   * @param {number} [day=1] - The day of the month\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\n   * @param {number} [minute=0] - The minute of the hour, i.e. a number between 0 and 59\n   * @param {number} [second=0] - The second of the minute, i.e. a number between 0 and 59\n   * @param {number} [millisecond=0] - The millisecond of the second, i.e. a number between 0 and 999\n   * @example DateTime.utc()                            //~> now\n   * @example DateTime.utc(2017)                        //~> 2017-01-01T00:00:00Z\n   * @example DateTime.utc(2017, 3)                     //~> 2017-03-01T00:00:00Z\n   * @example DateTime.utc(2017, 3, 12)                 //~> 2017-03-12T00:00:00Z\n   * @example DateTime.utc(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.765Z\n   * @return {DateTime}\n   */\n  static utc(year, month, day, hour, minute, second, millisecond) {\n    if (isUndefined(year)) {\n      return new DateTime({\n        ts: Settings.now(),\n        zone: FixedOffsetZone.utcInstance\n      });\n    } else {\n      return quickDT(\n        {\n          year,\n          month,\n          day,\n          hour,\n          minute,\n          second,\n          millisecond\n        },\n        FixedOffsetZone.utcInstance\n      );\n    }\n  }\n\n  /**\n   * Create a DateTime from a Javascript Date object. Uses the default zone.\n   * @param {Date} date - a Javascript Date object\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @return {DateTime}\n   */\n  static fromJSDate(date, options = {}) {\n    return new DateTime({\n      ts: isDate(date) ? date.valueOf() : NaN,\n      zone: normalizeZone(options.zone, Settings.defaultZone),\n      loc: Locale.fromObject(options)\n    });\n  }\n\n  /**\n   * Create a DateTime from a number of milliseconds since the epoch (i.e. since 1 January 1970 00:00:00 UTC). Uses the default zone.\n   * @param {number} milliseconds - a number of milliseconds since 1970 UTC\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromMillis(milliseconds, options = {}) {\n    if (!isNumber(milliseconds)) {\n      throw new InvalidArgumentError(\"fromMillis requires a numerical input\");\n    } else {\n      return new DateTime({\n        ts: milliseconds,\n        zone: normalizeZone(options.zone, Settings.defaultZone),\n        loc: Locale.fromObject(options)\n      });\n    }\n  }\n\n  /**\n   * Create a DateTime from a number of seconds since the epoch (i.e. since 1 January 1970 00:00:00 UTC). Uses the default zone.\n   * @param {number} seconds - a number of seconds since 1970 UTC\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromSeconds(seconds, options = {}) {\n    if (!isNumber(seconds)) {\n      throw new InvalidArgumentError(\"fromSeconds requires a numerical input\");\n    } else {\n      return new DateTime({\n        ts: seconds * 1000,\n        zone: normalizeZone(options.zone, Settings.defaultZone),\n        loc: Locale.fromObject(options)\n      });\n    }\n  }\n\n  /**\n   * Create a DateTime from a Javascript object with keys like 'year' and 'hour' with reasonable defaults.\n   * @param {Object} obj - the object to create the DateTime from\n   * @param {number} obj.year - a year, such as 1987\n   * @param {number} obj.month - a month, 1-12\n   * @param {number} obj.day - a day of the month, 1-31, depending on the month\n   * @param {number} obj.ordinal - day of the year, 1-365 or 366\n   * @param {number} obj.weekYear - an ISO week year\n   * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year\n   * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday\n   * @param {number} obj.hour - hour of the day, 0-23\n   * @param {number} obj.minute - minute of the hour, 0-59\n   * @param {number} obj.second - second of the minute, 0-59\n   * @param {number} obj.millisecond - millisecond of the second, 0-999\n   * @param {string|Zone} [obj.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()\n   * @param {string} [obj.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} obj.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} obj.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'\n   * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01T00'\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'utc' }),\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'local' })\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'America/New_York' })\n   * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'\n   * @return {DateTime}\n   */\n  static fromObject(obj) {\n    const zoneToUse = normalizeZone(obj.zone, Settings.defaultZone);\n    if (!zoneToUse.isValid) {\n      return DateTime.invalid(unsupportedZone(zoneToUse));\n    }\n\n    const tsNow = Settings.now(),\n      offsetProvis = zoneToUse.offset(tsNow),\n      normalized = normalizeObject(obj, normalizeUnit, true),\n      containsOrdinal = !isUndefined(normalized.ordinal),\n      containsGregorYear = !isUndefined(normalized.year),\n      containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day),\n      containsGregor = containsGregorYear || containsGregorMD,\n      definiteWeekDef = normalized.weekYear || normalized.weekNumber,\n      loc = Locale.fromObject(obj);\n\n    // cases:\n    // just a weekday -> this week's instance of that weekday, no worries\n    // (gregorian data or ordinal) + (weekYear or weekNumber) -> error\n    // (gregorian month or day) + ordinal -> error\n    // otherwise just use weeks or ordinals or gregorian, depending on what's specified\n\n    if ((containsGregor || containsOrdinal) && definiteWeekDef) {\n      throw new ConflictingSpecificationError(\n        \"Can't mix weekYear/weekNumber units with year/month/day or ordinals\"\n      );\n    }\n\n    if (containsGregorMD && containsOrdinal) {\n      throw new ConflictingSpecificationError(\"Can't mix ordinal dates with month/day\");\n    }\n\n    const useWeekData = definiteWeekDef || (normalized.weekday && !containsGregor);\n\n    // configure ourselves to deal with gregorian dates or week stuff\n    let units,\n      defaultValues,\n      objNow = tsToObj(tsNow, offsetProvis);\n    if (useWeekData) {\n      units = orderedWeekUnits;\n      defaultValues = defaultWeekUnitValues;\n      objNow = gregorianToWeek(objNow);\n    } else if (containsOrdinal) {\n      units = orderedOrdinalUnits;\n      defaultValues = defaultOrdinalUnitValues;\n      objNow = gregorianToOrdinal(objNow);\n    } else {\n      units = orderedUnits;\n      defaultValues = defaultUnitValues;\n    }\n\n    // set default values for missing stuff\n    let foundFirst = false;\n    for (const u of units) {\n      const v = normalized[u];\n      if (!isUndefined(v)) {\n        foundFirst = true;\n      } else if (foundFirst) {\n        normalized[u] = defaultValues[u];\n      } else {\n        normalized[u] = objNow[u];\n      }\n    }\n\n    // make sure the values we have are in range\n    const higherOrderInvalid = useWeekData\n        ? hasInvalidWeekData(normalized)\n        : containsOrdinal\n          ? hasInvalidOrdinalData(normalized)\n          : hasInvalidGregorianData(normalized),\n      invalid = higherOrderInvalid || hasInvalidTimeData(normalized);\n\n    if (invalid) {\n      return DateTime.invalid(invalid);\n    }\n\n    // compute the actual time\n    const gregorian = useWeekData\n        ? weekToGregorian(normalized)\n        : containsOrdinal\n          ? ordinalToGregorian(normalized)\n          : normalized,\n      [tsFinal, offsetFinal] = objToTS(gregorian, offsetProvis, zoneToUse),\n      inst = new DateTime({\n        ts: tsFinal,\n        zone: zoneToUse,\n        o: offsetFinal,\n        loc\n      });\n\n    // gregorian data + weekday serves only to validate\n    if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {\n      return DateTime.invalid(\n        \"mismatched weekday\",\n        `you can't specify both a weekday of ${normalized.weekday} and a date of ${inst.toISO()}`\n      );\n    }\n\n    return inst;\n  }\n\n  /**\n   * Create a DateTime from an ISO 8601 string\n   * @param {string} text - the ISO string\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123')\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})\n   * @example DateTime.fromISO('2016-W05-4')\n   * @return {DateTime}\n   */\n  static fromISO(text, opts = {}) {\n    const [vals, parsedZone] = parseISODate(text);\n    return parseDataToDateTime(vals, parsedZone, opts, \"ISO 8601\", text);\n  }\n\n  /**\n   * Create a DateTime from an RFC 2822 string\n   * @param {string} text - the RFC 2822 string\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\n   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')\n   * @example DateTime.fromRFC2822('Tue, 25 Nov 2016 13:23:12 +0600')\n   * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')\n   * @return {DateTime}\n   */\n  static fromRFC2822(text, opts = {}) {\n    const [vals, parsedZone] = parseRFC2822Date(text);\n    return parseDataToDateTime(vals, parsedZone, opts, \"RFC 2822\", text);\n  }\n\n  /**\n   * Create a DateTime from an HTTP header date\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\n   * @param {string} text - the HTTP header date\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\n   * @param {boolean} [opts.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.\n   * @param {string} [opts.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')\n   * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')\n   * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')\n   * @return {DateTime}\n   */\n  static fromHTTP(text, opts = {}) {\n    const [vals, parsedZone] = parseHTTPDate(text);\n    return parseDataToDateTime(vals, parsedZone, opts, \"HTTP\", opts);\n  }\n\n  /**\n   * Create a DateTime from an input string and format string\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale\n   * @param {string} text - the string to parse\n   * @param {string} fmt - the format the string is expected to be in (see description)\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale\n   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromFormat(text, fmt, opts = {}) {\n    if (isUndefined(text) || isUndefined(fmt)) {\n      throw new InvalidArgumentError(\"fromFormat requires an input string and a format\");\n    }\n\n    const { locale = null, numberingSystem = null } = opts,\n      localeToUse = Locale.fromOpts({ locale, numberingSystem, defaultToEN: true }),\n      [vals, parsedZone, invalid] = parseFromTokens(localeToUse, text, fmt);\n    if (invalid) {\n      return DateTime.invalid(invalid);\n    } else {\n      return parseDataToDateTime(vals, parsedZone, opts, `format ${fmt}`, text);\n    }\n  }\n\n  /**\n   * @deprecated use fromFormat instead\n   */\n  static fromString(text, fmt, opts = {}) {\n    return DateTime.fromFormat(text, fmt, opts);\n  }\n\n  /**\n   * Create a DateTime from a SQL date, time, or datetime\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale\n   * @param {string} text - the string to parse\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale\n   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @example DateTime.fromSQL('2017-05-15')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })\n   * @example DateTime.fromSQL('09:12:34.342')\n   * @return {DateTime}\n   */\n  static fromSQL(text, opts = {}) {\n    const [vals, parsedZone] = parseSQL(text);\n    return parseDataToDateTime(vals, parsedZone, opts, \"SQL\", text);\n  }\n\n  /**\n   * Create an invalid DateTime.\n   * @param {string} reason - simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {DateTime}\n   */\n  static invalid(reason, explanation = null) {\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the DateTime is invalid\");\n    }\n\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (Settings.throwOnInvalid) {\n      throw new InvalidDateTimeError(invalid);\n    } else {\n      return new DateTime({ invalid });\n    }\n  }\n\n  /**\n   * Check if an object is a DateTime. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n  static isDateTime(o) {\n    return o.isLuxonDateTime;\n  }\n\n  // INFO\n\n  /**\n   * Get the value of unit.\n   * @param {string} unit - a unit such as 'minute' or 'day'\n   * @example DateTime.local(2017, 7, 4).get('month'); //=> 7\n   * @example DateTime.local(2017, 7, 4).get('day'); //=> 4\n   * @return {number}\n   */\n  get(unit) {\n    return this[unit];\n  }\n\n  /**\n   * Returns whether the DateTime is valid. Invalid DateTimes occur when:\n   * * The DateTime was created from invalid calendar information, such as the 13th month or February 30\n   * * The DateTime was created by an operation on another invalid date\n   * @type {boolean}\n   */\n  get isValid() {\n    return this.invalid === null;\n  }\n\n  /**\n   * Returns an error code if this DateTime is invalid, or null if the DateTime is valid\n   * @type {string}\n   */\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n\n  /**\n   * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid\n   * @type {string}\n   */\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n\n  /**\n   * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime\n   *\n   * @type {string}\n   */\n  get locale() {\n    return this.isValid ? this.loc.locale : null;\n  }\n\n  /**\n   * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime\n   *\n   * @type {string}\n   */\n  get numberingSystem() {\n    return this.isValid ? this.loc.numberingSystem : null;\n  }\n\n  /**\n   * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime\n   *\n   * @type {string}\n   */\n  get outputCalendar() {\n    return this.isValid ? this.loc.outputCalendar : null;\n  }\n\n  /**\n   * Get the name of the time zone.\n   * @type {string}\n   */\n  get zoneName() {\n    return this.isValid ? this.zone.name : null;\n  }\n\n  /**\n   * Get the year\n   * @example DateTime.local(2017, 5, 25).year //=> 2017\n   * @type {number}\n   */\n  get year() {\n    return this.isValid ? this.c.year : NaN;\n  }\n\n  /**\n   * Get the quarter\n   * @example DateTime.local(2017, 5, 25).quarter //=> 2\n   * @type {number}\n   */\n  get quarter() {\n    return this.isValid ? Math.ceil(this.c.month / 3) : NaN;\n  }\n\n  /**\n   * Get the month (1-12).\n   * @example DateTime.local(2017, 5, 25).month //=> 5\n   * @type {number}\n   */\n  get month() {\n    return this.isValid ? this.c.month : NaN;\n  }\n\n  /**\n   * Get the day of the month (1-30ish).\n   * @example DateTime.local(2017, 5, 25).day //=> 25\n   * @type {number}\n   */\n  get day() {\n    return this.isValid ? this.c.day : NaN;\n  }\n\n  /**\n   * Get the hour of the day (0-23).\n   * @example DateTime.local(2017, 5, 25, 9).hour //=> 9\n   * @type {number}\n   */\n  get hour() {\n    return this.isValid ? this.c.hour : NaN;\n  }\n\n  /**\n   * Get the minute of the hour (0-59).\n   * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30\n   * @type {number}\n   */\n  get minute() {\n    return this.isValid ? this.c.minute : NaN;\n  }\n\n  /**\n   * Get the second of the minute (0-59).\n   * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52\n   * @type {number}\n   */\n  get second() {\n    return this.isValid ? this.c.second : NaN;\n  }\n\n  /**\n   * Get the millisecond of the second (0-999).\n   * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654\n   * @type {number}\n   */\n  get millisecond() {\n    return this.isValid ? this.c.millisecond : NaN;\n  }\n\n  /**\n   * Get the week year\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2014, 11, 31).weekYear //=> 2015\n   * @type {number}\n   */\n  get weekYear() {\n    return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;\n  }\n\n  /**\n   * Get the week number of the week year (1-52ish).\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2017, 5, 25).weekNumber //=> 21\n   * @type {number}\n   */\n  get weekNumber() {\n    return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;\n  }\n\n  /**\n   * Get the day of the week.\n   * 1 is Monday and 7 is Sunday\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2014, 11, 31).weekday //=> 4\n   * @type {number}\n   */\n  get weekday() {\n    return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;\n  }\n\n  /**\n   * Get the ordinal (i.e. the day of the year)\n   * @example DateTime.local(2017, 5, 25).ordinal //=> 145\n   * @type {number|DateTime}\n   */\n  get ordinal() {\n    return this.isValid ? gregorianToOrdinal(this.c).ordinal : NaN;\n  }\n\n  /**\n   * Get the human readable short month name, such as 'Oct'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).monthShort //=> Oct\n   * @type {string}\n   */\n  get monthShort() {\n    return this.isValid ? Info.months(\"short\", { locale: this.locale })[this.month - 1] : null;\n  }\n\n  /**\n   * Get the human readable long month name, such as 'October'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).monthLong //=> October\n   * @type {string}\n   */\n  get monthLong() {\n    return this.isValid ? Info.months(\"long\", { locale: this.locale })[this.month - 1] : null;\n  }\n\n  /**\n   * Get the human readable short weekday, such as 'Mon'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon\n   * @type {string}\n   */\n  get weekdayShort() {\n    return this.isValid ? Info.weekdays(\"short\", { locale: this.locale })[this.weekday - 1] : null;\n  }\n\n  /**\n   * Get the human readable long weekday, such as 'Monday'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday\n   * @type {string}\n   */\n  get weekdayLong() {\n    return this.isValid ? Info.weekdays(\"long\", { locale: this.locale })[this.weekday - 1] : null;\n  }\n\n  /**\n   * Get the UTC offset of this DateTime in minutes\n   * @example DateTime.local().offset //=> -240\n   * @example DateTime.utc().offset //=> 0\n   * @type {number}\n   */\n  get offset() {\n    return this.isValid ? this.zone.offset(this.ts) : NaN;\n  }\n\n  /**\n   * Get the short human name for the zone's current offset, for example \"EST\" or \"EDT\".\n   * Defaults to the system's locale if no locale has been specified\n   * @type {string}\n   */\n  get offsetNameShort() {\n    if (this.isValid) {\n      return this.zone.offsetName(this.ts, {\n        format: \"short\",\n        locale: this.locale\n      });\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get the long human name for the zone's current offset, for example \"Eastern Standard Time\" or \"Eastern Daylight Time\".\n   * Defaults to the system's locale if no locale has been specified\n   * @type {string}\n   */\n  get offsetNameLong() {\n    if (this.isValid) {\n      return this.zone.offsetName(this.ts, {\n        format: \"long\",\n        locale: this.locale\n      });\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get whether this zone's offset ever changes, as in a DST.\n   * @type {boolean}\n   */\n  get isOffsetFixed() {\n    return this.isValid ? this.zone.universal : null;\n  }\n\n  /**\n   * Get whether the DateTime is in a DST.\n   * @type {boolean}\n   */\n  get isInDST() {\n    if (this.isOffsetFixed) {\n      return false;\n    } else {\n      return (\n        this.offset > this.set({ month: 1 }).offset || this.offset > this.set({ month: 5 }).offset\n      );\n    }\n  }\n\n  /**\n   * Returns true if this DateTime is in a leap year, false otherwise\n   * @example DateTime.local(2016).isInLeapYear //=> true\n   * @example DateTime.local(2013).isInLeapYear //=> false\n   * @type {boolean}\n   */\n  get isInLeapYear() {\n    return isLeapYear(this.year);\n  }\n\n  /**\n   * Returns the number of days in this DateTime's month\n   * @example DateTime.local(2016, 2).daysInMonth //=> 29\n   * @example DateTime.local(2016, 3).daysInMonth //=> 31\n   * @type {number}\n   */\n  get daysInMonth() {\n    return daysInMonth(this.year, this.month);\n  }\n\n  /**\n   * Returns the number of days in this DateTime's year\n   * @example DateTime.local(2016).daysInYear //=> 366\n   * @example DateTime.local(2013).daysInYear //=> 365\n   * @type {number}\n   */\n  get daysInYear() {\n    return this.isValid ? daysInYear(this.year) : NaN;\n  }\n\n  /**\n   * Returns the number of weeks in this DateTime's year\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2004).weeksInWeekYear //=> 53\n   * @example DateTime.local(2013).weeksInWeekYear //=> 52\n   * @type {number}\n   */\n  get weeksInWeekYear() {\n    return this.isValid ? weeksInWeekYear(this.weekYear) : NaN;\n  }\n\n  /**\n   * Returns the resolved Intl options for this DateTime.\n   * This is useful in understanding the behavior of formatting methods\n   * @param {Object} opts - the same options as toLocaleString\n   * @return {Object}\n   */\n  resolvedLocaleOpts(opts = {}) {\n    const { locale, numberingSystem, calendar } = Formatter.create(\n      this.loc.clone(opts),\n      opts\n    ).resolvedOptions(this);\n    return { locale, numberingSystem, outputCalendar: calendar };\n  }\n\n  // TRANSFORM\n\n  /**\n   * \"Set\" the DateTime's zone to UTC. Returns a newly-constructed DateTime.\n   *\n   * Equivalent to {@link setZone}('utc')\n   * @param {number} [offset=0] - optionally, an offset from UTC in minutes\n   * @param {Object} [opts={}] - options to pass to `setZone()`\n   * @return {DateTime}\n   */\n  toUTC(offset = 0, opts = {}) {\n    return this.setZone(FixedOffsetZone.instance(offset), opts);\n  }\n\n  /**\n   * \"Set\" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.\n   *\n   * Equivalent to `setZone('local')`\n   * @return {DateTime}\n   */\n  toLocal() {\n    return this.setZone(new LocalZone());\n  }\n\n  /**\n   * \"Set\" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.\n   *\n   * By default, the setter keeps the underlying time the same (as in, the same UTC timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link plus}. You may wish to use {@link toLocal} and {@link toUTC} which provide simple convenience wrappers for commonly used zones.\n   * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'utc+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link Zone} class.\n   * @param {Object} opts - options\n   * @param {boolean} [opts.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.\n   * @return {DateTime}\n   */\n  setZone(zone, { keepLocalTime = false, keepCalendarTime = false } = {}) {\n    zone = normalizeZone(zone, Settings.defaultZone);\n    if (zone.equals(this.zone)) {\n      return this;\n    } else if (!zone.isValid) {\n      return DateTime.invalid(unsupportedZone(zone));\n    } else {\n      const newTS =\n        keepLocalTime || keepCalendarTime // keepCalendarTime is the deprecated name for keepLocalTime\n          ? this.ts + (this.o - zone.offset(this.ts)) * 60 * 1000\n          : this.ts;\n      return clone(this, { ts: newTS, zone });\n    }\n  }\n\n  /**\n   * \"Set\" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.\n   * @param {Object} properties - the properties to set\n   * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })\n   * @return {DateTime}\n   */\n  reconfigure({ locale, numberingSystem, outputCalendar } = {}) {\n    const loc = this.loc.clone({ locale, numberingSystem, outputCalendar });\n    return clone(this, { loc });\n  }\n\n  /**\n   * \"Set\" the locale. Returns a newly-constructed DateTime.\n   * Just a convenient alias for reconfigure({ locale })\n   * @example DateTime.local(2017, 5, 25).setLocale('en-GB')\n   * @return {DateTime}\n   */\n  setLocale(locale) {\n    return this.reconfigure({ locale });\n  }\n\n  /**\n   * \"Set\" the values of specified units. Returns a newly-constructed DateTime.\n   * You can only set units with this method; for \"setting\" metadata, see {@link reconfigure} and {@link setZone}.\n   * @param {Object} values - a mapping of units to numbers\n   * @example dt.set({ year: 2017 })\n   * @example dt.set({ hour: 8, minute: 30 })\n   * @example dt.set({ weekday: 5 })\n   * @example dt.set({ year: 2005, ordinal: 234 })\n   * @return {DateTime}\n   */\n  set(values) {\n    if (!this.isValid) return this;\n\n    const normalized = normalizeObject(values, normalizeUnit),\n      settingWeekStuff =\n        !isUndefined(normalized.weekYear) ||\n        !isUndefined(normalized.weekNumber) ||\n        !isUndefined(normalized.weekday);\n\n    let mixed;\n    if (settingWeekStuff) {\n      mixed = weekToGregorian(Object.assign(gregorianToWeek(this.c), normalized));\n    } else if (!isUndefined(normalized.ordinal)) {\n      mixed = ordinalToGregorian(Object.assign(gregorianToOrdinal(this.c), normalized));\n    } else {\n      mixed = Object.assign(this.toObject(), normalized);\n\n      // if we didn't set the day but we ended up on an overflow date,\n      // use the last day of the right month\n      if (isUndefined(normalized.day)) {\n        mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);\n      }\n    }\n\n    const [ts, o] = objToTS(mixed, this.o, this.zone);\n    return clone(this, { ts, o });\n  }\n\n  /**\n   * Add a period of time to this DateTime and return the resulting DateTime\n   *\n   * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.\n   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @example DateTime.local().plus(123) //~> in 123 milliseconds\n   * @example DateTime.local().plus({ minutes: 15 }) //~> in 15 minutes\n   * @example DateTime.local().plus({ days: 1 }) //~> this time tomorrow\n   * @example DateTime.local().plus({ days: -1 }) //~> this time yesterday\n   * @example DateTime.local().plus({ hours: 3, minutes: 13 }) //~> in 1 hr, 13 min\n   * @example DateTime.local().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 1 hr, 13 min\n   * @return {DateTime}\n   */\n  plus(duration) {\n    if (!this.isValid) return this;\n    const dur = friendlyDuration(duration);\n    return clone(this, adjustTime(this, dur));\n  }\n\n  /**\n   * Subtract a period of time to this DateTime and return the resulting DateTime\n   * See {@link plus}\n   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   @return {DateTime}\n  */\n  minus(duration) {\n    if (!this.isValid) return this;\n    const dur = friendlyDuration(duration).negate();\n    return clone(this, adjustTime(this, dur));\n  }\n\n  /**\n   * \"Set\" this DateTime to the beginning of a unit of time.\n   * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'month', 'day', 'hour', 'minute', 'second', or 'millisecond'.\n   * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'\n   * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'\n   * @return {DateTime}\n   */\n  startOf(unit) {\n    if (!this.isValid) return this;\n    const o = {},\n      normalizedUnit = Duration.normalizeUnit(unit);\n    switch (normalizedUnit) {\n      case \"years\":\n        o.month = 1;\n      // falls through\n      case \"quarters\":\n      case \"months\":\n        o.day = 1;\n      // falls through\n      case \"weeks\":\n      case \"days\":\n        o.hour = 0;\n      // falls through\n      case \"hours\":\n        o.minute = 0;\n      // falls through\n      case \"minutes\":\n        o.second = 0;\n      // falls through\n      case \"seconds\":\n        o.millisecond = 0;\n        break;\n      case \"milliseconds\":\n        break;\n      default:\n        throw new InvalidUnitError(unit);\n    }\n\n    if (normalizedUnit === \"weeks\") {\n      o.weekday = 1;\n    }\n\n    if (normalizedUnit === \"quarters\") {\n      const q = Math.ceil(this.month / 3);\n      o.month = (q - 1) * 3 + 1;\n    }\n\n    return this.set(o);\n  }\n\n  /**\n   * \"Set\" this DateTime to the end (i.e. the last millisecond) of a unit of time\n   * @param {string} unit - The unit to go to the end of. Can be 'year', 'month', 'day', 'hour', 'minute', 'second', or 'millisecond'.\n   * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'\n   * @return {DateTime}\n   */\n  endOf(unit) {\n    return this.isValid\n      ? this.startOf(unit)\n          .plus({ [unit]: 1 })\n          .minus(1)\n      : this;\n  }\n\n  // OUTPUT\n\n  /**\n   * Returns a string representation of this DateTime formatted according to the specified format string.\n   * **You may not want this.** See {@link toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/docs/manual/formatting.html#table-of-tokens).\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale.\n   * @see https://moment.github.io/luxon/docs/manual/formatting.html#table-of-tokens\n   * @param {string} fmt - the format string\n   * @param {Object} opts - opts to override the configuration options\n   * @example DateTime.local().toFormat('yyyy LLL dd') //=> '2017 Apr 22'\n   * @example DateTime.local().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'\n   * @example DateTime.local().toFormat('yyyy LLL dd', { locale: \"fr\" }) //=> '2017 avr. 22'\n   * @example DateTime.local().toFormat(\"HH 'hours and' mm 'minutes'\") //=> '20 hours and 55 minutes'\n   * @return {string}\n   */\n  toFormat(fmt, opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt)\n      : INVALID;\n  }\n\n  /**\n   * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.\n   * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation.\n   * of the DateTime in the assigned locale.\n   * Defaults to the system's locale if no locale has been specified\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param opts {Object} - Intl.DateTimeFormat constructor options and configuration options\n   * @example DateTime.local().toLocaleString(); //=> 4/20/2017\n   * @example DateTime.local().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'\n   * @example DateTime.local().toLocaleString({ locale: \"en-gb\" }); //=> '20/04/2017'\n   * @example DateTime.local().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'\n   * @example DateTime.local().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'\n   * @example DateTime.local().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'\n   * @example DateTime.local().toLocaleString({weekday: 'long', month: 'long', day: '2-digit'}); //=> 'Thu, Apr 20'\n   * @example DateTime.local().toLocaleString({weekday: 'long', month: 'long', day: '2-digit', hour: '2-digit', minute: '2-digit'}); //=> 'Thu, Apr 20, 11:27'\n   * @example DateTime.local().toLocaleString({hour: '2-digit', minute: '2-digit'}); //=> '11:32'\n   * @return {string}\n   */\n  toLocaleString(opts = Formats.DATE_SHORT) {\n    return this.isValid\n      ? Formatter.create(this.loc.clone(opts), opts).formatDateTime(this)\n      : INVALID;\n  }\n\n  /**\n   * Returns an array of format \"parts\", i.e. individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.\n   * Defaults to the system's locale if no locale has been specified\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts\n   * @param opts {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.\n   * @example DateTime.local().toLocaleString(); //=> [\n   *                                    //=>   { type: 'day', value: '25' },\n   *                                    //=>   { type: 'literal', value: '/' },\n   *                                    //=>   { type: 'month', value: '05' },\n   *                                    //=>   { type: 'literal', value: '/' },\n   *                                    //=>   { type: 'year', value: '1982' }\n   *                                    //=> ]\n   */\n  toLocaleParts(opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this)\n      : [];\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime\n   * @param {Object} opts - options\n   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0\n   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @example DateTime.utc(1982, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'\n   * @example DateTime.local().toISO() //=> '2017-04-22T20:47:05.335-04:00'\n   * @example DateTime.local().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'\n   * @return {string}\n   */\n  toISO(opts = {}) {\n    if (!this.isValid) {\n      return null;\n    }\n\n    return `${this.toISODate()}T${this.toISOTime(opts)}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's date component\n   * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'\n   * @return {string}\n   */\n  toISODate() {\n    return toTechFormat(this, \"yyyy-MM-dd\");\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's week date\n   * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'\n   * @return {string}\n   */\n  toISOWeekDate() {\n    return toTechFormat(this, \"kkkk-'W'WW-c\");\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's time component\n   * @param {Object} opts - options\n   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0\n   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @example DateTime.utc().hour(7).minute(34).toISOTime() //=> '07:34:19.361Z'\n   * @example DateTime.utc().hour(7).minute(34).toISOTime({ suppressSeconds: true }) //=> '07:34Z'\n   * @return {string}\n   */\n  toISOTime({ suppressMilliseconds = false, suppressSeconds = false, includeOffset = true } = {}) {\n    return toTechTimeFormat(this, { suppressSeconds, suppressMilliseconds, includeOffset });\n  }\n\n  /**\n   * Returns an RFC 2822-compatible string representation of this DateTime, always in UTC\n   * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'\n   * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'\n   * @return {string}\n   */\n  toRFC2822() {\n    return toTechFormat(this, \"EEE, dd LLL yyyy HH:mm:ss ZZZ\");\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in HTTP headers.\n   * Specifically, the string conforms to RFC 1123.\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\n   * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'\n   * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'\n   * @return {string}\n   */\n  toHTTP() {\n    return toTechFormat(this.toUTC(), \"EEE, dd LLL yyyy HH:mm:ss 'GMT'\");\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL Date\n   * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'\n   * @return {string}\n   */\n  toSQLDate() {\n    return toTechFormat(this, \"yyyy-MM-dd\");\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL Time\n   * @param {Object} opts - options\n   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overides includeOffset.\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @example DateTime.utc().toSQL() //=> '05:15:16.345'\n   * @example DateTime.local().toSQL() //=> '05:15:16.345 -04:00'\n   * @example DateTime.local().toSQL({ includeOffset: false }) //=> '05:15:16.345'\n   * @example DateTime.local().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'\n   * @return {string}\n   */\n  toSQLTime({ includeOffset = true, includeZone = false } = {}) {\n    return toTechTimeFormat(this, { includeOffset, includeZone, spaceZone: true });\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL DateTime\n   * @param {Object} opts - options\n   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'\n   * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'\n   * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'\n   * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'\n   * @return {string}\n   */\n  toSQL(opts = {}) {\n    if (!this.isValid) {\n      return null;\n    }\n\n    return `${this.toSQLDate()} ${this.toSQLTime(opts)}`;\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for debugging\n   * @return {string}\n   */\n  toString() {\n    return this.isValid ? this.toISO() : INVALID;\n  }\n\n  /**\n   * Returns the epoch milliseconds of this DateTime. Alias of {@link toMillis}\n   * @return {number}\n   */\n  valueOf() {\n    return this.toMillis();\n  }\n\n  /**\n   * Returns the epoch milliseconds of this DateTime.\n   * @return {number}\n   */\n  toMillis() {\n    return this.isValid ? this.ts : NaN;\n  }\n\n  /**\n   * Returns the epoch seconds of this DateTime.\n   * @return {number}\n   */\n  toSeconds() {\n    return this.isValid ? this.ts / 1000 : NaN;\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.\n   * @return {string}\n   */\n  toJSON() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns a BSON serializable equivalent to this DateTime.\n   * @return {Date}\n   */\n  toBSON() {\n    return this.toJSDate();\n  }\n\n  /**\n   * Returns a Javascript object with this DateTime's year, month, day, and so on.\n   * @param opts - options for generating the object\n   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output\n   * @example DateTime.local().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }\n   * @return {Object}\n   */\n  toObject(opts = {}) {\n    if (!this.isValid) return {};\n\n    const base = Object.assign({}, this.c);\n\n    if (opts.includeConfig) {\n      base.outputCalendar = this.outputCalendar;\n      base.numberingSystem = this.loc.numberingSystem;\n      base.locale = this.loc.locale;\n    }\n    return base;\n  }\n\n  /**\n   * Returns a Javascript Date equivalent to this DateTime.\n   * @return {Date}\n   */\n  toJSDate() {\n    return new Date(this.isValid ? this.ts : NaN);\n  }\n\n  // COMPARE\n\n  /**\n   * Return the difference between two DateTimes as a Duration.\n   * @param {DateTime} otherDateTime - the DateTime to compare this one to\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example\n   * var i1 = DateTime.fromISO('1982-05-25T09:45'),\n   *     i2 = DateTime.fromISO('1983-10-14T10:30');\n   * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }\n   * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }\n   * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }\n   * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }\n   * @return {Duration}\n   */\n  diff(otherDateTime, unit = \"milliseconds\", opts = {}) {\n    if (!this.isValid || !otherDateTime.isValid)\n      return Duration.invalid(this.invalid || otherDateTime.invalid);\n\n    const units = maybeArray(unit).map(Duration.normalizeUnit),\n      otherIsLater = otherDateTime.valueOf() > this.valueOf(),\n      earlier = otherIsLater ? this : otherDateTime,\n      later = otherIsLater ? otherDateTime : this,\n      diffed = diff(earlier, later, units, opts);\n\n    return otherIsLater ? diffed.negate() : diffed;\n  }\n\n  /**\n   * Return the difference between this DateTime and right now.\n   * See {@link diff}\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  diffNow(unit = \"milliseconds\", opts = {}) {\n    return this.diff(DateTime.local(), unit, opts);\n  }\n\n  /**\n   * Return an Interval spanning between this DateTime and another DateTime\n   * @param {DateTime} otherDateTime - the other end point of the Interval\n   * @return {Interval}\n   */\n  until(otherDateTime) {\n    return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;\n  }\n\n  /**\n   * Return whether this DateTime is in the same unit of time as another DateTime\n   * @param {DateTime} otherDateTime - the other DateTime\n   * @param {string} unit - the unit of time to check sameness on\n   * @example DateTime.local().hasSame(otherDT, 'day'); //~> true if both the same calendar day\n   * @return {boolean}\n   */\n  hasSame(otherDateTime, unit) {\n    if (!this.isValid) return false;\n    if (unit === \"millisecond\") {\n      return this.valueOf() === otherDateTime.valueOf();\n    } else {\n      const inputMs = otherDateTime.valueOf();\n      return this.startOf(unit) <= inputMs && inputMs <= this.endOf(unit);\n    }\n  }\n\n  /**\n   * Equality check\n   * Two DateTimes are equal iff they represent the same millisecond, have the same zone and location, and are both valid.\n   * To compare just the millisecond values, use `+dt1 === ~dt2`.\n   * @param {DateTime} other - the other DateTime\n   * @return {boolean}\n   */\n  equals(other) {\n    return (\n      this.isValid &&\n      other.isValid &&\n      this.valueOf() === other.valueOf() &&\n      this.zone.equals(other.zone) &&\n      this.loc.equals(other.loc)\n    );\n  }\n\n  /**\n   * Return the min of several date times\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum\n   * @return {DateTime} the min DateTime, or undefined if called with no argument\n   */\n  static min(...dateTimes) {\n    return bestBy(dateTimes, i => i.valueOf(), Math.min);\n  }\n\n  /**\n   * Return the max of several date times\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum\n   * @return {DateTime} the max DateTime, or undefined if called with no argument\n   */\n  static max(...dateTimes) {\n    return bestBy(dateTimes, i => i.valueOf(), Math.max);\n  }\n\n  // MISC\n\n  /**\n   * Explain how a string would be parsed by fromFormat()\n   * @param {string} text - the string to parse\n   * @param {string} fmt - the format the string is expected to be in (see description)\n   * @param {Object} options - options taken by fromFormat()\n   * @return {Object}\n   */\n  static fromFormatExplain(text, fmt, options = {}) {\n    const { locale = null, numberingSystem = null } = options,\n      localeToUse = Locale.fromOpts({ locale, numberingSystem, defaultToEN: true });\n    return explainFromTokens(localeToUse, text, fmt);\n  }\n\n  /**\n   * @deprecated use fromFormatExplain instead\n   */\n  static fromStringExplain(text, fmt, options = {}) {\n    return DateTime.fromFormatExplain(text, fmt, options);\n  }\n\n  // FORMAT PRESETS\n\n  /**\n   * {@link toLocaleString} format like 10/14/1983\n   * @type {Object}\n   */\n  static get DATE_SHORT() {\n    return Formats.DATE_SHORT;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Oct 14, 1983'\n   * @type {Object}\n   */\n  static get DATE_MED() {\n    return Formats.DATE_MED;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'October 14, 1983'\n   * @type {Object}\n   */\n  static get DATE_FULL() {\n    return Formats.DATE_FULL;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Tuesday, October 14, 1983'\n   * @type {Object}\n   */\n  static get DATE_HUGE() {\n    return Formats.DATE_HUGE;\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_SIMPLE() {\n    return Formats.TIME_SIMPLE;\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_WITH_SECONDS() {\n    return Formats.TIME_WITH_SECONDS;\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_WITH_SHORT_OFFSET() {\n    return Formats.TIME_WITH_SHORT_OFFSET;\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_WITH_LONG_OFFSET() {\n    return Formats.TIME_WITH_LONG_OFFSET;\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_SIMPLE() {\n    return Formats.TIME_24_SIMPLE;\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_WITH_SECONDS() {\n    return Formats.TIME_24_WITH_SECONDS;\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 EDT', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_WITH_SHORT_OFFSET() {\n    return Formats.TIME_24_WITH_SHORT_OFFSET;\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_WITH_LONG_OFFSET() {\n    return Formats.TIME_24_WITH_LONG_OFFSET;\n  }\n\n  /**\n   * {@link toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_SHORT() {\n    return Formats.DATETIME_SHORT;\n  }\n\n  /**\n   * {@link toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_SHORT_WITH_SECONDS() {\n    return Formats.DATETIME_SHORT_WITH_SECONDS;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_MED() {\n    return Formats.DATETIME_MED;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_MED_WITH_SECONDS() {\n    return Formats.DATETIME_MED_WITH_SECONDS;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_FULL() {\n    return Formats.DATETIME_FULL;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_FULL_WITH_SECONDS() {\n    return Formats.DATETIME_FULL_WITH_SECONDS;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_HUGE() {\n    return Formats.DATETIME_HUGE;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_HUGE_WITH_SECONDS() {\n    return Formats.DATETIME_HUGE_WITH_SECONDS;\n  }\n}\n\n/**\n * @private\n */\nexport function friendlyDateTime(dateTimeish) {\n  if (DateTime.isDateTime(dateTimeish)) {\n    return dateTimeish;\n  } else if (dateTimeish && dateTimeish.valueOf && isNumber(dateTimeish.valueOf())) {\n    return DateTime.fromJSDate(dateTimeish);\n  } else if (dateTimeish && typeof dateTimeish === \"object\") {\n    return DateTime.fromObject(dateTimeish);\n  } else {\n    throw new InvalidArgumentError(\n      `Unknown datetime argument: ${dateTimeish}, of type ${typeof dateTimeish}`\n    );\n  }\n}\n"],"names":["isUndefined","o","isNumber","isString","isDate","Object","prototype","toString","call","hasIntl","Intl","DateTimeFormat","hasFormatToParts","formatToParts","maybeArray","thing","Array","isArray","bestBy","arr","by","compare","length","undefined","reduce","best","next","pair","pick","obj","keys","a","k","numberBetween","bottom","top","floorMod","x","n","Math","floor","padStart","input","repeat","slice","parseMillis","fraction","NaN","f","parseFloat","roundTo","number","digits","factor","round","isLeapYear","year","daysInYear","daysInMonth","month","modMonth","modYear","weeksInWeekYear","weekYear","p1","last","p2","untruncateYear","parseZoneInfo","ts","offsetFormat","locale","timeZone","date","Date","intlOpts","hour12","day","hour","minute","modified","assign","timeZoneName","intl","parsed","find","m","type","toLowerCase","value","without","format","included","diffed","substring","trimmed","replace","signedOffset","offHourStr","offMinuteStr","offHour","parseInt","offMin","offMinSigned","normalizeObject","normalizer","ignoreUnknown","normalized","u","hasOwnProperty","v","Number","isNaN","mapped","timeObject","s","l","d2","DATE_SHORT","DATE_MED","DATE_FULL","DATE_HUGE","weekday","TIME_SIMPLE","TIME_WITH_SECONDS","second","TIME_WITH_SHORT_OFFSET","TIME_WITH_LONG_OFFSET","TIME_24_SIMPLE","TIME_24_WITH_SECONDS","TIME_24_WITH_SHORT_OFFSET","TIME_24_WITH_LONG_OFFSET","DATETIME_SHORT","DATETIME_SHORT_WITH_SECONDS","DATETIME_MED","DATETIME_MED_WITH_SECONDS","DATETIME_FULL","DATETIME_FULL_WITH_SECONDS","DATETIME_HUGE","DATETIME_HUGE_WITH_SECONDS","stringify","JSON","sort","monthsLong","monthsShort","monthsNarrow","months","weekdaysLong","weekdaysShort","weekdaysNarrow","weekdays","meridiems","erasLong","erasShort","erasNarrow","eras","meridiemForDateTime","dt","weekdayForDateTime","monthForDateTime","eraForDateTime","formatString","knownFormat","filtered","key","dateTimeHuge","Formats","LuxonError","Error","InvalidDateTimeError","constructor","reason","toMessage","InvalidIntervalError","InvalidDurationError","ConflictingSpecificationError","InvalidUnitError","unit","InvalidArgumentError","ZoneIsAbstractError","Zone","name","universal","offsetName","opts","offset","equals","otherZone","isValid","singleton","LocalZone","instance","resolvedOptions","getTimezoneOffset","dtfCache","makeDTF","zone","typeToPos","hackyOffset","dtf","formatted","exec","fMonth","fDay","fYear","fHour","fMinute","fSecond","partsOffset","filled","i","pos","IANAZone","isValidSpecifier","match","isValidZone","e","parseGMTOffset","specifier","zoneName","valid","asUTC","UTC","asTS","valueOf","hoursMinutesOffset","z","hours","trunc","fixed","minutes","abs","sign","base","FixedOffsetZone","utcInstance","parseSpecifier","r","InvalidZone","normalizeZone","defaultZone","lowered","now","defaultLocale","defaultNumberingSystem","defaultOutputCalendar","throwOnInvalid","Settings","defaultZoneName","numberingSystem","outputCalendar","t","resetCaches","Locale","resetCache","stringifyTokens","splits","tokenToString","token","literal","val","tokenToObject","D","DD","DDD","DDDD","tt","ttt","tttt","T","TT","TTT","TTTT","ff","fff","ffff","F","FF","FFF","FFFF","Formatter","create","parseFormat","fmt","current","currentFull","bracketed","c","charAt","push","formatOpts","loc","systemLoc","formatWithSystemDefault","redefaultToSystem","df","dtFormatter","formatDateTime","formatDateTimeParts","num","p","forceSimple","padTo","numberFormatter","formatDateTimeFromString","knownEnglish","listingMode","string","extract","formatOffset","isOffsetFixed","allowZ","RangeError","meridiem","English","standalone","maybeMacro","macro","era","outputCal","millisecond","offsetNameShort","offsetNameLong","weekNumber","ordinal","quarter","formatDurationFromString","dur","tokenToField","lildur","get","tokens","realTokens","found","concat","collapsed","shiftTo","map","filter","intlDTCache","getCachedDTF","locString","intlNumCache","getCachendINF","inf","NumberFormat","sysLocaleCache","systemLocale","computedSys","parseLocaleString","localeStr","uIndex","indexOf","options","smaller","calendar","intlConfigString","mapMonths","ms","DateTime","utc","mapWeekdays","listStuff","defaultOK","englishFn","intlFn","mode","supportsFastNumbers","startsWith","SimpleNumberFormatter","IntlNumberFormatter","useGrouping","minimumIntegerDigits","PolyDateFormatter","fromMillis","toJSDate","tokenFormat","fromOpts","defaultToEN","specifiedLocale","localeR","numberingSystemR","outputCalendarR","fromObject","numbering","parsedLocale","parsedNumberingSystem","parsedOutputCalendar","weekdaysCache","monthsCache","meridiemCache","eraCache","fastNumbersCached","fastNumbers","hasFTP","isActuallyEn","hasNoWeirdness","clone","alts","getOwnPropertyNames","redefaultToEN","formatStr","field","results","matching","other","combineRegexes","regexes","full","source","RegExp","combineExtractors","extractors","mergedVals","mergedZone","cursor","ex","parse","patterns","regex","extractor","simpleParse","ret","offsetRegex","isoTimeBaseRegex","isoTimeRegex","isoTimeExtensionRegex","isoYmdRegex","isoWeekRegex","isoOrdinalRegex","extractISOWeekData","extractISOOrdinalData","sqlYmdRegex","sqlTimeRegex","sqlTimeExtensionRegex","extractISOYmd","item","extractISOTime","extractISOOffset","local","fullOffset","extractIANAZone","isoDuration","extractISODuration","yearStr","monthStr","dayStr","hourStr","minuteStr","secondStr","millisecondsStr","weekStr","years","weeks","days","seconds","milliseconds","obsOffsets","GMT","EDT","EST","CDT","CST","MDT","MST","PDT","PST","fromStrings","weekdayStr","result","rfc2822","extractRFC2822","obsOffset","milOffset","preprocessRFC2822","trim","rfc1123","rfc850","ascii","extractRFC1123Or850","extractASCII","parseISODate","parseRFC2822Date","parseHTTPDate","parseISODuration","parseSQL","Invalid","explanation","INVALID","lowOrderMatrix","casualMatrix","quarters","daysInYearAccurate","daysInMonthAccurate","accurateMatrix","orderedUnits","reverseUnits","reverse","clear","conf","values","conversionAccuracy","Duration","antiTrunc","ceil","convert","matrix","fromMap","fromUnit","toMap","toUnit","conv","raw","sameSign","added","normalizeValues","vals","previous","config","accurate","invalid","isLuxonDuration","count","normalizeUnit","fromISO","text","week","isDuration","toFormat","fmtOpts","toObject","includeConfig","toISO","toJSON","as","plus","duration","friendlyDuration","minus","negate","set","mixed","reconfigure","normalize","units","built","accumulated","lastUnit","own","ak","down","negated","invalidReason","invalidExplanation","durationish","validateStartEnd","start","end","Interval","isLuxonInterval","fromDateTimes","builtStart","friendlyDateTime","builtEnd","after","before","split","isInterval","toDuration","startOf","diff","hasSame","isEmpty","isAfter","dateTime","isBefore","contains","splitAt","dateTimes","sorted","splitBy","divideEqually","numberOfParts","overlaps","abutsStart","abutsEnd","engulfs","intersection","union","merge","intervals","final","b","sofar","xor","currentCount","ends","time","flattened","difference","dateFormat","separator","Info","hasDST","proto","setZone","isValidIANAZone","monthsFormat","weekdaysFormat","features","intlTokens","zones","dayDiff","earlier","later","utcDayStart","toUTC","keepLocalTime","highOrderDiffs","differs","lowestOrder","highWater","differ","delta","remainingMillis","lowerOrderUnits","MISSING_FTP","intUnit","post","deser","fixListRegex","stripInsensitivities","oneOf","strings","startIndex","join","findIndex","groups","h","simple","unitForToken","one","two","three","four","oneOrTwo","oneToThree","twoToFour","unitate","buildRegex","re","handlers","matches","all","matchIndex","dateTimeFromMatches","toField","Z","G","y","S","explainFromTokens","disqualifyingUnit","regexString","rawMatches","parseFromTokens","nonLeapLadder","leapLadder","unitOutOfRange","dayOfWeek","js","getUTCDay","computeOrdinal","uncomputeOrdinal","table","month0","gregorianToWeek","gregObj","weekToGregorian","weekData","weekdayOfJan4","yearInDays","gregorianToOrdinal","gregData","ordinalToGregorian","ordinalData","hasInvalidWeekData","validYear","validWeek","validWeekday","hasInvalidOrdinalData","validOrdinal","hasInvalidGregorianData","validMonth","validDay","hasInvalidTimeData","validHour","validMinute","validSecond","validMillisecond","secon","unsupportedZone","possiblyCachedWeekData","inst","old","fixOffset","localTS","tz","utcGuess","o2","o3","min","max","tsToObj","d","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","objToLocalTS","setUTCFullYear","objToTS","adjustTime","oPre","millisToAdd","parseDataToDateTime","parsedZone","interpretationZone","toTechFormat","toTechTimeFormat","suppressSeconds","suppressMilliseconds","includeOffset","includeZone","spaceZone","defaultUnitValues","defaultWeekUnitValues","defaultOrdinalUnitValues","orderedWeekUnits","orderedOrdinalUnits","weeknumber","weeksnumber","weeknumbers","weekyear","weekyears","quickDT","tsNow","offsetProvis","unchanged","isLuxonDateTime","fromJSDate","fromSeconds","zoneToUse","containsOrdinal","containsGregorYear","containsGregorMD","containsGregor","definiteWeekDef","useWeekData","defaultValues","objNow","foundFirst","higherOrderInvalid","gregorian","tsFinal","offsetFinal","fromRFC2822","fromHTTP","fromFormat","localeToUse","fromString","fromSQL","isDateTime","monthShort","monthLong","weekdayShort","weekdayLong","isInDST","isInLeapYear","resolvedLocaleOpts","toLocal","keepCalendarTime","newTS","setLocale","settingWeekStuff","normalizedUnit","q","endOf","toLocaleString","toLocaleParts","toISODate","toISOTime","toISOWeekDate","toRFC2822","toHTTP","toSQLDate","toSQLTime","toSQL","toMillis","toSeconds","toBSON","otherDateTime","otherIsLater","diffNow","until","inputMs","fromFormatExplain","fromStringExplain","dateTimeish"],"mappings":"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"}