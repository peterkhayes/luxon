[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/datetime.js",
    "content": "import Duration, { friendlyDuration } from \"./duration\";\nimport Interval from \"./interval\";\nimport Settings from \"./settings\";\nimport Info from \"./info\";\nimport Formatter from \"./impl/formatter\";\nimport FixedOffsetZone from \"./zones/fixedOffsetZone\";\nimport LocalZone from \"./zones/localZone\";\nimport Locale from \"./impl/locale\";\nimport {\n  isUndefined,\n  maybeArray,\n  isDate,\n  isNumber,\n  bestBy,\n  daysInMonth,\n  daysInYear,\n  isLeapYear,\n  weeksInWeekYear,\n  normalizeObject\n} from \"./impl/util\";\nimport { normalizeZone } from \"./impl/zoneUtil\";\nimport diff from \"./impl/diff\";\nimport { parseRFC2822Date, parseISODate, parseHTTPDate, parseSQL } from \"./impl/regexParser\";\nimport { parseFromTokens, explainFromTokens } from \"./impl/tokenParser\";\nimport {\n  gregorianToWeek,\n  weekToGregorian,\n  gregorianToOrdinal,\n  ordinalToGregorian,\n  hasInvalidGregorianData,\n  hasInvalidWeekData,\n  hasInvalidOrdinalData,\n  hasInvalidTimeData\n} from \"./impl/conversions\";\nimport * as Formats from \"./impl/formats\";\nimport {\n  InvalidArgumentError,\n  ConflictingSpecificationError,\n  InvalidUnitError,\n  InvalidDateTimeError\n} from \"./errors\";\nimport Invalid from \"./impl/invalid\";\n\nconst INVALID = \"Invalid DateTime\";\n\nfunction unsupportedZone(zone) {\n  return new Invalid(\"unsupported zone\", `the zone \"${zone.name}\" is not supported`);\n}\n\n// we cache week data on the DT object and this intermediates the cache\nfunction possiblyCachedWeekData(dt) {\n  if (dt.weekData === null) {\n    dt.weekData = gregorianToWeek(dt.c);\n  }\n  return dt.weekData;\n}\n\n// clone really means, \"make a new object with these modifications\". all \"setters\" really use this\n// to create a new object while only changing some of the properties\nfunction clone(inst, alts) {\n  const current = {\n    ts: inst.ts,\n    zone: inst.zone,\n    c: inst.c,\n    o: inst.o,\n    loc: inst.loc,\n    invalid: inst.invalid\n  };\n  return new DateTime(Object.assign({}, current, alts, { old: current }));\n}\n\n// find the right offset a given local time. The o input is our guess, which determines which\n// offset we'll pick in ambiguous cases (e.g. there are two 3 AMs b/c Fallback DST)\nfunction fixOffset(localTS, o, tz) {\n  // Our UTC time is just a guess because our offset is just a guess\n  let utcGuess = localTS - o * 60 * 1000;\n\n  // Test whether the zone matches the offset for this ts\n  const o2 = tz.offset(utcGuess);\n\n  // If so, offset didn't change and we're done\n  if (o === o2) {\n    return [utcGuess, o];\n  }\n\n  // If not, change the ts by the difference in the offset\n  utcGuess -= (o2 - o) * 60 * 1000;\n\n  // If that gives us the local time we want, we're done\n  const o3 = tz.offset(utcGuess);\n  if (o2 === o3) {\n    return [utcGuess, o2];\n  }\n\n  // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time\n  return [localTS - Math.min(o2, o3) * 60 * 1000, Math.max(o2, o3)];\n}\n\n// convert an epoch timestamp into a calendar object with the given offset\nfunction tsToObj(ts, offset) {\n  ts += offset * 60 * 1000;\n\n  const d = new Date(ts);\n\n  return {\n    year: d.getUTCFullYear(),\n    month: d.getUTCMonth() + 1,\n    day: d.getUTCDate(),\n    hour: d.getUTCHours(),\n    minute: d.getUTCMinutes(),\n    second: d.getUTCSeconds(),\n    millisecond: d.getUTCMilliseconds()\n  };\n}\n\n// covert a calendar object to a local timestamp (epoch, but with the offset baked in)\nfunction objToLocalTS(obj) {\n  let d = Date.UTC(\n    obj.year,\n    obj.month - 1,\n    obj.day,\n    obj.hour,\n    obj.minute,\n    obj.second,\n    obj.millisecond\n  );\n\n  // for legacy reasons, years between 0 and 99 are interpreted as 19XX; revert that\n  if (obj.year < 100 && obj.year >= 0) {\n    d = new Date(d);\n    d.setUTCFullYear(obj.year);\n  }\n  return +d;\n}\n\n// convert a calendar object to a epoch timestamp\nfunction objToTS(obj, offset, zone) {\n  return fixOffset(objToLocalTS(obj), offset, zone);\n}\n\n// create a new DT instance by adding a duration, adjusting for DSTs\nfunction adjustTime(inst, dur) {\n  const oPre = inst.o,\n    year = inst.c.year + dur.years,\n    month = inst.c.month + dur.months + dur.quarters * 3,\n    c = Object.assign({}, inst.c, {\n      year,\n      month,\n      day: Math.min(inst.c.day, daysInMonth(year, month)) + dur.days + dur.weeks * 7\n    }),\n    millisToAdd = Duration.fromObject({\n      hours: dur.hours,\n      minutes: dur.minutes,\n      seconds: dur.seconds,\n      milliseconds: dur.milliseconds\n    }).as(\"milliseconds\"),\n    localTS = objToLocalTS(c);\n\n  let [ts, o] = fixOffset(localTS, oPre, inst.zone);\n\n  if (millisToAdd !== 0) {\n    ts += millisToAdd;\n    // that could have changed the offset by going over a DST, but we want to keep the ts the same\n    o = inst.zone.offset(ts);\n  }\n\n  return { ts, o };\n}\n\n// helper useful in turning the results of parsing into real dates\n// by handling the zone options\nfunction parseDataToDateTime(parsed, parsedZone, opts, format, text) {\n  const { setZone, zone } = opts;\n  if (parsed && Object.keys(parsed).length !== 0) {\n    const interpretationZone = parsedZone || zone,\n      inst = DateTime.fromObject(\n        Object.assign(parsed, opts, {\n          zone: interpretationZone\n        })\n      );\n    return setZone ? inst : inst.setZone(zone);\n  } else {\n    return DateTime.invalid(\n      new Invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ${format}`)\n    );\n  }\n}\n\n// if you want to output a technical format (e.g. RFC 2822), this helper\n// helps handle the details\nfunction toTechFormat(dt, format) {\n  return dt.isValid\n    ? Formatter.create(Locale.create(\"en-US\"), {\n        allowZ: true,\n        forceSimple: true\n      }).formatDateTimeFromString(dt, format)\n    : null;\n}\n\n// technical time formats (e.g. the time part of ISO 8601), take some options\n// and this commonizes their handling\nfunction toTechTimeFormat(\n  dt,\n  {\n    suppressSeconds = false,\n    suppressMilliseconds = false,\n    includeOffset = true,\n    includeZone = false,\n    spaceZone = false\n  }\n) {\n  let fmt = \"HH:mm\";\n\n  if (!suppressSeconds || dt.second !== 0 || dt.millisecond !== 0) {\n    fmt += \":ss\";\n    if (!suppressMilliseconds || dt.millisecond !== 0) {\n      fmt += \".SSS\";\n    }\n  }\n\n  if ((includeZone || includeOffset) && spaceZone) {\n    fmt += \" \";\n  }\n\n  if (includeZone) {\n    fmt += \"z\";\n  } else if (includeOffset) {\n    fmt += \"ZZ\";\n  }\n\n  return toTechFormat(dt, fmt);\n}\n\n// defaults for unspecified units in the supported calendars\nconst defaultUnitValues = {\n    month: 1,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  },\n  defaultWeekUnitValues = {\n    weekNumber: 1,\n    weekday: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  },\n  defaultOrdinalUnitValues = {\n    ordinal: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  };\n\n// Units in the supported calendars, sorted by bigness\nconst orderedUnits = [\"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\", \"millisecond\"],\n  orderedWeekUnits = [\n    \"weekYear\",\n    \"weekNumber\",\n    \"weekday\",\n    \"hour\",\n    \"minute\",\n    \"second\",\n    \"millisecond\"\n  ],\n  orderedOrdinalUnits = [\"year\", \"ordinal\", \"hour\", \"minute\", \"second\", \"millisecond\"];\n\n// standardize case and plurality in units\nfunction normalizeUnit(unit, ignoreUnknown = false) {\n  const normalized = {\n    year: \"year\",\n    years: \"year\",\n    month: \"month\",\n    months: \"month\",\n    day: \"day\",\n    days: \"day\",\n    hour: \"hour\",\n    hours: \"hour\",\n    minute: \"minute\",\n    minutes: \"minute\",\n    second: \"second\",\n    seconds: \"second\",\n    millisecond: \"millisecond\",\n    milliseconds: \"millisecond\",\n    weekday: \"weekday\",\n    weekdays: \"weekday\",\n    weeknumber: \"weekNumber\",\n    weeksnumber: \"weekNumber\",\n    weeknumbers: \"weekNumber\",\n    weekyear: \"weekYear\",\n    weekyears: \"weekYear\",\n    ordinal: \"ordinal\"\n  }[unit ? unit.toLowerCase() : unit];\n\n  if (!ignoreUnknown && !normalized) throw new InvalidUnitError(unit);\n\n  return normalized;\n}\n\n// this is a dumbed down version of fromObject() that runs about 60% faster\n// but doesn't do any validation, makes a bunch of assumptions about what units\n// are present, and so on.\nfunction quickDT(obj, zone) {\n  // assume we have the higher-order units\n  for (const u of orderedUnits) {\n    if (isUndefined(obj[u])) {\n      obj[u] = defaultUnitValues[u];\n    }\n  }\n\n  const invalid = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);\n  if (invalid) {\n    return DateTime.invalid(invalid);\n  }\n\n  const tsNow = Settings.now(),\n    offsetProvis = zone.offset(tsNow),\n    [ts, o] = objToTS(obj, offsetProvis, zone);\n\n  return new DateTime({\n    ts,\n    zone,\n    o\n  });\n}\n\n/**\n * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.\n *\n * A DateTime comprises of:\n * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.\n * * A time zone. Each instance is considered in the context of a specific zone (by default the local system's zone).\n * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.\n *\n * Here is a brief overview of the most commonly used functionality it provides:\n *\n * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link local}, {@link utc}, and (most flexibly) {@link fromObject}. To create one from a standard string format, use {@link fromISO}, {@link fromHTTP}, and {@link fromRFC2822}. To create one from a custom string format, use {@link fromFormat}. To create one from a native JS date, use {@link fromJSDate}.\n * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link toObject}), use the {@link year}, {@link month},\n * {@link day}, {@link hour}, {@link minute}, {@link second}, {@link millisecond} accessors.\n * * **Week calendar**: For ISO week calendar attributes, see the {@link weekYear}, {@link weekNumber}, and {@link weekday} accessors.\n * * **Configuration** See the {@link locale} and {@link numberingSystem} accessors.\n * * **Transformation**: To transform the DateTime into other DateTimes, use {@link set}, {@link reconfigure}, {@link setZone}, {@link setLocale}, {@link plus}, {@link minus}, {@link endOf}, {@link startOf}, {@link toUTC}, and {@link toLocal}.\n * * **Output**: To convert the DateTime to other representations, use the {@link toJSON}, {@link toISO}, {@link toHTTP}, {@link toObject}, {@link toRFC2822}, {@link toString}, {@link toLocaleString}, {@link toFormat}, {@link toMillis} and {@link toJSDate}.\n *\n * There's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.\n */\nexport default class DateTime {\n  /**\n   * @access private\n   */\n  constructor(config) {\n    const zone = config.zone || Settings.defaultZone,\n      invalid =\n        config.invalid ||\n        (Number.isNaN(config.ts) ? new Invalid(\"invalid input\") : null) ||\n        (!zone.isValid ? unsupportedZone(zone) : null);\n    /**\n     * @access private\n     */\n    this.ts = isUndefined(config.ts) ? Settings.now() : config.ts;\n\n    let c = null,\n      o = null;\n    if (!invalid) {\n      const unchanged = config.old && config.old.ts === this.ts && config.old.zone.equals(zone);\n      c = unchanged ? config.old.c : tsToObj(this.ts, zone.offset(this.ts));\n      o = unchanged ? config.old.o : zone.offset(this.ts);\n    }\n\n    /**\n     * @access private\n     */\n    this.zone = zone;\n    /**\n     * @access private\n     */\n    this.loc = config.loc || Locale.create();\n    /**\n     * @access private\n     */\n    this.invalid = invalid;\n    /**\n     * @access private\n     */\n    this.weekData = null;\n    /**\n     * @access private\n     */\n    this.c = c;\n    /**\n     * @access private\n     */\n    this.o = o;\n    /**\n     * @access private\n     */\n    this.isLuxonDateTime = true;\n  }\n\n  // CONSTRUCT\n\n  /**\n   * Create a local DateTime\n   * @param {number} year - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used\n   * @param {number} [month=1] - The month, 1-indexed\n   * @param {number} [day=1] - The day of the month\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\n   * @param {number} [minute=0] - The minute of the hour, i.e. a number between 0 and 59\n   * @param {number} [second=0] - The second of the minute, i.e. a number between 0 and 59\n   * @param {number} [millisecond=0] - The millisecond of the second, i.e. a number between 0 and 999\n   * @example DateTime.local()                            //~> now\n   * @example DateTime.local(2017)                        //~> 2017-01-01T00:00:00\n   * @example DateTime.local(2017, 3)                     //~> 2017-03-01T00:00:00\n   * @example DateTime.local(2017, 3, 12)                 //~> 2017-03-12T00:00:00\n   * @example DateTime.local(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00\n   * @example DateTime.local(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.765\n   * @return {DateTime}\n   */\n  static local(year, month, day, hour, minute, second, millisecond) {\n    if (isUndefined(year)) {\n      return new DateTime({ ts: Settings.now() });\n    } else {\n      return quickDT(\n        {\n          year,\n          month,\n          day,\n          hour,\n          minute,\n          second,\n          millisecond\n        },\n        Settings.defaultZone\n      );\n    }\n  }\n\n  /**\n   * Create a DateTime in UTC\n   * @param {number} year - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used\n   * @param {number} [month=1] - The month, 1-indexed\n   * @param {number} [day=1] - The day of the month\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\n   * @param {number} [minute=0] - The minute of the hour, i.e. a number between 0 and 59\n   * @param {number} [second=0] - The second of the minute, i.e. a number between 0 and 59\n   * @param {number} [millisecond=0] - The millisecond of the second, i.e. a number between 0 and 999\n   * @example DateTime.utc()                            //~> now\n   * @example DateTime.utc(2017)                        //~> 2017-01-01T00:00:00Z\n   * @example DateTime.utc(2017, 3)                     //~> 2017-03-01T00:00:00Z\n   * @example DateTime.utc(2017, 3, 12)                 //~> 2017-03-12T00:00:00Z\n   * @example DateTime.utc(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.765Z\n   * @return {DateTime}\n   */\n  static utc(year, month, day, hour, minute, second, millisecond) {\n    if (isUndefined(year)) {\n      return new DateTime({\n        ts: Settings.now(),\n        zone: FixedOffsetZone.utcInstance\n      });\n    } else {\n      return quickDT(\n        {\n          year,\n          month,\n          day,\n          hour,\n          minute,\n          second,\n          millisecond\n        },\n        FixedOffsetZone.utcInstance\n      );\n    }\n  }\n\n  /**\n   * Create a DateTime from a Javascript Date object. Uses the default zone.\n   * @param {Date} date - a Javascript Date object\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @return {DateTime}\n   */\n  static fromJSDate(date, options = {}) {\n    return new DateTime({\n      ts: isDate(date) ? date.valueOf() : NaN,\n      zone: normalizeZone(options.zone, Settings.defaultZone),\n      loc: Locale.fromObject(options)\n    });\n  }\n\n  /**\n   * Create a DateTime from a number of milliseconds since the epoch (i.e. since 1 January 1970 00:00:00 UTC). Uses the default zone.\n   * @param {number} milliseconds - a number of milliseconds since 1970 UTC\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromMillis(milliseconds, options = {}) {\n    if (!isNumber(milliseconds)) {\n      throw new InvalidArgumentError(\"fromMillis requires a numerical input\");\n    } else {\n      return new DateTime({\n        ts: milliseconds,\n        zone: normalizeZone(options.zone, Settings.defaultZone),\n        loc: Locale.fromObject(options)\n      });\n    }\n  }\n\n  /**\n   * Create a DateTime from a number of seconds since the epoch (i.e. since 1 January 1970 00:00:00 UTC). Uses the default zone.\n   * @param {number} seconds - a number of seconds since 1970 UTC\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromSeconds(seconds, options = {}) {\n    if (!isNumber(seconds)) {\n      throw new InvalidArgumentError(\"fromSeconds requires a numerical input\");\n    } else {\n      return new DateTime({\n        ts: seconds * 1000,\n        zone: normalizeZone(options.zone, Settings.defaultZone),\n        loc: Locale.fromObject(options)\n      });\n    }\n  }\n\n  /**\n   * Create a DateTime from a Javascript object with keys like 'year' and 'hour' with reasonable defaults.\n   * @param {Object} obj - the object to create the DateTime from\n   * @param {number} obj.year - a year, such as 1987\n   * @param {number} obj.month - a month, 1-12\n   * @param {number} obj.day - a day of the month, 1-31, depending on the month\n   * @param {number} obj.ordinal - day of the year, 1-365 or 366\n   * @param {number} obj.weekYear - an ISO week year\n   * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year\n   * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday\n   * @param {number} obj.hour - hour of the day, 0-23\n   * @param {number} obj.minute - minute of the hour, 0-59\n   * @param {number} obj.second - second of the minute, 0-59\n   * @param {number} obj.millisecond - millisecond of the second, 0-999\n   * @param {string|Zone} [obj.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()\n   * @param {string} [obj.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} obj.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} obj.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'\n   * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01T00'\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'utc' }),\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'local' })\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'America/New_York' })\n   * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'\n   * @return {DateTime}\n   */\n  static fromObject(obj) {\n    const zoneToUse = normalizeZone(obj.zone, Settings.defaultZone);\n    if (!zoneToUse.isValid) {\n      return DateTime.invalid(unsupportedZone(zoneToUse));\n    }\n\n    const tsNow = Settings.now(),\n      offsetProvis = zoneToUse.offset(tsNow),\n      normalized = normalizeObject(obj, normalizeUnit, true),\n      containsOrdinal = !isUndefined(normalized.ordinal),\n      containsGregorYear = !isUndefined(normalized.year),\n      containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day),\n      containsGregor = containsGregorYear || containsGregorMD,\n      definiteWeekDef = normalized.weekYear || normalized.weekNumber,\n      loc = Locale.fromObject(obj);\n\n    // cases:\n    // just a weekday -> this week's instance of that weekday, no worries\n    // (gregorian data or ordinal) + (weekYear or weekNumber) -> error\n    // (gregorian month or day) + ordinal -> error\n    // otherwise just use weeks or ordinals or gregorian, depending on what's specified\n\n    if ((containsGregor || containsOrdinal) && definiteWeekDef) {\n      throw new ConflictingSpecificationError(\n        \"Can't mix weekYear/weekNumber units with year/month/day or ordinals\"\n      );\n    }\n\n    if (containsGregorMD && containsOrdinal) {\n      throw new ConflictingSpecificationError(\"Can't mix ordinal dates with month/day\");\n    }\n\n    const useWeekData = definiteWeekDef || (normalized.weekday && !containsGregor);\n\n    // configure ourselves to deal with gregorian dates or week stuff\n    let units,\n      defaultValues,\n      objNow = tsToObj(tsNow, offsetProvis);\n    if (useWeekData) {\n      units = orderedWeekUnits;\n      defaultValues = defaultWeekUnitValues;\n      objNow = gregorianToWeek(objNow);\n    } else if (containsOrdinal) {\n      units = orderedOrdinalUnits;\n      defaultValues = defaultOrdinalUnitValues;\n      objNow = gregorianToOrdinal(objNow);\n    } else {\n      units = orderedUnits;\n      defaultValues = defaultUnitValues;\n    }\n\n    // set default values for missing stuff\n    let foundFirst = false;\n    for (const u of units) {\n      const v = normalized[u];\n      if (!isUndefined(v)) {\n        foundFirst = true;\n      } else if (foundFirst) {\n        normalized[u] = defaultValues[u];\n      } else {\n        normalized[u] = objNow[u];\n      }\n    }\n\n    // make sure the values we have are in range\n    const higherOrderInvalid = useWeekData\n        ? hasInvalidWeekData(normalized)\n        : containsOrdinal\n          ? hasInvalidOrdinalData(normalized)\n          : hasInvalidGregorianData(normalized),\n      invalid = higherOrderInvalid || hasInvalidTimeData(normalized);\n\n    if (invalid) {\n      return DateTime.invalid(invalid);\n    }\n\n    // compute the actual time\n    const gregorian = useWeekData\n        ? weekToGregorian(normalized)\n        : containsOrdinal\n          ? ordinalToGregorian(normalized)\n          : normalized,\n      [tsFinal, offsetFinal] = objToTS(gregorian, offsetProvis, zoneToUse),\n      inst = new DateTime({\n        ts: tsFinal,\n        zone: zoneToUse,\n        o: offsetFinal,\n        loc\n      });\n\n    // gregorian data + weekday serves only to validate\n    if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {\n      return DateTime.invalid(\n        \"mismatched weekday\",\n        `you can't specify both a weekday of ${normalized.weekday} and a date of ${inst.toISO()}`\n      );\n    }\n\n    return inst;\n  }\n\n  /**\n   * Create a DateTime from an ISO 8601 string\n   * @param {string} text - the ISO string\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123')\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})\n   * @example DateTime.fromISO('2016-W05-4')\n   * @return {DateTime}\n   */\n  static fromISO(text, opts = {}) {\n    const [vals, parsedZone] = parseISODate(text);\n    return parseDataToDateTime(vals, parsedZone, opts, \"ISO 8601\", text);\n  }\n\n  /**\n   * Create a DateTime from an RFC 2822 string\n   * @param {string} text - the RFC 2822 string\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\n   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')\n   * @example DateTime.fromRFC2822('Tue, 25 Nov 2016 13:23:12 +0600')\n   * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')\n   * @return {DateTime}\n   */\n  static fromRFC2822(text, opts = {}) {\n    const [vals, parsedZone] = parseRFC2822Date(text);\n    return parseDataToDateTime(vals, parsedZone, opts, \"RFC 2822\", text);\n  }\n\n  /**\n   * Create a DateTime from an HTTP header date\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\n   * @param {string} text - the HTTP header date\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\n   * @param {boolean} [opts.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.\n   * @param {string} [opts.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')\n   * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')\n   * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')\n   * @return {DateTime}\n   */\n  static fromHTTP(text, opts = {}) {\n    const [vals, parsedZone] = parseHTTPDate(text);\n    return parseDataToDateTime(vals, parsedZone, opts, \"HTTP\", opts);\n  }\n\n  /**\n   * Create a DateTime from an input string and format string\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale\n   * @param {string} text - the string to parse\n   * @param {string} fmt - the format the string is expected to be in (see description)\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale\n   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromFormat(text, fmt, opts = {}) {\n    if (isUndefined(text) || isUndefined(fmt)) {\n      throw new InvalidArgumentError(\"fromFormat requires an input string and a format\");\n    }\n\n    const { locale = null, numberingSystem = null } = opts,\n      localeToUse = Locale.fromOpts({ locale, numberingSystem, defaultToEN: true }),\n      [vals, parsedZone, invalid] = parseFromTokens(localeToUse, text, fmt);\n    if (invalid) {\n      return DateTime.invalid(invalid);\n    } else {\n      return parseDataToDateTime(vals, parsedZone, opts, `format ${fmt}`, text);\n    }\n  }\n\n  /**\n   * @deprecated use fromFormat instead\n   */\n  static fromString(text, fmt, opts = {}) {\n    return DateTime.fromFormat(text, fmt, opts);\n  }\n\n  /**\n   * Create a DateTime from a SQL date, time, or datetime\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale\n   * @param {string} text - the string to parse\n   * @param {Object} opts - options to affect the creation\n   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale\n   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @example DateTime.fromSQL('2017-05-15')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })\n   * @example DateTime.fromSQL('09:12:34.342')\n   * @return {DateTime}\n   */\n  static fromSQL(text, opts = {}) {\n    const [vals, parsedZone] = parseSQL(text);\n    return parseDataToDateTime(vals, parsedZone, opts, \"SQL\", text);\n  }\n\n  /**\n   * Create an invalid DateTime.\n   * @param {string} reason - simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {DateTime}\n   */\n  static invalid(reason, explanation = null) {\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the DateTime is invalid\");\n    }\n\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (Settings.throwOnInvalid) {\n      throw new InvalidDateTimeError(invalid);\n    } else {\n      return new DateTime({ invalid });\n    }\n  }\n\n  /**\n   * Check if an object is a DateTime. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n  static isDateTime(o) {\n    return o.isLuxonDateTime;\n  }\n\n  // INFO\n\n  /**\n   * Get the value of unit.\n   * @param {string} unit - a unit such as 'minute' or 'day'\n   * @example DateTime.local(2017, 7, 4).get('month'); //=> 7\n   * @example DateTime.local(2017, 7, 4).get('day'); //=> 4\n   * @return {number}\n   */\n  get(unit) {\n    return this[unit];\n  }\n\n  /**\n   * Returns whether the DateTime is valid. Invalid DateTimes occur when:\n   * * The DateTime was created from invalid calendar information, such as the 13th month or February 30\n   * * The DateTime was created by an operation on another invalid date\n   * @type {boolean}\n   */\n  get isValid() {\n    return this.invalid === null;\n  }\n\n  /**\n   * Returns an error code if this DateTime is invalid, or null if the DateTime is valid\n   * @type {string}\n   */\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n\n  /**\n   * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid\n   * @type {string}\n   */\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n\n  /**\n   * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime\n   *\n   * @type {string}\n   */\n  get locale() {\n    return this.isValid ? this.loc.locale : null;\n  }\n\n  /**\n   * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime\n   *\n   * @type {string}\n   */\n  get numberingSystem() {\n    return this.isValid ? this.loc.numberingSystem : null;\n  }\n\n  /**\n   * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime\n   *\n   * @type {string}\n   */\n  get outputCalendar() {\n    return this.isValid ? this.loc.outputCalendar : null;\n  }\n\n  /**\n   * Get the name of the time zone.\n   * @type {string}\n   */\n  get zoneName() {\n    return this.isValid ? this.zone.name : null;\n  }\n\n  /**\n   * Get the year\n   * @example DateTime.local(2017, 5, 25).year //=> 2017\n   * @type {number}\n   */\n  get year() {\n    return this.isValid ? this.c.year : NaN;\n  }\n\n  /**\n   * Get the quarter\n   * @example DateTime.local(2017, 5, 25).quarter //=> 2\n   * @type {number}\n   */\n  get quarter() {\n    return this.isValid ? Math.ceil(this.c.month / 3) : NaN;\n  }\n\n  /**\n   * Get the month (1-12).\n   * @example DateTime.local(2017, 5, 25).month //=> 5\n   * @type {number}\n   */\n  get month() {\n    return this.isValid ? this.c.month : NaN;\n  }\n\n  /**\n   * Get the day of the month (1-30ish).\n   * @example DateTime.local(2017, 5, 25).day //=> 25\n   * @type {number}\n   */\n  get day() {\n    return this.isValid ? this.c.day : NaN;\n  }\n\n  /**\n   * Get the hour of the day (0-23).\n   * @example DateTime.local(2017, 5, 25, 9).hour //=> 9\n   * @type {number}\n   */\n  get hour() {\n    return this.isValid ? this.c.hour : NaN;\n  }\n\n  /**\n   * Get the minute of the hour (0-59).\n   * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30\n   * @type {number}\n   */\n  get minute() {\n    return this.isValid ? this.c.minute : NaN;\n  }\n\n  /**\n   * Get the second of the minute (0-59).\n   * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52\n   * @type {number}\n   */\n  get second() {\n    return this.isValid ? this.c.second : NaN;\n  }\n\n  /**\n   * Get the millisecond of the second (0-999).\n   * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654\n   * @type {number}\n   */\n  get millisecond() {\n    return this.isValid ? this.c.millisecond : NaN;\n  }\n\n  /**\n   * Get the week year\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2014, 11, 31).weekYear //=> 2015\n   * @type {number}\n   */\n  get weekYear() {\n    return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;\n  }\n\n  /**\n   * Get the week number of the week year (1-52ish).\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2017, 5, 25).weekNumber //=> 21\n   * @type {number}\n   */\n  get weekNumber() {\n    return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;\n  }\n\n  /**\n   * Get the day of the week.\n   * 1 is Monday and 7 is Sunday\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2014, 11, 31).weekday //=> 4\n   * @type {number}\n   */\n  get weekday() {\n    return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;\n  }\n\n  /**\n   * Get the ordinal (i.e. the day of the year)\n   * @example DateTime.local(2017, 5, 25).ordinal //=> 145\n   * @type {number|DateTime}\n   */\n  get ordinal() {\n    return this.isValid ? gregorianToOrdinal(this.c).ordinal : NaN;\n  }\n\n  /**\n   * Get the human readable short month name, such as 'Oct'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).monthShort //=> Oct\n   * @type {string}\n   */\n  get monthShort() {\n    return this.isValid ? Info.months(\"short\", { locale: this.locale })[this.month - 1] : null;\n  }\n\n  /**\n   * Get the human readable long month name, such as 'October'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).monthLong //=> October\n   * @type {string}\n   */\n  get monthLong() {\n    return this.isValid ? Info.months(\"long\", { locale: this.locale })[this.month - 1] : null;\n  }\n\n  /**\n   * Get the human readable short weekday, such as 'Mon'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon\n   * @type {string}\n   */\n  get weekdayShort() {\n    return this.isValid ? Info.weekdays(\"short\", { locale: this.locale })[this.weekday - 1] : null;\n  }\n\n  /**\n   * Get the human readable long weekday, such as 'Monday'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday\n   * @type {string}\n   */\n  get weekdayLong() {\n    return this.isValid ? Info.weekdays(\"long\", { locale: this.locale })[this.weekday - 1] : null;\n  }\n\n  /**\n   * Get the UTC offset of this DateTime in minutes\n   * @example DateTime.local().offset //=> -240\n   * @example DateTime.utc().offset //=> 0\n   * @type {number}\n   */\n  get offset() {\n    return this.isValid ? this.zone.offset(this.ts) : NaN;\n  }\n\n  /**\n   * Get the short human name for the zone's current offset, for example \"EST\" or \"EDT\".\n   * Defaults to the system's locale if no locale has been specified\n   * @type {string}\n   */\n  get offsetNameShort() {\n    if (this.isValid) {\n      return this.zone.offsetName(this.ts, {\n        format: \"short\",\n        locale: this.locale\n      });\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get the long human name for the zone's current offset, for example \"Eastern Standard Time\" or \"Eastern Daylight Time\".\n   * Defaults to the system's locale if no locale has been specified\n   * @type {string}\n   */\n  get offsetNameLong() {\n    if (this.isValid) {\n      return this.zone.offsetName(this.ts, {\n        format: \"long\",\n        locale: this.locale\n      });\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get whether this zone's offset ever changes, as in a DST.\n   * @type {boolean}\n   */\n  get isOffsetFixed() {\n    return this.isValid ? this.zone.universal : null;\n  }\n\n  /**\n   * Get whether the DateTime is in a DST.\n   * @type {boolean}\n   */\n  get isInDST() {\n    if (this.isOffsetFixed) {\n      return false;\n    } else {\n      return (\n        this.offset > this.set({ month: 1 }).offset || this.offset > this.set({ month: 5 }).offset\n      );\n    }\n  }\n\n  /**\n   * Returns true if this DateTime is in a leap year, false otherwise\n   * @example DateTime.local(2016).isInLeapYear //=> true\n   * @example DateTime.local(2013).isInLeapYear //=> false\n   * @type {boolean}\n   */\n  get isInLeapYear() {\n    return isLeapYear(this.year);\n  }\n\n  /**\n   * Returns the number of days in this DateTime's month\n   * @example DateTime.local(2016, 2).daysInMonth //=> 29\n   * @example DateTime.local(2016, 3).daysInMonth //=> 31\n   * @type {number}\n   */\n  get daysInMonth() {\n    return daysInMonth(this.year, this.month);\n  }\n\n  /**\n   * Returns the number of days in this DateTime's year\n   * @example DateTime.local(2016).daysInYear //=> 366\n   * @example DateTime.local(2013).daysInYear //=> 365\n   * @type {number}\n   */\n  get daysInYear() {\n    return this.isValid ? daysInYear(this.year) : NaN;\n  }\n\n  /**\n   * Returns the number of weeks in this DateTime's year\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2004).weeksInWeekYear //=> 53\n   * @example DateTime.local(2013).weeksInWeekYear //=> 52\n   * @type {number}\n   */\n  get weeksInWeekYear() {\n    return this.isValid ? weeksInWeekYear(this.weekYear) : NaN;\n  }\n\n  /**\n   * Returns the resolved Intl options for this DateTime.\n   * This is useful in understanding the behavior of formatting methods\n   * @param {Object} opts - the same options as toLocaleString\n   * @return {Object}\n   */\n  resolvedLocaleOpts(opts = {}) {\n    const { locale, numberingSystem, calendar } = Formatter.create(\n      this.loc.clone(opts),\n      opts\n    ).resolvedOptions(this);\n    return { locale, numberingSystem, outputCalendar: calendar };\n  }\n\n  // TRANSFORM\n\n  /**\n   * \"Set\" the DateTime's zone to UTC. Returns a newly-constructed DateTime.\n   *\n   * Equivalent to {@link setZone}('utc')\n   * @param {number} [offset=0] - optionally, an offset from UTC in minutes\n   * @param {Object} [opts={}] - options to pass to `setZone()`\n   * @return {DateTime}\n   */\n  toUTC(offset = 0, opts = {}) {\n    return this.setZone(FixedOffsetZone.instance(offset), opts);\n  }\n\n  /**\n   * \"Set\" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.\n   *\n   * Equivalent to `setZone('local')`\n   * @return {DateTime}\n   */\n  toLocal() {\n    return this.setZone(new LocalZone());\n  }\n\n  /**\n   * \"Set\" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.\n   *\n   * By default, the setter keeps the underlying time the same (as in, the same UTC timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link plus}. You may wish to use {@link toLocal} and {@link toUTC} which provide simple convenience wrappers for commonly used zones.\n   * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'utc+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link Zone} class.\n   * @param {Object} opts - options\n   * @param {boolean} [opts.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.\n   * @return {DateTime}\n   */\n  setZone(zone, { keepLocalTime = false, keepCalendarTime = false } = {}) {\n    zone = normalizeZone(zone, Settings.defaultZone);\n    if (zone.equals(this.zone)) {\n      return this;\n    } else if (!zone.isValid) {\n      return DateTime.invalid(unsupportedZone(zone));\n    } else {\n      const newTS =\n        keepLocalTime || keepCalendarTime // keepCalendarTime is the deprecated name for keepLocalTime\n          ? this.ts + (this.o - zone.offset(this.ts)) * 60 * 1000\n          : this.ts;\n      return clone(this, { ts: newTS, zone });\n    }\n  }\n\n  /**\n   * \"Set\" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.\n   * @param {Object} properties - the properties to set\n   * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })\n   * @return {DateTime}\n   */\n  reconfigure({ locale, numberingSystem, outputCalendar } = {}) {\n    const loc = this.loc.clone({ locale, numberingSystem, outputCalendar });\n    return clone(this, { loc });\n  }\n\n  /**\n   * \"Set\" the locale. Returns a newly-constructed DateTime.\n   * Just a convenient alias for reconfigure({ locale })\n   * @example DateTime.local(2017, 5, 25).setLocale('en-GB')\n   * @return {DateTime}\n   */\n  setLocale(locale) {\n    return this.reconfigure({ locale });\n  }\n\n  /**\n   * \"Set\" the values of specified units. Returns a newly-constructed DateTime.\n   * You can only set units with this method; for \"setting\" metadata, see {@link reconfigure} and {@link setZone}.\n   * @param {Object} values - a mapping of units to numbers\n   * @example dt.set({ year: 2017 })\n   * @example dt.set({ hour: 8, minute: 30 })\n   * @example dt.set({ weekday: 5 })\n   * @example dt.set({ year: 2005, ordinal: 234 })\n   * @return {DateTime}\n   */\n  set(values) {\n    if (!this.isValid) return this;\n\n    const normalized = normalizeObject(values, normalizeUnit),\n      settingWeekStuff =\n        !isUndefined(normalized.weekYear) ||\n        !isUndefined(normalized.weekNumber) ||\n        !isUndefined(normalized.weekday);\n\n    let mixed;\n    if (settingWeekStuff) {\n      mixed = weekToGregorian(Object.assign(gregorianToWeek(this.c), normalized));\n    } else if (!isUndefined(normalized.ordinal)) {\n      mixed = ordinalToGregorian(Object.assign(gregorianToOrdinal(this.c), normalized));\n    } else {\n      mixed = Object.assign(this.toObject(), normalized);\n\n      // if we didn't set the day but we ended up on an overflow date,\n      // use the last day of the right month\n      if (isUndefined(normalized.day)) {\n        mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);\n      }\n    }\n\n    const [ts, o] = objToTS(mixed, this.o, this.zone);\n    return clone(this, { ts, o });\n  }\n\n  /**\n   * Add a period of time to this DateTime and return the resulting DateTime\n   *\n   * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.\n   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @example DateTime.local().plus(123) //~> in 123 milliseconds\n   * @example DateTime.local().plus({ minutes: 15 }) //~> in 15 minutes\n   * @example DateTime.local().plus({ days: 1 }) //~> this time tomorrow\n   * @example DateTime.local().plus({ days: -1 }) //~> this time yesterday\n   * @example DateTime.local().plus({ hours: 3, minutes: 13 }) //~> in 1 hr, 13 min\n   * @example DateTime.local().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 1 hr, 13 min\n   * @return {DateTime}\n   */\n  plus(duration) {\n    if (!this.isValid) return this;\n    const dur = friendlyDuration(duration);\n    return clone(this, adjustTime(this, dur));\n  }\n\n  /**\n   * Subtract a period of time to this DateTime and return the resulting DateTime\n   * See {@link plus}\n   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   @return {DateTime}\n  */\n  minus(duration) {\n    if (!this.isValid) return this;\n    const dur = friendlyDuration(duration).negate();\n    return clone(this, adjustTime(this, dur));\n  }\n\n  /**\n   * \"Set\" this DateTime to the beginning of a unit of time.\n   * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'month', 'day', 'hour', 'minute', 'second', or 'millisecond'.\n   * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'\n   * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'\n   * @return {DateTime}\n   */\n  startOf(unit) {\n    if (!this.isValid) return this;\n    const o = {},\n      normalizedUnit = Duration.normalizeUnit(unit);\n    switch (normalizedUnit) {\n      case \"years\":\n        o.month = 1;\n      // falls through\n      case \"quarters\":\n      case \"months\":\n        o.day = 1;\n      // falls through\n      case \"weeks\":\n      case \"days\":\n        o.hour = 0;\n      // falls through\n      case \"hours\":\n        o.minute = 0;\n      // falls through\n      case \"minutes\":\n        o.second = 0;\n      // falls through\n      case \"seconds\":\n        o.millisecond = 0;\n        break;\n      case \"milliseconds\":\n        break;\n      default:\n        throw new InvalidUnitError(unit);\n    }\n\n    if (normalizedUnit === \"weeks\") {\n      o.weekday = 1;\n    }\n\n    if (normalizedUnit === \"quarters\") {\n      const q = Math.ceil(this.month / 3);\n      o.month = (q - 1) * 3 + 1;\n    }\n\n    return this.set(o);\n  }\n\n  /**\n   * \"Set\" this DateTime to the end (i.e. the last millisecond) of a unit of time\n   * @param {string} unit - The unit to go to the end of. Can be 'year', 'month', 'day', 'hour', 'minute', 'second', or 'millisecond'.\n   * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'\n   * @return {DateTime}\n   */\n  endOf(unit) {\n    return this.isValid\n      ? this.startOf(unit)\n          .plus({ [unit]: 1 })\n          .minus(1)\n      : this;\n  }\n\n  // OUTPUT\n\n  /**\n   * Returns a string representation of this DateTime formatted according to the specified format string.\n   * **You may not want this.** See {@link toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/docs/manual/formatting.html#table-of-tokens).\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale.\n   * @see https://moment.github.io/luxon/docs/manual/formatting.html#table-of-tokens\n   * @param {string} fmt - the format string\n   * @param {Object} opts - opts to override the configuration options\n   * @example DateTime.local().toFormat('yyyy LLL dd') //=> '2017 Apr 22'\n   * @example DateTime.local().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'\n   * @example DateTime.local().toFormat('yyyy LLL dd', { locale: \"fr\" }) //=> '2017 avr. 22'\n   * @example DateTime.local().toFormat(\"HH 'hours and' mm 'minutes'\") //=> '20 hours and 55 minutes'\n   * @return {string}\n   */\n  toFormat(fmt, opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt)\n      : INVALID;\n  }\n\n  /**\n   * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.\n   * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation.\n   * of the DateTime in the assigned locale.\n   * Defaults to the system's locale if no locale has been specified\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param opts {Object} - Intl.DateTimeFormat constructor options and configuration options\n   * @example DateTime.local().toLocaleString(); //=> 4/20/2017\n   * @example DateTime.local().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'\n   * @example DateTime.local().toLocaleString({ locale: \"en-gb\" }); //=> '20/04/2017'\n   * @example DateTime.local().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'\n   * @example DateTime.local().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'\n   * @example DateTime.local().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'\n   * @example DateTime.local().toLocaleString({weekday: 'long', month: 'long', day: '2-digit'}); //=> 'Thu, Apr 20'\n   * @example DateTime.local().toLocaleString({weekday: 'long', month: 'long', day: '2-digit', hour: '2-digit', minute: '2-digit'}); //=> 'Thu, Apr 20, 11:27'\n   * @example DateTime.local().toLocaleString({hour: '2-digit', minute: '2-digit'}); //=> '11:32'\n   * @return {string}\n   */\n  toLocaleString(opts = Formats.DATE_SHORT) {\n    return this.isValid\n      ? Formatter.create(this.loc.clone(opts), opts).formatDateTime(this)\n      : INVALID;\n  }\n\n  /**\n   * Returns an array of format \"parts\", i.e. individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.\n   * Defaults to the system's locale if no locale has been specified\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts\n   * @param opts {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.\n   * @example DateTime.local().toLocaleString(); //=> [\n   *                                    //=>   { type: 'day', value: '25' },\n   *                                    //=>   { type: 'literal', value: '/' },\n   *                                    //=>   { type: 'month', value: '05' },\n   *                                    //=>   { type: 'literal', value: '/' },\n   *                                    //=>   { type: 'year', value: '1982' }\n   *                                    //=> ]\n   */\n  toLocaleParts(opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this)\n      : [];\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime\n   * @param {Object} opts - options\n   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0\n   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @example DateTime.utc(1982, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'\n   * @example DateTime.local().toISO() //=> '2017-04-22T20:47:05.335-04:00'\n   * @example DateTime.local().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'\n   * @return {string}\n   */\n  toISO(opts = {}) {\n    if (!this.isValid) {\n      return null;\n    }\n\n    return `${this.toISODate()}T${this.toISOTime(opts)}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's date component\n   * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'\n   * @return {string}\n   */\n  toISODate() {\n    return toTechFormat(this, \"yyyy-MM-dd\");\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's week date\n   * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'\n   * @return {string}\n   */\n  toISOWeekDate() {\n    return toTechFormat(this, \"kkkk-'W'WW-c\");\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's time component\n   * @param {Object} opts - options\n   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0\n   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @example DateTime.utc().hour(7).minute(34).toISOTime() //=> '07:34:19.361Z'\n   * @example DateTime.utc().hour(7).minute(34).toISOTime({ suppressSeconds: true }) //=> '07:34Z'\n   * @return {string}\n   */\n  toISOTime({ suppressMilliseconds = false, suppressSeconds = false, includeOffset = true } = {}) {\n    return toTechTimeFormat(this, { suppressSeconds, suppressMilliseconds, includeOffset });\n  }\n\n  /**\n   * Returns an RFC 2822-compatible string representation of this DateTime, always in UTC\n   * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'\n   * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'\n   * @return {string}\n   */\n  toRFC2822() {\n    return toTechFormat(this, \"EEE, dd LLL yyyy HH:mm:ss ZZZ\");\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in HTTP headers.\n   * Specifically, the string conforms to RFC 1123.\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\n   * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'\n   * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'\n   * @return {string}\n   */\n  toHTTP() {\n    return toTechFormat(this.toUTC(), \"EEE, dd LLL yyyy HH:mm:ss 'GMT'\");\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL Date\n   * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'\n   * @return {string}\n   */\n  toSQLDate() {\n    return toTechFormat(this, \"yyyy-MM-dd\");\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL Time\n   * @param {Object} opts - options\n   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overides includeOffset.\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @example DateTime.utc().toSQL() //=> '05:15:16.345'\n   * @example DateTime.local().toSQL() //=> '05:15:16.345 -04:00'\n   * @example DateTime.local().toSQL({ includeOffset: false }) //=> '05:15:16.345'\n   * @example DateTime.local().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'\n   * @return {string}\n   */\n  toSQLTime({ includeOffset = true, includeZone = false } = {}) {\n    return toTechTimeFormat(this, { includeOffset, includeZone, spaceZone: true });\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL DateTime\n   * @param {Object} opts - options\n   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'\n   * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'\n   * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'\n   * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'\n   * @return {string}\n   */\n  toSQL(opts = {}) {\n    if (!this.isValid) {\n      return null;\n    }\n\n    return `${this.toSQLDate()} ${this.toSQLTime(opts)}`;\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for debugging\n   * @return {string}\n   */\n  toString() {\n    return this.isValid ? this.toISO() : INVALID;\n  }\n\n  /**\n   * Returns the epoch milliseconds of this DateTime. Alias of {@link toMillis}\n   * @return {number}\n   */\n  valueOf() {\n    return this.toMillis();\n  }\n\n  /**\n   * Returns the epoch milliseconds of this DateTime.\n   * @return {number}\n   */\n  toMillis() {\n    return this.isValid ? this.ts : NaN;\n  }\n\n  /**\n   * Returns the epoch seconds of this DateTime.\n   * @return {number}\n   */\n  toSeconds() {\n    return this.isValid ? Math.floor(this.ts / 1000) : NaN;\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.\n   * @return {string}\n   */\n  toJSON() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns a BSON serializable equivalent to this DateTime.\n   * @return {Date}\n   */\n  toBSON() {\n    return this.toJSDate();\n  }\n\n  /**\n   * Returns a Javascript object with this DateTime's year, month, day, and so on.\n   * @param opts - options for generating the object\n   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output\n   * @example DateTime.local().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }\n   * @return {Object}\n   */\n  toObject(opts = {}) {\n    if (!this.isValid) return {};\n\n    const base = Object.assign({}, this.c);\n\n    if (opts.includeConfig) {\n      base.outputCalendar = this.outputCalendar;\n      base.numberingSystem = this.loc.numberingSystem;\n      base.locale = this.loc.locale;\n    }\n    return base;\n  }\n\n  /**\n   * Returns a Javascript Date equivalent to this DateTime.\n   * @return {Date}\n   */\n  toJSDate() {\n    return new Date(this.isValid ? this.ts : NaN);\n  }\n\n  // COMPARE\n\n  /**\n   * Return the difference between two DateTimes as a Duration.\n   * @param {DateTime} otherDateTime - the DateTime to compare this one to\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example\n   * var i1 = DateTime.fromISO('1982-05-25T09:45'),\n   *     i2 = DateTime.fromISO('1983-10-14T10:30');\n   * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }\n   * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }\n   * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }\n   * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }\n   * @return {Duration}\n   */\n  diff(otherDateTime, unit = \"milliseconds\", opts = {}) {\n    if (!this.isValid || !otherDateTime.isValid)\n      return Duration.invalid(this.invalid || otherDateTime.invalid);\n\n    const units = maybeArray(unit).map(Duration.normalizeUnit),\n      otherIsLater = otherDateTime.valueOf() > this.valueOf(),\n      earlier = otherIsLater ? this : otherDateTime,\n      later = otherIsLater ? otherDateTime : this,\n      diffed = diff(earlier, later, units, opts);\n\n    return otherIsLater ? diffed.negate() : diffed;\n  }\n\n  /**\n   * Return the difference between this DateTime and right now.\n   * See {@link diff}\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  diffNow(unit = \"milliseconds\", opts = {}) {\n    return this.diff(DateTime.local(), unit, opts);\n  }\n\n  /**\n   * Return an Interval spanning between this DateTime and another DateTime\n   * @param {DateTime} otherDateTime - the other end point of the Interval\n   * @return {Interval}\n   */\n  until(otherDateTime) {\n    return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;\n  }\n\n  /**\n   * Return whether this DateTime is in the same unit of time as another DateTime\n   * @param {DateTime} otherDateTime - the other DateTime\n   * @param {string} unit - the unit of time to check sameness on\n   * @example DateTime.local().hasSame(otherDT, 'day'); //~> true if both the same calendar day\n   * @return {boolean}\n   */\n  hasSame(otherDateTime, unit) {\n    if (!this.isValid) return false;\n    if (unit === \"millisecond\") {\n      return this.valueOf() === otherDateTime.valueOf();\n    } else {\n      const inputMs = otherDateTime.valueOf();\n      return this.startOf(unit) <= inputMs && inputMs <= this.endOf(unit);\n    }\n  }\n\n  /**\n   * Equality check\n   * Two DateTimes are equal iff they represent the same millisecond, have the same zone and location, and are both valid.\n   * To compare just the millisecond values, use `+dt1 === ~dt2`.\n   * @param {DateTime} other - the other DateTime\n   * @return {boolean}\n   */\n  equals(other) {\n    return (\n      this.isValid &&\n      other.isValid &&\n      this.valueOf() === other.valueOf() &&\n      this.zone.equals(other.zone) &&\n      this.loc.equals(other.loc)\n    );\n  }\n\n  /**\n   * Return the min of several date times\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum\n   * @return {DateTime} the min DateTime, or undefined if called with no argument\n   */\n  static min(...dateTimes) {\n    return bestBy(dateTimes, i => i.valueOf(), Math.min);\n  }\n\n  /**\n   * Return the max of several date times\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum\n   * @return {DateTime} the max DateTime, or undefined if called with no argument\n   */\n  static max(...dateTimes) {\n    return bestBy(dateTimes, i => i.valueOf(), Math.max);\n  }\n\n  // MISC\n\n  /**\n   * Explain how a string would be parsed by fromFormat()\n   * @param {string} text - the string to parse\n   * @param {string} fmt - the format the string is expected to be in (see description)\n   * @param {Object} options - options taken by fromFormat()\n   * @return {Object}\n   */\n  static fromFormatExplain(text, fmt, options = {}) {\n    const { locale = null, numberingSystem = null } = options,\n      localeToUse = Locale.fromOpts({ locale, numberingSystem, defaultToEN: true });\n    return explainFromTokens(localeToUse, text, fmt);\n  }\n\n  /**\n   * @deprecated use fromFormatExplain instead\n   */\n  static fromStringExplain(text, fmt, options = {}) {\n    return DateTime.fromFormatExplain(text, fmt, options);\n  }\n\n  // FORMAT PRESETS\n\n  /**\n   * {@link toLocaleString} format like 10/14/1983\n   * @type {Object}\n   */\n  static get DATE_SHORT() {\n    return Formats.DATE_SHORT;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Oct 14, 1983'\n   * @type {Object}\n   */\n  static get DATE_MED() {\n    return Formats.DATE_MED;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'October 14, 1983'\n   * @type {Object}\n   */\n  static get DATE_FULL() {\n    return Formats.DATE_FULL;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Tuesday, October 14, 1983'\n   * @type {Object}\n   */\n  static get DATE_HUGE() {\n    return Formats.DATE_HUGE;\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_SIMPLE() {\n    return Formats.TIME_SIMPLE;\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_WITH_SECONDS() {\n    return Formats.TIME_WITH_SECONDS;\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_WITH_SHORT_OFFSET() {\n    return Formats.TIME_WITH_SHORT_OFFSET;\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get TIME_WITH_LONG_OFFSET() {\n    return Formats.TIME_WITH_LONG_OFFSET;\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_SIMPLE() {\n    return Formats.TIME_24_SIMPLE;\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_WITH_SECONDS() {\n    return Formats.TIME_24_WITH_SECONDS;\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 EDT', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_WITH_SHORT_OFFSET() {\n    return Formats.TIME_24_WITH_SHORT_OFFSET;\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.\n   * @type {Object}\n   */\n  static get TIME_24_WITH_LONG_OFFSET() {\n    return Formats.TIME_24_WITH_LONG_OFFSET;\n  }\n\n  /**\n   * {@link toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_SHORT() {\n    return Formats.DATETIME_SHORT;\n  }\n\n  /**\n   * {@link toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_SHORT_WITH_SECONDS() {\n    return Formats.DATETIME_SHORT_WITH_SECONDS;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_MED() {\n    return Formats.DATETIME_MED;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_MED_WITH_SECONDS() {\n    return Formats.DATETIME_MED_WITH_SECONDS;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_FULL() {\n    return Formats.DATETIME_FULL;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_FULL_WITH_SECONDS() {\n    return Formats.DATETIME_FULL_WITH_SECONDS;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_HUGE() {\n    return Formats.DATETIME_HUGE;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   * @type {Object}\n   */\n  static get DATETIME_HUGE_WITH_SECONDS() {\n    return Formats.DATETIME_HUGE_WITH_SECONDS;\n  }\n}\n\n/**\n * @private\n */\nexport function friendlyDateTime(dateTimeish) {\n  if (DateTime.isDateTime(dateTimeish)) {\n    return dateTimeish;\n  } else if (dateTimeish && dateTimeish.valueOf && isNumber(dateTimeish.valueOf())) {\n    return DateTime.fromJSDate(dateTimeish);\n  } else if (dateTimeish && typeof dateTimeish === \"object\") {\n    return DateTime.fromObject(dateTimeish);\n  } else {\n    throw new InvalidArgumentError(\n      `Unknown datetime argument: ${dateTimeish}, of type ${typeof dateTimeish}`\n    );\n  }\n}\n",
    "static": true,
    "longname": "/Users/peterkhayes/Remix/luxon/src/datetime.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "INVALID",
    "memberof": "src/datetime.js",
    "static": true,
    "longname": "src/datetime.js~INVALID",
    "access": "public",
    "export": false,
    "importPath": "luxon/src/datetime.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": ["string"]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "function",
    "name": "unsupportedZone",
    "memberof": "src/datetime.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~unsupportedZone",
    "access": "public",
    "export": false,
    "importPath": "luxon/src/datetime.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "zone",
        "types": ["*"]
      }
    ],
    "return": {
      "types": ["*"]
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "possiblyCachedWeekData",
    "memberof": "src/datetime.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~possiblyCachedWeekData",
    "access": "public",
    "export": false,
    "importPath": "luxon/src/datetime.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [
      {
        "name": "dt",
        "types": ["*"]
      }
    ],
    "return": {
      "types": ["*"]
    },
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "function",
    "name": "clone",
    "memberof": "src/datetime.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~clone",
    "access": "public",
    "export": false,
    "importPath": "luxon/src/datetime.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [
      {
        "name": "inst",
        "types": ["*"]
      },
      {
        "name": "alts",
        "types": ["*"]
      }
    ],
    "return": {
      "types": ["*"]
    },
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "function",
    "name": "fixOffset",
    "memberof": "src/datetime.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~fixOffset",
    "access": "public",
    "export": false,
    "importPath": "luxon/src/datetime.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [
      {
        "name": "localTS",
        "types": ["*"]
      },
      {
        "name": "o",
        "types": ["*"]
      },
      {
        "name": "tz",
        "types": ["*"]
      }
    ],
    "return": {
      "types": ["undefined[]"]
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "function",
    "name": "tsToObj",
    "memberof": "src/datetime.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~tsToObj",
    "access": "public",
    "export": false,
    "importPath": "luxon/src/datetime.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "params": [
      {
        "name": "ts",
        "types": ["*"]
      },
      {
        "name": "offset",
        "types": ["*"]
      }
    ],
    "return": {
      "types": [
        "{\"year\": *, \"month\": *, \"day\": *, \"hour\": *, \"minute\": *, \"second\": *, \"millisecond\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 55,
    "kind": "function",
    "name": "objToLocalTS",
    "memberof": "src/datetime.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~objToLocalTS",
    "access": "public",
    "export": false,
    "importPath": "luxon/src/datetime.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": ["*"]
      }
    ],
    "return": {
      "types": ["*"]
    },
    "ignore": true
  },
  {
    "__docId__": 56,
    "kind": "function",
    "name": "objToTS",
    "memberof": "src/datetime.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~objToTS",
    "access": "public",
    "export": false,
    "importPath": "luxon/src/datetime.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 137,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": ["*"]
      },
      {
        "name": "offset",
        "types": ["*"]
      },
      {
        "name": "zone",
        "types": ["*"]
      }
    ],
    "return": {
      "types": ["*"]
    },
    "ignore": true
  },
  {
    "__docId__": 57,
    "kind": "function",
    "name": "adjustTime",
    "memberof": "src/datetime.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~adjustTime",
    "access": "public",
    "export": false,
    "importPath": "luxon/src/datetime.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 142,
    "undocument": true,
    "params": [
      {
        "name": "inst",
        "types": ["*"]
      },
      {
        "name": "dur",
        "types": ["*"]
      }
    ],
    "return": {
      "types": ["{\"ts\": *, \"o\": *}"]
    },
    "ignore": true
  },
  {
    "__docId__": 58,
    "kind": "function",
    "name": "parseDataToDateTime",
    "memberof": "src/datetime.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~parseDataToDateTime",
    "access": "public",
    "export": false,
    "importPath": "luxon/src/datetime.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 172,
    "undocument": true,
    "params": [
      {
        "name": "parsed",
        "types": ["*"]
      },
      {
        "name": "parsedZone",
        "types": ["*"]
      },
      {
        "name": "opts",
        "types": ["*"]
      },
      {
        "name": "format",
        "types": ["*"]
      },
      {
        "name": "text",
        "types": ["*"]
      }
    ],
    "return": {
      "types": ["*"]
    },
    "ignore": true
  },
  {
    "__docId__": 59,
    "kind": "function",
    "name": "toTechFormat",
    "memberof": "src/datetime.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~toTechFormat",
    "access": "public",
    "export": false,
    "importPath": "luxon/src/datetime.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 191,
    "undocument": true,
    "params": [
      {
        "name": "dt",
        "types": ["*"]
      },
      {
        "name": "format",
        "types": ["*"]
      }
    ],
    "return": {
      "types": ["*"]
    },
    "ignore": true
  },
  {
    "__docId__": 60,
    "kind": "function",
    "name": "toTechTimeFormat",
    "memberof": "src/datetime.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~toTechTimeFormat",
    "access": "public",
    "export": false,
    "importPath": "luxon/src/datetime.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 202,
    "undocument": true,
    "params": [
      {
        "name": "dt",
        "types": ["*"]
      },
      {
        "name": "objectPattern1",
        "types": [
          "{\"suppressSeconds\": *, \"suppressMilliseconds\": *, \"includeOffset\": *, \"includeZone\": *, \"spaceZone\": *}"
        ],
        "defaultRaw": {
          "suppressSeconds": null,
          "suppressMilliseconds": null,
          "includeOffset": null,
          "includeZone": null,
          "spaceZone": null
        },
        "defaultValue": "{\"suppressSeconds\":null,\"suppressMilliseconds\":null,\"includeOffset\":null,\"includeZone\":null,\"spaceZone\":null}"
      }
    ],
    "return": {
      "types": ["*"]
    },
    "ignore": true
  },
  {
    "__docId__": 61,
    "kind": "variable",
    "name": "defaultUnitValues",
    "memberof": "src/datetime.js",
    "static": true,
    "longname": "src/datetime.js~defaultUnitValues",
    "access": "public",
    "export": false,
    "importPath": "luxon/src/datetime.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 235,
    "undocument": true,
    "type": {
      "types": [
        "{\"month\": number, \"day\": number, \"hour\": *, \"minute\": *, \"second\": *, \"millisecond\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 62,
    "kind": "variable",
    "name": "orderedUnits",
    "memberof": "src/datetime.js",
    "static": true,
    "longname": "src/datetime.js~orderedUnits",
    "access": "public",
    "export": false,
    "importPath": "luxon/src/datetime.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 260,
    "undocument": true,
    "type": {
      "types": ["string[]"]
    },
    "ignore": true
  },
  {
    "__docId__": 63,
    "kind": "function",
    "name": "normalizeUnit",
    "memberof": "src/datetime.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~normalizeUnit",
    "access": "public",
    "export": false,
    "importPath": "luxon/src/datetime.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 273,
    "undocument": true,
    "params": [
      {
        "name": "unit",
        "types": ["*"]
      },
      {
        "name": "ignoreUnknown",
        "optional": true,
        "types": ["boolean"],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": {
      "types": ["*"]
    },
    "ignore": true
  },
  {
    "__docId__": 64,
    "kind": "function",
    "name": "quickDT",
    "memberof": "src/datetime.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~quickDT",
    "access": "public",
    "export": false,
    "importPath": "luxon/src/datetime.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 307,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": ["*"]
      },
      {
        "name": "zone",
        "types": ["*"]
      }
    ],
    "return": {
      "types": ["*"]
    },
    "ignore": true
  },
  {
    "__docId__": 65,
    "kind": "class",
    "name": "DateTime",
    "memberof": "src/datetime.js",
    "static": true,
    "longname": "src/datetime.js~DateTime",
    "access": "public",
    "export": true,
    "importPath": "luxon/src/datetime.js",
    "importStyle": "DateTime",
    "description": "A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.\n\nA DateTime comprises of:\n* A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.\n* A time zone. Each instance is considered in the context of a specific zone (by default the local system's zone).\n* Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.\n\nHere is a brief overview of the most commonly used functionality it provides:\n\n* **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link local}, {@link utc}, and (most flexibly) {@link fromObject}. To create one from a standard string format, use {@link fromISO}, {@link fromHTTP}, and {@link fromRFC2822}. To create one from a custom string format, use {@link fromFormat}. To create one from a native JS date, use {@link fromJSDate}.\n* **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link toObject}), use the {@link year}, {@link month},\n{@link day}, {@link hour}, {@link minute}, {@link second}, {@link millisecond} accessors.\n* **Week calendar**: For ISO week calendar attributes, see the {@link weekYear}, {@link weekNumber}, and {@link weekday} accessors.\n* **Configuration** See the {@link locale} and {@link numberingSystem} accessors.\n* **Transformation**: To transform the DateTime into other DateTimes, use {@link set}, {@link reconfigure}, {@link setZone}, {@link setLocale}, {@link plus}, {@link minus}, {@link endOf}, {@link startOf}, {@link toUTC}, and {@link toLocal}.\n* **Output**: To convert the DateTime to other representations, use the {@link toJSON}, {@link toISO}, {@link toHTTP}, {@link toObject}, {@link toRFC2822}, {@link toString}, {@link toLocaleString}, {@link toFormat}, {@link toMillis} and {@link toJSDate}.\n\nThere's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.",
    "lineNumber": 351,
    "interface": false
  },
  {
    "__docId__": 66,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#constructor",
    "access": "private",
    "description": "",
    "lineNumber": 355,
    "ignore": true
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "ts",
    "memberof": "src/datetime.js~DateTime",
    "static": false,
    "longname": "src/datetime.js~DateTime#ts",
    "access": "private",
    "description": "",
    "lineNumber": 364,
    "ignore": true,
    "type": {
      "types": ["*"]
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "zone",
    "memberof": "src/datetime.js~DateTime",
    "static": false,
    "longname": "src/datetime.js~DateTime#zone",
    "access": "private",
    "description": "",
    "lineNumber": 377,
    "ignore": true,
    "type": {
      "types": ["*"]
    }
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "loc",
    "memberof": "src/datetime.js~DateTime",
    "static": false,
    "longname": "src/datetime.js~DateTime#loc",
    "access": "private",
    "description": "",
    "lineNumber": 381,
    "ignore": true,
    "type": {
      "types": ["*"]
    }
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "invalid",
    "memberof": "src/datetime.js~DateTime",
    "static": false,
    "longname": "src/datetime.js~DateTime#invalid",
    "access": "private",
    "description": "",
    "lineNumber": 385,
    "ignore": true,
    "type": {
      "types": ["*"]
    }
  },
  {
    "__docId__": 71,
    "kind": "member",
    "name": "weekData",
    "memberof": "src/datetime.js~DateTime",
    "static": false,
    "longname": "src/datetime.js~DateTime#weekData",
    "access": "private",
    "description": "",
    "lineNumber": 389,
    "ignore": true,
    "type": {
      "types": ["*"]
    }
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "c",
    "memberof": "src/datetime.js~DateTime",
    "static": false,
    "longname": "src/datetime.js~DateTime#c",
    "access": "private",
    "description": "",
    "lineNumber": 393,
    "ignore": true,
    "type": {
      "types": ["*"]
    }
  },
  {
    "__docId__": 73,
    "kind": "member",
    "name": "o",
    "memberof": "src/datetime.js~DateTime",
    "static": false,
    "longname": "src/datetime.js~DateTime#o",
    "access": "private",
    "description": "",
    "lineNumber": 397,
    "ignore": true,
    "type": {
      "types": ["*"]
    }
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "isLuxonDateTime",
    "memberof": "src/datetime.js~DateTime",
    "static": false,
    "longname": "src/datetime.js~DateTime#isLuxonDateTime",
    "access": "private",
    "description": "",
    "lineNumber": 401,
    "ignore": true,
    "type": {
      "types": ["boolean"]
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "local",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.local",
    "access": "public",
    "description": "Create a local DateTime",
    "examples": [
      "DateTime.local()                            //~> now",
      "DateTime.local(2017)                        //~> 2017-01-01T00:00:00",
      "DateTime.local(2017, 3)                     //~> 2017-03-01T00:00:00",
      "DateTime.local(2017, 3, 12)                 //~> 2017-03-12T00:00:00",
      "DateTime.local(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00",
      "DateTime.local(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00",
      "DateTime.local(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10",
      "DateTime.local(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.765"
    ],
    "lineNumber": 425,
    "params": [
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": false,
        "name": "year",
        "description": "The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used"
      },
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "month",
        "description": "The month, 1-indexed"
      },
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "day",
        "description": "The day of the month"
      },
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "hour",
        "description": "The hour of the day, in 24-hour time"
      },
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "minute",
        "description": "The minute of the hour, i.e. a number between 0 and 59"
      },
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "second",
        "description": "The second of the minute, i.e. a number between 0 and 59"
      },
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "millisecond",
        "description": "The millisecond of the second, i.e. a number between 0 and 999"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["DateTime"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "utc",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.utc",
    "access": "public",
    "description": "Create a DateTime in UTC",
    "examples": [
      "DateTime.utc()                            //~> now",
      "DateTime.utc(2017)                        //~> 2017-01-01T00:00:00Z",
      "DateTime.utc(2017, 3)                     //~> 2017-03-01T00:00:00Z",
      "DateTime.utc(2017, 3, 12)                 //~> 2017-03-12T00:00:00Z",
      "DateTime.utc(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00Z",
      "DateTime.utc(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00Z",
      "DateTime.utc(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10Z",
      "DateTime.utc(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.765Z"
    ],
    "lineNumber": 463,
    "params": [
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": false,
        "name": "year",
        "description": "The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used"
      },
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "month",
        "description": "The month, 1-indexed"
      },
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "day",
        "description": "The day of the month"
      },
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "hour",
        "description": "The hour of the day, in 24-hour time"
      },
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "minute",
        "description": "The minute of the hour, i.e. a number between 0 and 59"
      },
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "second",
        "description": "The second of the minute, i.e. a number between 0 and 59"
      },
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "millisecond",
        "description": "The millisecond of the second, i.e. a number between 0 and 999"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["DateTime"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "fromJSDate",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.fromJSDate",
    "access": "public",
    "description": "Create a DateTime from a Javascript Date object. Uses the default zone.",
    "lineNumber": 492,
    "params": [
      {
        "nullable": null,
        "types": ["Date"],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "a Javascript Date object"
      },
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "configuration options for the DateTime"
      },
      {
        "nullable": null,
        "types": ["string", "Zone"],
        "spread": false,
        "optional": true,
        "defaultValue": "'local'",
        "defaultRaw": "'local'",
        "name": "options.zone",
        "description": "the zone to place the DateTime into"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["DateTime"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "fromMillis",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.fromMillis",
    "access": "public",
    "description": "Create a DateTime from a number of milliseconds since the epoch (i.e. since 1 January 1970 00:00:00 UTC). Uses the default zone.",
    "lineNumber": 510,
    "params": [
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": false,
        "name": "milliseconds",
        "description": "a number of milliseconds since 1970 UTC"
      },
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "configuration options for the DateTime"
      },
      {
        "nullable": null,
        "types": ["string", "Zone"],
        "spread": false,
        "optional": true,
        "defaultValue": "'local'",
        "defaultRaw": "'local'",
        "name": "options.zone",
        "description": "the zone to place the DateTime into"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "name": "options.locale",
        "description": "a locale to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "options.outputCalendar",
        "description": "the output calendar to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "options.numberingSystem",
        "description": "the numbering system to set on the resulting DateTime instance"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["DateTime"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "fromSeconds",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.fromSeconds",
    "access": "public",
    "description": "Create a DateTime from a number of seconds since the epoch (i.e. since 1 January 1970 00:00:00 UTC). Uses the default zone.",
    "lineNumber": 532,
    "params": [
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": false,
        "name": "seconds",
        "description": "a number of seconds since 1970 UTC"
      },
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "configuration options for the DateTime"
      },
      {
        "nullable": null,
        "types": ["string", "Zone"],
        "spread": false,
        "optional": true,
        "defaultValue": "'local'",
        "defaultRaw": "'local'",
        "name": "options.zone",
        "description": "the zone to place the DateTime into"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "name": "options.locale",
        "description": "a locale to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "options.outputCalendar",
        "description": "the output calendar to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "options.numberingSystem",
        "description": "the numbering system to set on the resulting DateTime instance"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["DateTime"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "fromObject",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.fromObject",
    "access": "public",
    "description": "Create a DateTime from a Javascript object with keys like 'year' and 'hour' with reasonable defaults.",
    "examples": [
      "DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'",
      "DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01T00'",
      "DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06",
      "DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'utc' }),",
      "DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'local' })",
      "DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'America/New_York' })",
      "DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'"
    ],
    "lineNumber": 571,
    "params": [
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "the object to create the DateTime from"
      },
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": false,
        "name": "obj.year",
        "description": "a year, such as 1987"
      },
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": false,
        "name": "obj.month",
        "description": "a month, 1-12"
      },
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": false,
        "name": "obj.day",
        "description": "a day of the month, 1-31, depending on the month"
      },
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": false,
        "name": "obj.ordinal",
        "description": "day of the year, 1-365 or 366"
      },
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": false,
        "name": "obj.weekYear",
        "description": "an ISO week year"
      },
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": false,
        "name": "obj.weekNumber",
        "description": "an ISO week number, between 1 and 52 or 53, depending on the year"
      },
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": false,
        "name": "obj.weekday",
        "description": "an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday"
      },
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": false,
        "name": "obj.hour",
        "description": "hour of the day, 0-23"
      },
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": false,
        "name": "obj.minute",
        "description": "minute of the hour, 0-59"
      },
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": false,
        "name": "obj.second",
        "description": "second of the minute, 0-59"
      },
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": false,
        "name": "obj.millisecond",
        "description": "millisecond of the second, 0-999"
      },
      {
        "nullable": null,
        "types": ["string", "Zone"],
        "spread": false,
        "optional": true,
        "defaultValue": "'local'",
        "defaultRaw": "'local'",
        "name": "obj.zone",
        "description": "interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "defaultValue": "'en-US'",
        "defaultRaw": "'en-US'",
        "name": "obj.locale",
        "description": "a locale to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "obj.outputCalendar",
        "description": "the output calendar to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "obj.numberingSystem",
        "description": "the numbering system to set on the resulting DateTime instance"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["DateTime"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "fromISO",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.fromISO",
    "access": "public",
    "description": "Create a DateTime from an ISO 8601 string",
    "examples": [
      "DateTime.fromISO('2016-05-25T09:08:34.123')",
      "DateTime.fromISO('2016-05-25T09:08:34.123+06:00')",
      "DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})",
      "DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})",
      "DateTime.fromISO('2016-W05-4')"
    ],
    "lineNumber": 688,
    "params": [
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "the ISO string"
      },
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "options to affect the creation"
      },
      {
        "nullable": null,
        "types": ["string", "Zone"],
        "spread": false,
        "optional": true,
        "defaultValue": "'local'",
        "defaultRaw": "'local'",
        "name": "opts.zone",
        "description": "use this zone if no offset is specified in the input string itself. Will also convert the time to this zone"
      },
      {
        "nullable": null,
        "types": ["boolean"],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "opts.setZone",
        "description": "override the zone with a fixed-offset zone specified in the string itself, if it specifies one"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "defaultValue": "'en-US'",
        "defaultRaw": "'en-US'",
        "name": "opts.locale",
        "description": "a locale to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "opts.outputCalendar",
        "description": "the output calendar to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "opts.numberingSystem",
        "description": "the numbering system to set on the resulting DateTime instance"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["DateTime"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "fromRFC2822",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.fromRFC2822",
    "access": "public",
    "description": "Create a DateTime from an RFC 2822 string",
    "examples": [
      "DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')",
      "DateTime.fromRFC2822('Tue, 25 Nov 2016 13:23:12 +0600')",
      "DateTime.fromRFC2822('25 Nov 2016 13:23 Z')"
    ],
    "lineNumber": 707,
    "params": [
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "the RFC 2822 string"
      },
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "options to affect the creation"
      },
      {
        "nullable": null,
        "types": ["string", "Zone"],
        "spread": false,
        "optional": true,
        "defaultValue": "'local'",
        "defaultRaw": "'local'",
        "name": "opts.zone",
        "description": "convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in."
      },
      {
        "nullable": null,
        "types": ["boolean"],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "opts.setZone",
        "description": "override the zone with a fixed-offset zone specified in the string itself, if it specifies one"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "defaultValue": "'en-US'",
        "defaultRaw": "'en-US'",
        "name": "opts.locale",
        "description": "a locale to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "opts.outputCalendar",
        "description": "the output calendar to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "opts.numberingSystem",
        "description": "the numbering system to set on the resulting DateTime instance"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["DateTime"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "fromHTTP",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.fromHTTP",
    "access": "public",
    "description": "Create a DateTime from an HTTP header date",
    "examples": [
      "DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')",
      "DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')",
      "DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')"
    ],
    "see": ["https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1"],
    "lineNumber": 727,
    "params": [
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "the HTTP header date"
      },
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "options to affect the creation"
      },
      {
        "nullable": null,
        "types": ["string", "Zone"],
        "spread": false,
        "optional": true,
        "defaultValue": "'local'",
        "defaultRaw": "'local'",
        "name": "opts.zone",
        "description": "convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in."
      },
      {
        "nullable": null,
        "types": ["boolean"],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "opts.setZone",
        "description": "override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods."
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "defaultValue": "'en-US'",
        "defaultRaw": "'en-US'",
        "name": "opts.locale",
        "description": "a locale to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "opts.outputCalendar",
        "description": "the output calendar to set on the resulting DateTime instance"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "opts.numberingSystem",
        "description": "the numbering system to set on the resulting DateTime instance"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["DateTime"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "fromFormat",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.fromFormat",
    "access": "public",
    "description": "Create a DateTime from an input string and format string\nDefaults to en-US if no locale has been specified, regardless of the system's locale",
    "lineNumber": 745,
    "params": [
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "the string to parse"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "fmt",
        "description": "the format the string is expected to be in (see description)"
      },
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "options to affect the creation"
      },
      {
        "nullable": null,
        "types": ["string", "Zone"],
        "spread": false,
        "optional": true,
        "defaultValue": "'local'",
        "defaultRaw": "'local'",
        "name": "opts.zone",
        "description": "use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone"
      },
      {
        "nullable": null,
        "types": ["boolean"],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "opts.setZone",
        "description": "override the zone with a zone specified in the string itself, if it specifies one"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "defaultValue": "'en-US'",
        "defaultRaw": "'en-US'",
        "name": "opts.locale",
        "description": "a locale string to use when parsing. Will also set the DateTime to this locale"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "opts.numberingSystem",
        "description": "the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "opts.outputCalendar",
        "description": "the output calendar to set on the resulting DateTime instance"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["DateTime"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "fromString",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.fromString",
    "access": "public",
    "description": "",
    "lineNumber": 763,
    "deprecated": "use fromFormat instead",
    "params": [
      {
        "name": "text",
        "types": ["*"]
      },
      {
        "name": "fmt",
        "types": ["*"]
      },
      {
        "name": "opts",
        "optional": true,
        "types": ["{}"],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": ["*"]
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "fromSQL",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.fromSQL",
    "access": "public",
    "description": "Create a DateTime from a SQL date, time, or datetime\nDefaults to en-US if no locale has been specified, regardless of the system's locale",
    "examples": [
      "DateTime.fromSQL('2017-05-15')",
      "DateTime.fromSQL('2017-05-15 09:12:34')",
      "DateTime.fromSQL('2017-05-15 09:12:34.342')",
      "DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')",
      "DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')",
      "DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })",
      "DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })",
      "DateTime.fromSQL('09:12:34.342')"
    ],
    "lineNumber": 787,
    "params": [
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "the string to parse"
      },
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "options to affect the creation"
      },
      {
        "nullable": null,
        "types": ["string", "Zone"],
        "spread": false,
        "optional": true,
        "defaultValue": "'local'",
        "defaultRaw": "'local'",
        "name": "opts.zone",
        "description": "use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone"
      },
      {
        "nullable": null,
        "types": ["boolean"],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "opts.setZone",
        "description": "override the zone with a zone specified in the string itself, if it specifies one"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "defaultValue": "'en-US'",
        "defaultRaw": "'en-US'",
        "name": "opts.locale",
        "description": "a locale string to use when parsing. Will also set the DateTime to this locale"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "opts.numberingSystem",
        "description": "the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "opts.outputCalendar",
        "description": "the output calendar to set on the resulting DateTime instance"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["DateTime"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "invalid",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.invalid",
    "access": "public",
    "description": "Create an invalid DateTime.",
    "lineNumber": 798,
    "params": [
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "reason",
        "description": "simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "explanation",
        "description": "longer explanation, may include parameters and other useful debugging information"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["DateTime"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "isDateTime",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.isDateTime",
    "access": "public",
    "description": "Check if an object is a DateTime. Works across context boundaries",
    "lineNumber": 817,
    "params": [
      {
        "nullable": null,
        "types": ["object"],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": ["boolean"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "get",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#get",
    "access": "public",
    "description": "Get the value of unit.",
    "examples": [
      "DateTime.local(2017, 7, 4).get('month'); //=> 7",
      "DateTime.local(2017, 7, 4).get('day'); //=> 4"
    ],
    "lineNumber": 830,
    "params": [
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "unit",
        "description": "a unit such as 'minute' or 'day'"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["number"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 90,
    "kind": "get",
    "name": "isValid",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#isValid",
    "access": "public",
    "description": "Returns whether the DateTime is valid. Invalid DateTimes occur when:\n* The DateTime was created from invalid calendar information, such as the 13th month or February 30\n* The DateTime was created by an operation on another invalid date",
    "lineNumber": 840,
    "type": {
      "nullable": null,
      "types": ["boolean"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 91,
    "kind": "get",
    "name": "invalidReason",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#invalidReason",
    "access": "public",
    "description": "Returns an error code if this DateTime is invalid, or null if the DateTime is valid",
    "lineNumber": 848,
    "type": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 92,
    "kind": "get",
    "name": "invalidExplanation",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#invalidExplanation",
    "access": "public",
    "description": "Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid",
    "lineNumber": 856,
    "type": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 93,
    "kind": "get",
    "name": "locale",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#locale",
    "access": "public",
    "description": "Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime",
    "lineNumber": 865,
    "type": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 94,
    "kind": "get",
    "name": "numberingSystem",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#numberingSystem",
    "access": "public",
    "description": "Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime",
    "lineNumber": 874,
    "type": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 95,
    "kind": "get",
    "name": "outputCalendar",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#outputCalendar",
    "access": "public",
    "description": "Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime",
    "lineNumber": 883,
    "type": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 96,
    "kind": "get",
    "name": "zoneName",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#zoneName",
    "access": "public",
    "description": "Get the name of the time zone.",
    "lineNumber": 891,
    "type": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 97,
    "kind": "get",
    "name": "year",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#year",
    "access": "public",
    "description": "Get the year",
    "examples": ["DateTime.local(2017, 5, 25).year //=> 2017"],
    "lineNumber": 900,
    "type": {
      "nullable": null,
      "types": ["number"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 98,
    "kind": "get",
    "name": "quarter",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#quarter",
    "access": "public",
    "description": "Get the quarter",
    "examples": ["DateTime.local(2017, 5, 25).quarter //=> 2"],
    "lineNumber": 909,
    "type": {
      "nullable": null,
      "types": ["number"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 99,
    "kind": "get",
    "name": "month",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#month",
    "access": "public",
    "description": "Get the month (1-12).",
    "examples": ["DateTime.local(2017, 5, 25).month //=> 5"],
    "lineNumber": 918,
    "type": {
      "nullable": null,
      "types": ["number"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 100,
    "kind": "get",
    "name": "day",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#day",
    "access": "public",
    "description": "Get the day of the month (1-30ish).",
    "examples": ["DateTime.local(2017, 5, 25).day //=> 25"],
    "lineNumber": 927,
    "type": {
      "nullable": null,
      "types": ["number"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 101,
    "kind": "get",
    "name": "hour",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#hour",
    "access": "public",
    "description": "Get the hour of the day (0-23).",
    "examples": ["DateTime.local(2017, 5, 25, 9).hour //=> 9"],
    "lineNumber": 936,
    "type": {
      "nullable": null,
      "types": ["number"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 102,
    "kind": "get",
    "name": "minute",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#minute",
    "access": "public",
    "description": "Get the minute of the hour (0-59).",
    "examples": ["DateTime.local(2017, 5, 25, 9, 30).minute //=> 30"],
    "lineNumber": 945,
    "type": {
      "nullable": null,
      "types": ["number"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 103,
    "kind": "get",
    "name": "second",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#second",
    "access": "public",
    "description": "Get the second of the minute (0-59).",
    "examples": ["DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52"],
    "lineNumber": 954,
    "type": {
      "nullable": null,
      "types": ["number"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 104,
    "kind": "get",
    "name": "millisecond",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#millisecond",
    "access": "public",
    "description": "Get the millisecond of the second (0-999).",
    "examples": ["DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654"],
    "lineNumber": 963,
    "type": {
      "nullable": null,
      "types": ["number"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 105,
    "kind": "get",
    "name": "weekYear",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#weekYear",
    "access": "public",
    "description": "Get the week year",
    "examples": ["DateTime.local(2014, 11, 31).weekYear //=> 2015"],
    "see": ["https://en.wikipedia.org/wiki/ISO_week_date"],
    "lineNumber": 973,
    "type": {
      "nullable": null,
      "types": ["number"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 106,
    "kind": "get",
    "name": "weekNumber",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#weekNumber",
    "access": "public",
    "description": "Get the week number of the week year (1-52ish).",
    "examples": ["DateTime.local(2017, 5, 25).weekNumber //=> 21"],
    "see": ["https://en.wikipedia.org/wiki/ISO_week_date"],
    "lineNumber": 983,
    "type": {
      "nullable": null,
      "types": ["number"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 107,
    "kind": "get",
    "name": "weekday",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#weekday",
    "access": "public",
    "description": "Get the day of the week.\n1 is Monday and 7 is Sunday",
    "examples": ["DateTime.local(2014, 11, 31).weekday //=> 4"],
    "see": ["https://en.wikipedia.org/wiki/ISO_week_date"],
    "lineNumber": 994,
    "type": {
      "nullable": null,
      "types": ["number"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 108,
    "kind": "get",
    "name": "ordinal",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#ordinal",
    "access": "public",
    "description": "Get the ordinal (i.e. the day of the year)",
    "examples": ["DateTime.local(2017, 5, 25).ordinal //=> 145"],
    "lineNumber": 1003,
    "type": {
      "nullable": null,
      "types": ["number", "DateTime"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 109,
    "kind": "get",
    "name": "monthShort",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#monthShort",
    "access": "public",
    "description": "Get the human readable short month name, such as 'Oct'.\nDefaults to the system's locale if no locale has been specified",
    "examples": ["DateTime.local(2017, 10, 30).monthShort //=> Oct"],
    "lineNumber": 1013,
    "type": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 110,
    "kind": "get",
    "name": "monthLong",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#monthLong",
    "access": "public",
    "description": "Get the human readable long month name, such as 'October'.\nDefaults to the system's locale if no locale has been specified",
    "examples": ["DateTime.local(2017, 10, 30).monthLong //=> October"],
    "lineNumber": 1023,
    "type": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 111,
    "kind": "get",
    "name": "weekdayShort",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#weekdayShort",
    "access": "public",
    "description": "Get the human readable short weekday, such as 'Mon'.\nDefaults to the system's locale if no locale has been specified",
    "examples": ["DateTime.local(2017, 10, 30).weekdayShort //=> Mon"],
    "lineNumber": 1033,
    "type": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 112,
    "kind": "get",
    "name": "weekdayLong",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#weekdayLong",
    "access": "public",
    "description": "Get the human readable long weekday, such as 'Monday'.\nDefaults to the system's locale if no locale has been specified",
    "examples": ["DateTime.local(2017, 10, 30).weekdayLong //=> Monday"],
    "lineNumber": 1043,
    "type": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 113,
    "kind": "get",
    "name": "offset",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#offset",
    "access": "public",
    "description": "Get the UTC offset of this DateTime in minutes",
    "examples": ["DateTime.local().offset //=> -240", "DateTime.utc().offset //=> 0"],
    "lineNumber": 1053,
    "type": {
      "nullable": null,
      "types": ["number"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 114,
    "kind": "get",
    "name": "offsetNameShort",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#offsetNameShort",
    "access": "public",
    "description": "Get the short human name for the zone's current offset, for example \"EST\" or \"EDT\".\nDefaults to the system's locale if no locale has been specified",
    "lineNumber": 1062,
    "type": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 115,
    "kind": "get",
    "name": "offsetNameLong",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#offsetNameLong",
    "access": "public",
    "description": "Get the long human name for the zone's current offset, for example \"Eastern Standard Time\" or \"Eastern Daylight Time\".\nDefaults to the system's locale if no locale has been specified",
    "lineNumber": 1078,
    "type": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 116,
    "kind": "get",
    "name": "isOffsetFixed",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#isOffsetFixed",
    "access": "public",
    "description": "Get whether this zone's offset ever changes, as in a DST.",
    "lineNumber": 1093,
    "type": {
      "nullable": null,
      "types": ["boolean"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 117,
    "kind": "get",
    "name": "isInDST",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#isInDST",
    "access": "public",
    "description": "Get whether the DateTime is in a DST.",
    "lineNumber": 1101,
    "type": {
      "nullable": null,
      "types": ["boolean"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 118,
    "kind": "get",
    "name": "isInLeapYear",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#isInLeapYear",
    "access": "public",
    "description": "Returns true if this DateTime is in a leap year, false otherwise",
    "examples": [
      "DateTime.local(2016).isInLeapYear //=> true",
      "DateTime.local(2013).isInLeapYear //=> false"
    ],
    "lineNumber": 1117,
    "type": {
      "nullable": null,
      "types": ["boolean"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 119,
    "kind": "get",
    "name": "daysInMonth",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#daysInMonth",
    "access": "public",
    "description": "Returns the number of days in this DateTime's month",
    "examples": [
      "DateTime.local(2016, 2).daysInMonth //=> 29",
      "DateTime.local(2016, 3).daysInMonth //=> 31"
    ],
    "lineNumber": 1127,
    "type": {
      "nullable": null,
      "types": ["number"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 120,
    "kind": "get",
    "name": "daysInYear",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#daysInYear",
    "access": "public",
    "description": "Returns the number of days in this DateTime's year",
    "examples": [
      "DateTime.local(2016).daysInYear //=> 366",
      "DateTime.local(2013).daysInYear //=> 365"
    ],
    "lineNumber": 1137,
    "type": {
      "nullable": null,
      "types": ["number"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 121,
    "kind": "get",
    "name": "weeksInWeekYear",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#weeksInWeekYear",
    "access": "public",
    "description": "Returns the number of weeks in this DateTime's year",
    "examples": [
      "DateTime.local(2004).weeksInWeekYear //=> 53",
      "DateTime.local(2013).weeksInWeekYear //=> 52"
    ],
    "see": ["https://en.wikipedia.org/wiki/ISO_week_date"],
    "lineNumber": 1148,
    "type": {
      "nullable": null,
      "types": ["number"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "resolvedLocaleOpts",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#resolvedLocaleOpts",
    "access": "public",
    "description": "Returns the resolved Intl options for this DateTime.\nThis is useful in understanding the behavior of formatting methods",
    "lineNumber": 1158,
    "params": [
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "the same options as toLocaleString"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["Object"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "toUTC",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#toUTC",
    "access": "public",
    "description": "\"Set\" the DateTime's zone to UTC. Returns a newly-constructed DateTime.\n\nEquivalent to {@link setZone}('utc')",
    "lineNumber": 1176,
    "params": [
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "offset",
        "description": "optionally, an offset from UTC in minutes"
      },
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "opts",
        "description": "options to pass to `setZone()`"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["DateTime"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "toLocal",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#toLocal",
    "access": "public",
    "description": "\"Set\" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.\n\nEquivalent to `setZone('local')`",
    "lineNumber": 1186,
    "return": {
      "nullable": null,
      "types": ["DateTime"],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "setZone",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#setZone",
    "access": "public",
    "description": "\"Set\" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.\n\nBy default, the setter keeps the underlying time the same (as in, the same UTC timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link plus}. You may wish to use {@link toLocal} and {@link toUTC} which provide simple convenience wrappers for commonly used zones.",
    "lineNumber": 1199,
    "params": [
      {
        "nullable": null,
        "types": ["string", "Zone"],
        "spread": false,
        "optional": true,
        "defaultValue": "'local'",
        "defaultRaw": "'local'",
        "name": "zone",
        "description": "a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'utc+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link Zone} class."
      },
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "options"
      },
      {
        "nullable": null,
        "types": ["boolean"],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "opts.keepLocalTime",
        "description": "If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this."
      }
    ],
    "return": {
      "nullable": null,
      "types": ["DateTime"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "reconfigure",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#reconfigure",
    "access": "public",
    "description": "\"Set\" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.",
    "examples": ["DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })"],
    "lineNumber": 1220,
    "params": [
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": "the properties to set"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["DateTime"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "setLocale",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#setLocale",
    "access": "public",
    "description": "\"Set\" the locale. Returns a newly-constructed DateTime.\nJust a convenient alias for reconfigure({ locale })",
    "examples": ["DateTime.local(2017, 5, 25).setLocale('en-GB')"],
    "lineNumber": 1231,
    "return": {
      "nullable": null,
      "types": ["DateTime"],
      "spread": false,
      "description": ""
    },
    "params": [
      {
        "name": "locale",
        "types": ["*"]
      }
    ]
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "set",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#set",
    "access": "public",
    "description": "\"Set\" the values of specified units. Returns a newly-constructed DateTime.\nYou can only set units with this method; for \"setting\" metadata, see {@link reconfigure} and {@link setZone}.",
    "examples": [
      "dt.set({ year: 2017 })",
      "dt.set({ hour: 8, minute: 30 })",
      "dt.set({ weekday: 5 })",
      "dt.set({ year: 2005, ordinal: 234 })"
    ],
    "lineNumber": 1245,
    "params": [
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "a mapping of units to numbers"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["DateTime"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "plus",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#plus",
    "access": "public",
    "description": "Add a period of time to this DateTime and return the resulting DateTime\n\nAdding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.",
    "examples": [
      "DateTime.local().plus(123) //~> in 123 milliseconds",
      "DateTime.local().plus({ minutes: 15 }) //~> in 15 minutes",
      "DateTime.local().plus({ days: 1 }) //~> this time tomorrow",
      "DateTime.local().plus({ days: -1 }) //~> this time yesterday",
      "DateTime.local().plus({ hours: 3, minutes: 13 }) //~> in 1 hr, 13 min",
      "DateTime.local().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 1 hr, 13 min"
    ],
    "lineNumber": 1286,
    "params": [
      {
        "nullable": null,
        "types": ["Duration", "Object", "number"],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["DateTime"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "minus",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#minus",
    "access": "public",
    "description": "Subtract a period of time to this DateTime and return the resulting DateTime\nSee {@link plus}",
    "lineNumber": 1298,
    "params": [
      {
        "nullable": null,
        "types": ["Duration", "Object", "number"],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["DateTime"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "startOf",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#startOf",
    "access": "public",
    "description": "\"Set\" this DateTime to the beginning of a unit of time.",
    "examples": [
      "DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'",
      "DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'",
      "DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'",
      "DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'"
    ],
    "lineNumber": 1313,
    "params": [
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "unit",
        "description": "The unit to go to the beginning of. Can be 'year', 'month', 'day', 'hour', 'minute', 'second', or 'millisecond'."
      }
    ],
    "return": {
      "nullable": null,
      "types": ["DateTime"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "endOf",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#endOf",
    "access": "public",
    "description": "\"Set\" this DateTime to the end (i.e. the last millisecond) of a unit of time",
    "examples": [
      "DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'",
      "DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'",
      "DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'",
      "DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'"
    ],
    "lineNumber": 1365,
    "params": [
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "unit",
        "description": "The unit to go to the end of. Can be 'year', 'month', 'day', 'hour', 'minute', 'second', or 'millisecond'."
      }
    ],
    "return": {
      "nullable": null,
      "types": ["DateTime"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "toFormat",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#toFormat",
    "access": "public",
    "description": "Returns a string representation of this DateTime formatted according to the specified format string.\n**You may not want this.** See {@link toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/docs/manual/formatting.html#table-of-tokens).\nDefaults to en-US if no locale has been specified, regardless of the system's locale.",
    "examples": [
      "DateTime.local().toFormat('yyyy LLL dd') //=> '2017 Apr 22'",
      "DateTime.local().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'",
      "DateTime.local().toFormat('yyyy LLL dd', { locale: \"fr\" }) //=> '2017 avr. 22'",
      "DateTime.local().toFormat(\"HH 'hours and' mm 'minutes'\") //=> '20 hours and 55 minutes'"
    ],
    "see": ["https://moment.github.io/luxon/docs/manual/formatting.html#table-of-tokens"],
    "lineNumber": 1388,
    "params": [
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "fmt",
        "description": "the format string"
      },
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "opts to override the configuration options"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "toLocaleString",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#toLocaleString",
    "access": "public",
    "description": "Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.\nThe exact behavior of this method is browser-specific, but in general it will return an appropriate representation.\nof the DateTime in the assigned locale.\nDefaults to the system's locale if no locale has been specified",
    "examples": [
      "DateTime.local().toLocaleString(); //=> 4/20/2017",
      "DateTime.local().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'",
      "DateTime.local().toLocaleString({ locale: \"en-gb\" }); //=> '20/04/2017'",
      "DateTime.local().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'",
      "DateTime.local().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'",
      "DateTime.local().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'",
      "DateTime.local().toLocaleString({weekday: 'long', month: 'long', day: '2-digit'}); //=> 'Thu, Apr 20'",
      "DateTime.local().toLocaleString({weekday: 'long', month: 'long', day: '2-digit', hour: '2-digit', minute: '2-digit'}); //=> 'Thu, Apr 20, 11:27'",
      "DateTime.local().toLocaleString({hour: '2-digit', minute: '2-digit'}); //=> '11:32'"
    ],
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat"
    ],
    "lineNumber": 1412,
    "params": [
      {
        "nullable": null,
        "types": ["*"],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "{Object} - Intl.DateTimeFormat constructor options and configuration options"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "toLocaleParts",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#toLocaleParts",
    "access": "public",
    "description": "Returns an array of format \"parts\", i.e. individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.\nDefaults to the system's locale if no locale has been specified",
    "examples": [
      "DateTime.local().toLocaleString(); //=> [\n                                   //=>   { type: 'day', value: '25' },\n                                   //=>   { type: 'literal', value: '/' },\n                                   //=>   { type: 'month', value: '05' },\n                                   //=>   { type: 'literal', value: '/' },\n                                   //=>   { type: 'year', value: '1982' }\n                                   //=> ]"
    ],
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts"
    ],
    "lineNumber": 1431,
    "params": [
      {
        "nullable": null,
        "types": ["*"],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "{Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`."
      }
    ],
    "return": {
      "types": ["*"]
    }
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "toISO",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#toISO",
    "access": "public",
    "description": "Returns an ISO 8601-compliant string representation of this DateTime",
    "examples": [
      "DateTime.utc(1982, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'",
      "DateTime.local().toISO() //=> '2017-04-22T20:47:05.335-04:00'",
      "DateTime.local().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'"
    ],
    "lineNumber": 1448,
    "params": [
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "options"
      },
      {
        "nullable": null,
        "types": ["boolean"],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "opts.suppressMilliseconds",
        "description": "exclude milliseconds from the format if they're 0"
      },
      {
        "nullable": null,
        "types": ["boolean"],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "opts.suppressSeconds",
        "description": "exclude seconds from the format if they're 0"
      },
      {
        "nullable": null,
        "types": ["boolean"],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "opts.includeOffset",
        "description": "include the offset, such as 'Z' or '-04:00'"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "toISODate",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#toISODate",
    "access": "public",
    "description": "Returns an ISO 8601-compliant string representation of this DateTime's date component",
    "examples": ["DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'"],
    "lineNumber": 1461,
    "return": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "toISOWeekDate",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#toISOWeekDate",
    "access": "public",
    "description": "Returns an ISO 8601-compliant string representation of this DateTime's week date",
    "examples": ["DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'"],
    "lineNumber": 1470,
    "return": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "toISOTime",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#toISOTime",
    "access": "public",
    "description": "Returns an ISO 8601-compliant string representation of this DateTime's time component",
    "examples": [
      "DateTime.utc().hour(7).minute(34).toISOTime() //=> '07:34:19.361Z'",
      "DateTime.utc().hour(7).minute(34).toISOTime({ suppressSeconds: true }) //=> '07:34Z'"
    ],
    "lineNumber": 1484,
    "params": [
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "options"
      },
      {
        "nullable": null,
        "types": ["boolean"],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "opts.suppressMilliseconds",
        "description": "exclude milliseconds from the format if they're 0"
      },
      {
        "nullable": null,
        "types": ["boolean"],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "opts.suppressSeconds",
        "description": "exclude seconds from the format if they're 0"
      },
      {
        "nullable": null,
        "types": ["boolean"],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "opts.includeOffset",
        "description": "include the offset, such as 'Z' or '-04:00'"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "toRFC2822",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#toRFC2822",
    "access": "public",
    "description": "Returns an RFC 2822-compatible string representation of this DateTime, always in UTC",
    "examples": [
      "DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'",
      "DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'"
    ],
    "lineNumber": 1494,
    "return": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "toHTTP",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#toHTTP",
    "access": "public",
    "description": "Returns a string representation of this DateTime appropriate for use in HTTP headers.\nSpecifically, the string conforms to RFC 1123.",
    "examples": [
      "DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'",
      "DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'"
    ],
    "see": ["https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1"],
    "lineNumber": 1506,
    "return": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "toSQLDate",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#toSQLDate",
    "access": "public",
    "description": "Returns a string representation of this DateTime appropriate for use in SQL Date",
    "examples": ["DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'"],
    "lineNumber": 1515,
    "return": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "toSQLTime",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#toSQLTime",
    "access": "public",
    "description": "Returns a string representation of this DateTime appropriate for use in SQL Time",
    "examples": [
      "DateTime.utc().toSQL() //=> '05:15:16.345'",
      "DateTime.local().toSQL() //=> '05:15:16.345 -04:00'",
      "DateTime.local().toSQL({ includeOffset: false }) //=> '05:15:16.345'",
      "DateTime.local().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'"
    ],
    "lineNumber": 1530,
    "params": [
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "options"
      },
      {
        "nullable": null,
        "types": ["boolean"],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "opts.includeZone",
        "description": "include the zone, such as 'America/New_York'. Overides includeOffset."
      },
      {
        "nullable": null,
        "types": ["boolean"],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "opts.includeOffset",
        "description": "include the offset, such as 'Z' or '-04:00'"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "toSQL",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#toSQL",
    "access": "public",
    "description": "Returns a string representation of this DateTime appropriate for use in SQL DateTime",
    "examples": [
      "DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'",
      "DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'",
      "DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'",
      "DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'"
    ],
    "lineNumber": 1545,
    "params": [
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "options"
      },
      {
        "nullable": null,
        "types": ["boolean"],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "opts.includeZone",
        "description": "include the zone, such as 'America/New_York'. Overrides includeOffset."
      },
      {
        "nullable": null,
        "types": ["boolean"],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "opts.includeOffset",
        "description": "include the offset, such as 'Z' or '-04:00'"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "toString",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#toString",
    "access": "public",
    "description": "Returns a string representation of this DateTime appropriate for debugging",
    "lineNumber": 1557,
    "return": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "valueOf",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#valueOf",
    "access": "public",
    "description": "Returns the epoch milliseconds of this DateTime. Alias of {@link toMillis}",
    "lineNumber": 1565,
    "return": {
      "nullable": null,
      "types": ["number"],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "toMillis",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#toMillis",
    "access": "public",
    "description": "Returns the epoch milliseconds of this DateTime.",
    "lineNumber": 1573,
    "return": {
      "nullable": null,
      "types": ["number"],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "toSeconds",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#toSeconds",
    "access": "public",
    "description": "Returns the epoch seconds of this DateTime.",
    "lineNumber": 1581,
    "return": {
      "nullable": null,
      "types": ["number"],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#toJSON",
    "access": "public",
    "description": "Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.",
    "lineNumber": 1589,
    "return": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "toBSON",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#toBSON",
    "access": "public",
    "description": "Returns a BSON serializable equivalent to this DateTime.",
    "lineNumber": 1597,
    "return": {
      "nullable": null,
      "types": ["Date"],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "toObject",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#toObject",
    "access": "public",
    "description": "Returns a Javascript object with this DateTime's year, month, day, and so on.",
    "examples": [
      "DateTime.local().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }"
    ],
    "lineNumber": 1608,
    "params": [
      {
        "nullable": null,
        "types": ["*"],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "options for generating the object"
      },
      {
        "nullable": null,
        "types": ["boolean"],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "opts.includeConfig",
        "description": "include configuration attributes in the output"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["Object"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "toJSDate",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#toJSDate",
    "access": "public",
    "description": "Returns a Javascript Date equivalent to this DateTime.",
    "lineNumber": 1625,
    "return": {
      "nullable": null,
      "types": ["Date"],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "diff",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#diff",
    "access": "public",
    "description": "Return the difference between two DateTimes as a Duration.",
    "examples": [
      "var i1 = DateTime.fromISO('1982-05-25T09:45'),\n    i2 = DateTime.fromISO('1983-10-14T10:30');\ni2.diff(i1).toObject() //=> { milliseconds: 43807500000 }\ni2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }\ni2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }\ni2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }"
    ],
    "lineNumber": 1646,
    "params": [
      {
        "nullable": null,
        "types": ["DateTime"],
        "spread": false,
        "optional": false,
        "name": "otherDateTime",
        "description": "the DateTime to compare this one to"
      },
      {
        "nullable": null,
        "types": ["string", "string[]"],
        "spread": false,
        "optional": true,
        "defaultValue": "['milliseconds']",
        "defaultRaw": "['milliseconds']",
        "name": "unit",
        "description": "the unit or array of units (such as 'hours' or 'days') to include in the duration."
      },
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "options that affect the creation of the Duration"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "defaultValue": "'casual'",
        "defaultRaw": "'casual'",
        "name": "opts.conversionAccuracy",
        "description": "the conversion system to use"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["Duration"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "diffNow",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#diffNow",
    "access": "public",
    "description": "Return the difference between this DateTime and right now.\nSee {@link diff}",
    "lineNumber": 1667,
    "params": [
      {
        "nullable": null,
        "types": ["string", "string[]"],
        "spread": false,
        "optional": true,
        "defaultValue": "['milliseconds']",
        "defaultRaw": "['milliseconds']",
        "name": "unit",
        "description": "the unit or units units (such as 'hours' or 'days') to include in the duration"
      },
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "options that affect the creation of the Duration"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "defaultValue": "'casual'",
        "defaultRaw": "'casual'",
        "name": "opts.conversionAccuracy",
        "description": "the conversion system to use"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["Duration"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "until",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#until",
    "access": "public",
    "description": "Return an Interval spanning between this DateTime and another DateTime",
    "lineNumber": 1676,
    "params": [
      {
        "nullable": null,
        "types": ["DateTime"],
        "spread": false,
        "optional": false,
        "name": "otherDateTime",
        "description": "the other end point of the Interval"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["Interval"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "hasSame",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#hasSame",
    "access": "public",
    "description": "Return whether this DateTime is in the same unit of time as another DateTime",
    "examples": [
      "DateTime.local().hasSame(otherDT, 'day'); //~> true if both the same calendar day"
    ],
    "lineNumber": 1687,
    "params": [
      {
        "nullable": null,
        "types": ["DateTime"],
        "spread": false,
        "optional": false,
        "name": "otherDateTime",
        "description": "the other DateTime"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "unit",
        "description": "the unit of time to check sameness on"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["boolean"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "equals",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/datetime.js~DateTime#equals",
    "access": "public",
    "description": "Equality check\nTwo DateTimes are equal iff they represent the same millisecond, have the same zone and location, and are both valid.\nTo compare just the millisecond values, use `+dt1 === ~dt2`.",
    "lineNumber": 1704,
    "params": [
      {
        "nullable": null,
        "types": ["DateTime"],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": "the other DateTime"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["boolean"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "min",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.min",
    "access": "public",
    "description": "Return the min of several date times",
    "lineNumber": 1719,
    "params": [
      {
        "nullable": null,
        "types": ["...DateTime"],
        "spread": true,
        "optional": false,
        "name": "dateTimes",
        "description": "the DateTimes from which to choose the minimum"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["DateTime"],
      "spread": false,
      "description": "the min DateTime, or undefined if called with no argument"
    }
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "max",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.max",
    "access": "public",
    "description": "Return the max of several date times",
    "lineNumber": 1728,
    "params": [
      {
        "nullable": null,
        "types": ["...DateTime"],
        "spread": true,
        "optional": false,
        "name": "dateTimes",
        "description": "the DateTimes from which to choose the maximum"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["DateTime"],
      "spread": false,
      "description": "the max DateTime, or undefined if called with no argument"
    }
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "fromFormatExplain",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.fromFormatExplain",
    "access": "public",
    "description": "Explain how a string would be parsed by fromFormat()",
    "lineNumber": 1741,
    "params": [
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "the string to parse"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "fmt",
        "description": "the format the string is expected to be in (see description)"
      },
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options taken by fromFormat()"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["Object"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "fromStringExplain",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.fromStringExplain",
    "access": "public",
    "description": "",
    "lineNumber": 1750,
    "deprecated": "use fromFormatExplain instead",
    "params": [
      {
        "name": "text",
        "types": ["*"]
      },
      {
        "name": "fmt",
        "types": ["*"]
      },
      {
        "name": "options",
        "optional": true,
        "types": ["{}"],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": ["*"]
    }
  },
  {
    "__docId__": 162,
    "kind": "get",
    "name": "DATE_SHORT",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.DATE_SHORT",
    "access": "public",
    "description": "{@link toLocaleString} format like 10/14/1983",
    "lineNumber": 1760,
    "type": {
      "nullable": null,
      "types": ["Object"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 163,
    "kind": "get",
    "name": "DATE_MED",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.DATE_MED",
    "access": "public",
    "description": "{@link toLocaleString} format like 'Oct 14, 1983'",
    "lineNumber": 1768,
    "type": {
      "nullable": null,
      "types": ["Object"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 164,
    "kind": "get",
    "name": "DATE_FULL",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.DATE_FULL",
    "access": "public",
    "description": "{@link toLocaleString} format like 'October 14, 1983'",
    "lineNumber": 1776,
    "type": {
      "nullable": null,
      "types": ["Object"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 165,
    "kind": "get",
    "name": "DATE_HUGE",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.DATE_HUGE",
    "access": "public",
    "description": "{@link toLocaleString} format like 'Tuesday, October 14, 1983'",
    "lineNumber": 1784,
    "type": {
      "nullable": null,
      "types": ["Object"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 166,
    "kind": "get",
    "name": "TIME_SIMPLE",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.TIME_SIMPLE",
    "access": "public",
    "description": "{@link toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.",
    "lineNumber": 1792,
    "type": {
      "nullable": null,
      "types": ["Object"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 167,
    "kind": "get",
    "name": "TIME_WITH_SECONDS",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.TIME_WITH_SECONDS",
    "access": "public",
    "description": "{@link toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.",
    "lineNumber": 1800,
    "type": {
      "nullable": null,
      "types": ["Object"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 168,
    "kind": "get",
    "name": "TIME_WITH_SHORT_OFFSET",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.TIME_WITH_SHORT_OFFSET",
    "access": "public",
    "description": "{@link toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.",
    "lineNumber": 1808,
    "type": {
      "nullable": null,
      "types": ["Object"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 169,
    "kind": "get",
    "name": "TIME_WITH_LONG_OFFSET",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.TIME_WITH_LONG_OFFSET",
    "access": "public",
    "description": "{@link toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.",
    "lineNumber": 1816,
    "type": {
      "nullable": null,
      "types": ["Object"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 170,
    "kind": "get",
    "name": "TIME_24_SIMPLE",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.TIME_24_SIMPLE",
    "access": "public",
    "description": "{@link toLocaleString} format like '09:30', always 24-hour.",
    "lineNumber": 1824,
    "type": {
      "nullable": null,
      "types": ["Object"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 171,
    "kind": "get",
    "name": "TIME_24_WITH_SECONDS",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.TIME_24_WITH_SECONDS",
    "access": "public",
    "description": "{@link toLocaleString} format like '09:30:23', always 24-hour.",
    "lineNumber": 1832,
    "type": {
      "nullable": null,
      "types": ["Object"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 172,
    "kind": "get",
    "name": "TIME_24_WITH_SHORT_OFFSET",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.TIME_24_WITH_SHORT_OFFSET",
    "access": "public",
    "description": "{@link toLocaleString} format like '09:30:23 EDT', always 24-hour.",
    "lineNumber": 1840,
    "type": {
      "nullable": null,
      "types": ["Object"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 173,
    "kind": "get",
    "name": "TIME_24_WITH_LONG_OFFSET",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.TIME_24_WITH_LONG_OFFSET",
    "access": "public",
    "description": "{@link toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.",
    "lineNumber": 1848,
    "type": {
      "nullable": null,
      "types": ["Object"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 174,
    "kind": "get",
    "name": "DATETIME_SHORT",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.DATETIME_SHORT",
    "access": "public",
    "description": "{@link toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.",
    "lineNumber": 1856,
    "type": {
      "nullable": null,
      "types": ["Object"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 175,
    "kind": "get",
    "name": "DATETIME_SHORT_WITH_SECONDS",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.DATETIME_SHORT_WITH_SECONDS",
    "access": "public",
    "description": "{@link toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.",
    "lineNumber": 1864,
    "type": {
      "nullable": null,
      "types": ["Object"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 176,
    "kind": "get",
    "name": "DATETIME_MED",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.DATETIME_MED",
    "access": "public",
    "description": "{@link toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.",
    "lineNumber": 1872,
    "type": {
      "nullable": null,
      "types": ["Object"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 177,
    "kind": "get",
    "name": "DATETIME_MED_WITH_SECONDS",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.DATETIME_MED_WITH_SECONDS",
    "access": "public",
    "description": "{@link toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.",
    "lineNumber": 1880,
    "type": {
      "nullable": null,
      "types": ["Object"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 178,
    "kind": "get",
    "name": "DATETIME_FULL",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.DATETIME_FULL",
    "access": "public",
    "description": "{@link toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.",
    "lineNumber": 1888,
    "type": {
      "nullable": null,
      "types": ["Object"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 179,
    "kind": "get",
    "name": "DATETIME_FULL_WITH_SECONDS",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.DATETIME_FULL_WITH_SECONDS",
    "access": "public",
    "description": "{@link toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.",
    "lineNumber": 1896,
    "type": {
      "nullable": null,
      "types": ["Object"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 180,
    "kind": "get",
    "name": "DATETIME_HUGE",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.DATETIME_HUGE",
    "access": "public",
    "description": "{@link toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.",
    "lineNumber": 1904,
    "type": {
      "nullable": null,
      "types": ["Object"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 181,
    "kind": "get",
    "name": "DATETIME_HUGE_WITH_SECONDS",
    "memberof": "src/datetime.js~DateTime",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~DateTime.DATETIME_HUGE_WITH_SECONDS",
    "access": "public",
    "description": "{@link toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.",
    "lineNumber": 1912,
    "type": {
      "nullable": null,
      "types": ["Object"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 182,
    "kind": "function",
    "name": "friendlyDateTime",
    "memberof": "src/datetime.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/datetime.js~friendlyDateTime",
    "access": "private",
    "export": true,
    "importPath": "luxon/src/datetime.js",
    "importStyle": "{friendlyDateTime}",
    "description": "",
    "lineNumber": 1920,
    "ignore": true,
    "params": [
      {
        "name": "dateTimeish",
        "types": ["*"]
      }
    ],
    "return": {
      "types": ["*"]
    }
  },
  {
    "__docId__": 183,
    "kind": "file",
    "name": "src/duration.js",
    "content": "import { isUndefined, isNumber, normalizeObject } from \"./impl/util\";\nimport Locale from \"./impl/locale\";\nimport Formatter from \"./impl/formatter\";\nimport { parseISODuration } from \"./impl/regexParser\";\nimport Settings from \"./settings\";\nimport { InvalidArgumentError, InvalidDurationError, InvalidUnitError } from \"./errors\";\nimport Invalid from \"./impl/invalid\";\n\nconst INVALID = \"Invalid Duration\";\n\n// unit conversion constants\nconst lowOrderMatrix = {\n    weeks: {\n      days: 7,\n      hours: 7 * 24,\n      minutes: 7 * 24 * 60,\n      seconds: 7 * 24 * 60 * 60,\n      milliseconds: 7 * 24 * 60 * 60 * 1000\n    },\n    days: {\n      hours: 24,\n      minutes: 24 * 60,\n      seconds: 24 * 60 * 60,\n      milliseconds: 24 * 60 * 60 * 1000\n    },\n    hours: { minutes: 60, seconds: 60 * 60, milliseconds: 60 * 60 * 1000 },\n    minutes: { seconds: 60, milliseconds: 60 * 1000 },\n    seconds: { milliseconds: 1000 }\n  },\n  casualMatrix = Object.assign(\n    {\n      years: {\n        months: 12,\n        weeks: 52,\n        days: 365,\n        hours: 365 * 24,\n        minutes: 365 * 24 * 60,\n        seconds: 365 * 24 * 60 * 60,\n        milliseconds: 365 * 24 * 60 * 60 * 1000\n      },\n      quarters: {\n        months: 3,\n        weeks: 13,\n        days: 91,\n        hours: 91 * 24,\n        minutes: 91 * 24 * 60,\n        milliseconds: 91 * 24 * 60 * 60 * 1000\n      },\n      months: {\n        weeks: 4,\n        days: 30,\n        hours: 30 * 24,\n        minutes: 30 * 24 * 60,\n        seconds: 30 * 24 * 60 * 60,\n        milliseconds: 30 * 24 * 60 * 60 * 1000\n      }\n    },\n    lowOrderMatrix\n  ),\n  daysInYearAccurate = 146097.0 / 400,\n  daysInMonthAccurate = 146097.0 / 4800,\n  accurateMatrix = Object.assign(\n    {\n      years: {\n        months: 12,\n        weeks: daysInYearAccurate / 7,\n        days: daysInYearAccurate,\n        hours: daysInYearAccurate * 24,\n        minutes: daysInYearAccurate * 24 * 60,\n        seconds: daysInYearAccurate * 24 * 60 * 60,\n        milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000\n      },\n      quarters: {\n        months: 3,\n        weeks: daysInYearAccurate / 28,\n        days: daysInYearAccurate / 4,\n        hours: (daysInYearAccurate * 24) / 4,\n        minutes: (daysInYearAccurate * 24 * 60) / 4,\n        seconds: (daysInYearAccurate * 24 * 60 * 60) / 4,\n        milliseconds: (daysInYearAccurate * 24 * 60 * 60 * 1000) / 4\n      },\n      months: {\n        weeks: daysInMonthAccurate / 7,\n        days: daysInMonthAccurate,\n        hours: daysInMonthAccurate * 24,\n        minutes: daysInMonthAccurate * 24 * 60,\n        seconds: daysInMonthAccurate * 24 * 60 * 60,\n        milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1000\n      }\n    },\n    lowOrderMatrix\n  );\n\n// units ordered by size\nconst orderedUnits = [\n  \"years\",\n  \"quarters\",\n  \"months\",\n  \"weeks\",\n  \"days\",\n  \"hours\",\n  \"minutes\",\n  \"seconds\",\n  \"milliseconds\"\n];\n\nconst reverseUnits = orderedUnits.slice(0).reverse();\n\n// clone really means \"create another instance just like this one, but with these changes\"\nfunction clone(dur, alts, clear = false) {\n  // deep merge for vals\n  const conf = {\n    values: clear ? alts.values : Object.assign({}, dur.values, alts.values || {}),\n    loc: dur.loc.clone(alts.loc),\n    conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy\n  };\n  return new Duration(conf);\n}\n\nfunction antiTrunc(n) {\n  return n < 0 ? Math.floor(n) : Math.ceil(n);\n}\n\n// NB: mutates parameters\nfunction convert(matrix, fromMap, fromUnit, toMap, toUnit) {\n  const conv = matrix[toUnit][fromUnit],\n    raw = fromMap[fromUnit] / conv,\n    sameSign = Math.sign(raw) === Math.sign(toMap[toUnit]),\n    // ok, so this is wild, but see the matrix in the tests\n    added =\n      !sameSign && toMap[toUnit] !== 0 && Math.abs(raw) <= 1 ? antiTrunc(raw) : Math.trunc(raw);\n  toMap[toUnit] += added;\n  fromMap[fromUnit] -= added * conv;\n}\n\n// NB: mutates parameters\nfunction normalizeValues(matrix, vals) {\n  reverseUnits.reduce((previous, current) => {\n    if (!isUndefined(vals[current])) {\n      if (previous) {\n        convert(matrix, vals, previous, vals, current);\n      }\n      return current;\n    } else {\n      return previous;\n    }\n  }, null);\n}\n\n/**\n * A Duration object represents a period of time, like \"2 months\" or \"1 day, 1 hour\". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime.plus} to add a Duration object to a DateTime, producing another DateTime.\n *\n * Here is a brief overview of commonly used methods and getters in Duration:\n *\n * * **Creation** To create a Duration, use {@link Duration.fromMillis}, {@link Duration.fromObject}, or {@link Duration.fromISO}.\n * * **Unit values** See the {@link Duration.years}, {@link Duration.months}, {@link Duration.weeks}, {@link Duration.days}, {@link Duration.hours}, {@link Duration.minutes}, {@link Duration.seconds}, {@link Duration.milliseconds} accessors.\n * * **Configuration** See  {@link Duration.locale} and {@link Duration.numberingSystem} accessors.\n * * **Transformation** To create new Durations out of old ones use {@link Duration.plus}, {@link Duration.minus}, {@link Duration.normalize}, {@link Duration.set}, {@link Duration.reconfigure}, {@link Duration.shiftTo}, and {@link Duration.negate}.\n * * **Output** To convert the Duration into other representations, see {@link Duration.as}, {@link Duration.toISO}, {@link Duration.toFormat}, and {@link Duration.toJSON}\n *\n * There's are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.\n */\nexport default class Duration {\n  /**\n   * @private\n   */\n  constructor(config) {\n    const accurate = config.conversionAccuracy === \"longterm\" || false;\n    /**\n     * @access private\n     */\n    this.values = config.values;\n    /**\n     * @access private\n     */\n    this.loc = config.loc || Locale.create();\n    /**\n     * @access private\n     */\n    this.conversionAccuracy = accurate ? \"longterm\" : \"casual\";\n    /**\n     * @access private\n     */\n    this.invalid = config.invalid || null;\n    /**\n     * @access private\n     */\n    this.matrix = accurate ? accurateMatrix : casualMatrix;\n    /**\n     * @access private\n     */\n    this.isLuxonDuration = true;\n  }\n\n  /**\n   * Create Duration from a number of milliseconds.\n   * @param {number} count of milliseconds\n   * @param {Object} opts - options for parsing\n   * @param {string} [opts.locale='en-US'] - the locale to use\n   * @param {string} opts.numberingSystem - the numbering system to use\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  static fromMillis(count, opts) {\n    return Duration.fromObject(Object.assign({ milliseconds: count }, opts));\n  }\n\n  /**\n   * Create a Duration from a Javascript object with keys like 'years' and 'hours.\n   * If this object is empty then zero  milliseconds duration is returned.\n   * @param {Object} obj - the object to create the DateTime from\n   * @param {number} obj.years\n   * @param {number} obj.quarters\n   * @param {number} obj.months\n   * @param {number} obj.weeks\n   * @param {number} obj.days\n   * @param {number} obj.hours\n   * @param {number} obj.minutes\n   * @param {number} obj.seconds\n   * @param {number} obj.milliseconds\n   * @param {string} [obj.locale='en-US'] - the locale to use\n   * @param {string} obj.numberingSystem - the numbering system to use\n   * @param {string} [obj.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  static fromObject(obj) {\n    if (obj == null || typeof obj !== \"object\") {\n      throw new InvalidArgumentError(\n        `Duration.fromObject: argument expected to be an object, got ${typeof obj}`\n      );\n    }\n    return new Duration({\n      values: normalizeObject(obj, Duration.normalizeUnit, true),\n      loc: Locale.fromObject(obj),\n      conversionAccuracy: obj.conversionAccuracy\n    });\n  }\n\n  /**\n   * Create a Duration from an ISO 8601 duration string.\n   * @param {string} text - text to parse\n   * @param {Object} opts - options for parsing\n   * @param {string} [opts.locale='en-US'] - the locale to use\n   * @param {string} opts.numberingSystem - the numbering system to use\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\n   * @example Duration.fromISO('P3Y6M4DT12H30M5S').toObject() //=> { years: 3, months: 6, day: 4, hours: 12, minutes: 30, seconds: 5 }\n   * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }\n   * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }\n   * @return {Duration}\n   */\n  static fromISO(text, opts) {\n    const [parsed] = parseISODuration(text);\n    if (parsed) {\n      const obj = Object.assign(parsed, opts);\n      return Duration.fromObject(obj);\n    } else {\n      return Duration.invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ISO 8601`);\n    }\n  }\n\n  /**\n   * Create an invalid Duration.\n   * @param {string} reason - simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {Duration}\n   */\n  static invalid(reason, explanation = null) {\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the Duration is invalid\");\n    }\n\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (Settings.throwOnInvalid) {\n      throw new InvalidDurationError(invalid);\n    } else {\n      return new Duration({ invalid });\n    }\n  }\n\n  /**\n   * @private\n   */\n  static normalizeUnit(unit, ignoreUnknown = false) {\n    const normalized = {\n      year: \"years\",\n      years: \"years\",\n      quarter: \"quarters\",\n      quarters: \"quarters\",\n      month: \"months\",\n      months: \"months\",\n      week: \"weeks\",\n      weeks: \"weeks\",\n      day: \"days\",\n      days: \"days\",\n      hour: \"hours\",\n      hours: \"hours\",\n      minute: \"minutes\",\n      minutes: \"minutes\",\n      second: \"seconds\",\n      seconds: \"seconds\",\n      millisecond: \"milliseconds\",\n      milliseconds: \"milliseconds\"\n    }[unit ? unit.toLowerCase() : unit];\n\n    if (!ignoreUnknown && !normalized) throw new InvalidUnitError(unit);\n\n    return normalized;\n  }\n\n  /**\n   * Check if an object is a Duration. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n  static isDuration(o) {\n    return o.isLuxonDuration;\n  }\n\n  /**\n   * Get  the locale of a Duration, such 'en-GB'\n   * @type {string}\n   */\n  get locale() {\n    return this.isValid ? this.loc.locale : null;\n  }\n\n  /**\n   * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration\n   *\n   * @type {string}\n   */\n  get numberingSystem() {\n    return this.isValid ? this.loc.numberingSystem : null;\n  }\n\n  /**\n   * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:\n   * * `S` for milliseconds\n   * * `s` for seconds\n   * * `m` for minutes\n   * * `h` for hours\n   * * `d` for days\n   * * `M` for months\n   * * `y` for years\n   * Notes:\n   * * Add padding by repeating the token, e.g. \"yy\" pads the years to two digits, \"hhhh\" pads the hours out to four digits\n   * * The duration will be converted to the set of units in the format string using {@link Duration.shiftTo} and the Durations's conversion accuracy setting.\n   * @param {string} fmt - the format string\n   * @param {Object} opts - options\n   * @param {boolean} [opts.floor=true] - floor numerical values\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"y d s\") //=> \"1 6 2\"\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"yy dd sss\") //=> \"01 06 002\"\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"M S\") //=> \"12 518402000\"\n   * @return {string}\n   */\n  toFormat(fmt, opts = {}) {\n    // reverse-compat since 1.2; we always round down now, never up, and we do it by default\n    const fmtOpts = Object.assign({}, opts, {\n      floor: opts.round !== false && opts.floor !== false\n    });\n    return this.isValid\n      ? Formatter.create(this.loc, fmtOpts).formatDurationFromString(this, fmt)\n      : INVALID;\n  }\n\n  /**\n   * Returns a Javascript object with this Duration's values.\n   * @param opts - options for generating the object\n   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }\n   * @return {Object}\n   */\n  toObject(opts = {}) {\n    if (!this.isValid) return {};\n\n    const base = Object.assign({}, this.values);\n\n    if (opts.includeConfig) {\n      base.conversionAccuracy = this.conversionAccuracy;\n      base.numberingSystem = this.loc.numberingSystem;\n      base.locale = this.loc.locale;\n    }\n    return base;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Duration.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\n   * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'\n   * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'\n   * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'\n   * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'\n   * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'\n   * @return {string}\n   */\n  toISO() {\n    // we could use the formatter, but this is an easier way to get the minimum string\n    if (!this.isValid) return null;\n\n    let s = \"P\";\n    if (this.years !== 0) s += this.years + \"Y\";\n    if (this.months !== 0 || this.quarters !== 0) s += this.months + this.quarters * 3 + \"M\";\n    if (this.days !== 0 || this.weeks !== 0) s += this.days + this.weeks * 7 + \"D\";\n    if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0)\n      s += \"T\";\n    if (this.hours !== 0) s += this.hours + \"H\";\n    if (this.minutes !== 0) s += this.minutes + \"M\";\n    if (this.seconds !== 0 || this.milliseconds !== 0)\n      s += this.seconds + this.milliseconds / 1000 + \"S\";\n    return s;\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.\n   * @return {string}\n   */\n  toJSON() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.\n   * @return {string}\n   */\n  toString() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns an milliseconds value of this Duration.\n   * @return {number}\n   */\n  valueOf() {\n    return this.as(\"milliseconds\");\n  }\n\n  /**\n   * Make this Duration longer by the specified amount. Return a newly-constructed Duration.\n   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @return {Duration}\n   */\n  plus(duration) {\n    if (!this.isValid) return this;\n\n    const dur = friendlyDuration(duration),\n      result = {};\n\n    for (const k of orderedUnits) {\n      if (dur.values.hasOwnProperty(k) || this.values.hasOwnProperty(k)) {\n        result[k] = dur.get(k) + this.get(k);\n      }\n    }\n\n    return clone(this, { values: result }, true);\n  }\n\n  /**\n   * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.\n   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @return {Duration}\n   */\n  minus(duration) {\n    if (!this.isValid) return this;\n\n    const dur = friendlyDuration(duration);\n    return this.plus(dur.negate());\n  }\n\n  /**\n   * Get the value of unit.\n   * @param {string} unit - a unit such as 'minute' or 'day'\n   * @example Duration.fromObject({years: 2, days: 3}).years //=> 2\n   * @example Duration.fromObject({years: 2, days: 3}).months //=> 0\n   * @example Duration.fromObject({years: 2, days: 3}).days //=> 3\n   * @return {number}\n   */\n  get(unit) {\n    return this[Duration.normalizeUnit(unit)];\n  }\n\n  /**\n   * \"Set\" the values of specified units. Return a newly-constructed Duration.\n   * @param {Object} values - a mapping of units to numbers\n   * @example dur.set({ years: 2017 })\n   * @example dur.set({ hours: 8, minutes: 30 })\n   * @return {Duration}\n   */\n  set(values) {\n    const mixed = Object.assign(this.values, normalizeObject(values, Duration.normalizeUnit));\n    return clone(this, { values: mixed });\n  }\n\n  /**\n   * \"Set\" the locale and/or numberingSystem.  Returns a newly-constructed Duration.\n   * @example dur.reconfigure({ locale: 'en-GB' })\n   * @return {Duration}\n   */\n  reconfigure({ locale, numberingSystem, conversionAccuracy } = {}) {\n    const loc = this.loc.clone({ locale, numberingSystem }),\n      opts = { loc };\n\n    if (conversionAccuracy) {\n      opts.conversionAccuracy = conversionAccuracy;\n    }\n\n    return clone(this, opts);\n  }\n\n  /**\n   * Return the length of the duration in the specified unit.\n   * @param {string} unit - a unit such as 'minutes' or 'days'\n   * @example Duration.fromObject({years: 1}).as('days') //=> 365\n   * @example Duration.fromObject({years: 1}).as('months') //=> 12\n   * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5\n   * @return {number}\n   */\n  as(unit) {\n    return this.isValid ? this.shiftTo(unit).get(unit) : NaN;\n  }\n\n  /**\n   * Reduce this Duration to its canonical representation in its current units.\n   * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }\n   * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }\n   * @return {Duration}\n   */\n  normalize() {\n    if (!this.isValid) return this;\n    const vals = this.toObject();\n    normalizeValues(this.matrix, vals);\n    return Duration.fromObject(vals);\n  }\n\n  /**\n   * Convert this Duration into its representation in a different set of units.\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }\n   * @return {Duration}\n   */\n  shiftTo(...units) {\n    if (!this.isValid) return this;\n\n    if (units.length === 0) {\n      return this;\n    }\n\n    units = units.map(u => Duration.normalizeUnit(u));\n\n    const built = {},\n      accumulated = {},\n      vals = this.toObject();\n    let lastUnit;\n\n    normalizeValues(this.matrix, vals);\n\n    for (const k of orderedUnits) {\n      if (units.indexOf(k) >= 0) {\n        lastUnit = k;\n\n        let own = 0;\n\n        // anything we haven't boiled down yet should get boiled to this unit\n        for (const ak in accumulated) {\n          if (accumulated.hasOwnProperty(ak)) {\n            own += this.matrix[ak][k] * accumulated[ak];\n            accumulated[ak] = 0;\n          }\n        }\n\n        // plus anything that's already in this unit\n        if (isNumber(vals[k])) {\n          own += vals[k];\n        }\n\n        const i = Math.trunc(own);\n        built[k] = i;\n        accumulated[k] = own - i; // we'd like to absorb these fractions in another unit\n\n        // plus anything further down the chain that should be rolled up in to this\n        for (const down in vals) {\n          if (orderedUnits.indexOf(down) > orderedUnits.indexOf(k)) {\n            convert(this.matrix, vals, down, built, k);\n          }\n        }\n        // otherwise, keep it in the wings to boil it later\n      } else if (isNumber(vals[k])) {\n        accumulated[k] = vals[k];\n      }\n    }\n\n    // anything leftover becomes the decimal for the last unit\n    if (lastUnit) {\n      for (const key in accumulated) {\n        if (accumulated.hasOwnProperty(key)) {\n          if (accumulated[key] !== 0) {\n            built[lastUnit] +=\n              key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];\n          }\n        }\n      }\n    }\n\n    return clone(this, { values: built }, true);\n  }\n\n  /**\n   * Return the negative of this Duration.\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }\n   * @return {Duration}\n   */\n  negate() {\n    if (!this.isValid) return this;\n    const negated = {};\n    for (const k of Object.keys(this.values)) {\n      negated[k] = -this.values[k];\n    }\n    return clone(this, { values: negated }, true);\n  }\n\n  /**\n   * Get the years.\n   * @type {number}\n   */\n  get years() {\n    return this.isValid ? this.values.years || 0 : NaN;\n  }\n\n  /**\n   * Get the quarters.\n   * @type {number}\n   */\n  get quarters() {\n    return this.isValid ? this.values.quarters || 0 : NaN;\n  }\n\n  /**\n   * Get the months.\n   * @type {number}\n   */\n  get months() {\n    return this.isValid ? this.values.months || 0 : NaN;\n  }\n\n  /**\n   * Get the weeks\n   * @type {number}\n   */\n  get weeks() {\n    return this.isValid ? this.values.weeks || 0 : NaN;\n  }\n\n  /**\n   * Get the days.\n   * @type {number}\n   */\n  get days() {\n    return this.isValid ? this.values.days || 0 : NaN;\n  }\n\n  /**\n   * Get the hours.\n   * @type {number}\n   */\n  get hours() {\n    return this.isValid ? this.values.hours || 0 : NaN;\n  }\n\n  /**\n   * Get the minutes.\n   * @type {number}\n   */\n  get minutes() {\n    return this.isValid ? this.values.minutes || 0 : NaN;\n  }\n\n  /**\n   * Get the seconds.\n   * @return {number}\n   */\n  get seconds() {\n    return this.isValid ? this.values.seconds || 0 : NaN;\n  }\n\n  /**\n   * Get the milliseconds.\n   * @return {number}\n   */\n  get milliseconds() {\n    return this.isValid ? this.values.milliseconds || 0 : NaN;\n  }\n\n  /**\n   * Returns whether the Duration is invalid. Invalid durations are returned by diff operations\n   * on invalid DateTimes or Intervals.\n   * @return {boolean}\n   */\n  get isValid() {\n    return this.invalid === null;\n  }\n\n  /**\n   * Returns an error code if this Duration became invalid, or null if the Duration is valid\n   * @return {string}\n   */\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n\n  /**\n   * Returns an explanation of why this Duration became invalid, or null if the Duration is valid\n   * @type {string}\n   */\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n\n  /**\n   * Equality check\n   * Two Durations are equal iff they have the same units and the same values for each unit.\n   * @param {Duration} other\n   * @return {boolean}\n   */\n  equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n\n    if (!this.loc.equals(other.loc)) {\n      return false;\n    }\n\n    for (const u of orderedUnits) {\n      if (this.values[u] !== other.values[u]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n/**\n * @private\n */\nexport function friendlyDuration(durationish) {\n  if (isNumber(durationish)) {\n    return Duration.fromMillis(durationish);\n  } else if (Duration.isDuration(durationish)) {\n    return durationish;\n  } else if (typeof durationish === \"object\") {\n    return Duration.fromObject(durationish);\n  } else {\n    throw new InvalidArgumentError(\n      `Unknown duration argument ${durationish} of type ${typeof durationish}`\n    );\n  }\n}\n",
    "static": true,
    "longname": "/Users/peterkhayes/Remix/luxon/src/duration.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 184,
    "kind": "variable",
    "name": "INVALID",
    "memberof": "src/duration.js",
    "static": true,
    "longname": "src/duration.js~INVALID",
    "access": "public",
    "export": false,
    "importPath": "luxon/src/duration.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": ["string"]
    },
    "ignore": true
  },
  {
    "__docId__": 185,
    "kind": "variable",
    "name": "lowOrderMatrix",
    "memberof": "src/duration.js",
    "static": true,
    "longname": "src/duration.js~lowOrderMatrix",
    "access": "public",
    "export": false,
    "importPath": "luxon/src/duration.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": ["{\"weeks\": *, \"days\": *, \"hours\": *, \"minutes\": *, \"seconds\": *}"]
    },
    "ignore": true
  },
  {
    "__docId__": 186,
    "kind": "variable",
    "name": "orderedUnits",
    "memberof": "src/duration.js",
    "static": true,
    "longname": "src/duration.js~orderedUnits",
    "access": "public",
    "export": false,
    "importPath": "luxon/src/duration.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "type": {
      "types": ["string[]"]
    },
    "ignore": true
  },
  {
    "__docId__": 187,
    "kind": "variable",
    "name": "reverseUnits",
    "memberof": "src/duration.js",
    "static": true,
    "longname": "src/duration.js~reverseUnits",
    "access": "public",
    "export": false,
    "importPath": "luxon/src/duration.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "type": {
      "types": ["*"]
    },
    "ignore": true
  },
  {
    "__docId__": 188,
    "kind": "function",
    "name": "clone",
    "memberof": "src/duration.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/duration.js~clone",
    "access": "public",
    "export": false,
    "importPath": "luxon/src/duration.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "params": [
      {
        "name": "dur",
        "types": ["*"]
      },
      {
        "name": "alts",
        "types": ["*"]
      },
      {
        "name": "clear",
        "optional": true,
        "types": ["boolean"],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": {
      "types": ["*"]
    },
    "ignore": true
  },
  {
    "__docId__": 189,
    "kind": "function",
    "name": "antiTrunc",
    "memberof": "src/duration.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/duration.js~antiTrunc",
    "access": "public",
    "export": false,
    "importPath": "luxon/src/duration.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "params": [
      {
        "name": "n",
        "types": ["*"]
      }
    ],
    "return": {
      "types": ["*"]
    },
    "ignore": true
  },
  {
    "__docId__": 190,
    "kind": "function",
    "name": "convert",
    "memberof": "src/duration.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/duration.js~convert",
    "access": "public",
    "export": false,
    "importPath": "luxon/src/duration.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 125,
    "undocument": true,
    "params": [
      {
        "name": "matrix",
        "types": ["*"]
      },
      {
        "name": "fromMap",
        "types": ["*"]
      },
      {
        "name": "fromUnit",
        "types": ["*"]
      },
      {
        "name": "toMap",
        "types": ["*"]
      },
      {
        "name": "toUnit",
        "types": ["*"]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 191,
    "kind": "function",
    "name": "normalizeValues",
    "memberof": "src/duration.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/duration.js~normalizeValues",
    "access": "public",
    "export": false,
    "importPath": "luxon/src/duration.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 137,
    "undocument": true,
    "params": [
      {
        "name": "matrix",
        "types": ["*"]
      },
      {
        "name": "vals",
        "types": ["*"]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 192,
    "kind": "class",
    "name": "Duration",
    "memberof": "src/duration.js",
    "static": true,
    "longname": "src/duration.js~Duration",
    "access": "public",
    "export": true,
    "importPath": "luxon/src/duration.js",
    "importStyle": "Duration",
    "description": "A Duration object represents a period of time, like \"2 months\" or \"1 day, 1 hour\". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime.plus} to add a Duration object to a DateTime, producing another DateTime.\n\nHere is a brief overview of commonly used methods and getters in Duration:\n\n* **Creation** To create a Duration, use {@link Duration.fromMillis}, {@link Duration.fromObject}, or {@link Duration.fromISO}.\n* **Unit values** See the {@link Duration.years}, {@link Duration.months}, {@link Duration.weeks}, {@link Duration.days}, {@link Duration.hours}, {@link Duration.minutes}, {@link Duration.seconds}, {@link Duration.milliseconds} accessors.\n* **Configuration** See  {@link Duration.locale} and {@link Duration.numberingSystem} accessors.\n* **Transformation** To create new Durations out of old ones use {@link Duration.plus}, {@link Duration.minus}, {@link Duration.normalize}, {@link Duration.set}, {@link Duration.reconfigure}, {@link Duration.shiftTo}, and {@link Duration.negate}.\n* **Output** To convert the Duration into other representations, see {@link Duration.as}, {@link Duration.toISO}, {@link Duration.toFormat}, and {@link Duration.toJSON}\n\nThere's are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.",
    "lineNumber": 163,
    "interface": false
  },
  {
    "__docId__": 193,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/duration.js~Duration#constructor",
    "access": "private",
    "description": "",
    "lineNumber": 167,
    "ignore": true
  },
  {
    "__docId__": 194,
    "kind": "member",
    "name": "values",
    "memberof": "src/duration.js~Duration",
    "static": false,
    "longname": "src/duration.js~Duration#values",
    "access": "private",
    "description": "",
    "lineNumber": 172,
    "ignore": true,
    "type": {
      "types": ["*"]
    }
  },
  {
    "__docId__": 195,
    "kind": "member",
    "name": "loc",
    "memberof": "src/duration.js~Duration",
    "static": false,
    "longname": "src/duration.js~Duration#loc",
    "access": "private",
    "description": "",
    "lineNumber": 176,
    "ignore": true,
    "type": {
      "types": ["*"]
    }
  },
  {
    "__docId__": 196,
    "kind": "member",
    "name": "conversionAccuracy",
    "memberof": "src/duration.js~Duration",
    "static": false,
    "longname": "src/duration.js~Duration#conversionAccuracy",
    "access": "private",
    "description": "",
    "lineNumber": 180,
    "ignore": true,
    "type": {
      "types": ["*"]
    }
  },
  {
    "__docId__": 197,
    "kind": "member",
    "name": "invalid",
    "memberof": "src/duration.js~Duration",
    "static": false,
    "longname": "src/duration.js~Duration#invalid",
    "access": "private",
    "description": "",
    "lineNumber": 184,
    "ignore": true,
    "type": {
      "types": ["*"]
    }
  },
  {
    "__docId__": 198,
    "kind": "member",
    "name": "matrix",
    "memberof": "src/duration.js~Duration",
    "static": false,
    "longname": "src/duration.js~Duration#matrix",
    "access": "private",
    "description": "",
    "lineNumber": 188,
    "ignore": true,
    "type": {
      "types": ["*"]
    }
  },
  {
    "__docId__": 199,
    "kind": "member",
    "name": "isLuxonDuration",
    "memberof": "src/duration.js~Duration",
    "static": false,
    "longname": "src/duration.js~Duration#isLuxonDuration",
    "access": "private",
    "description": "",
    "lineNumber": 192,
    "ignore": true,
    "type": {
      "types": ["boolean"]
    }
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "fromMillis",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/duration.js~Duration.fromMillis",
    "access": "public",
    "description": "Create Duration from a number of milliseconds.",
    "lineNumber": 204,
    "params": [
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": false,
        "name": "count",
        "description": "of milliseconds"
      },
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "options for parsing"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "defaultValue": "'en-US'",
        "defaultRaw": "'en-US'",
        "name": "opts.locale",
        "description": "the locale to use"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "opts.numberingSystem",
        "description": "the numbering system to use"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "defaultValue": "'casual'",
        "defaultRaw": "'casual'",
        "name": "opts.conversionAccuracy",
        "description": "the conversion system to use"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["Duration"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "fromObject",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/duration.js~Duration.fromObject",
    "access": "public",
    "description": "Create a Duration from a Javascript object with keys like 'years' and 'hours.\nIf this object is empty then zero  milliseconds duration is returned.",
    "lineNumber": 226,
    "params": [
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "the object to create the DateTime from"
      },
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": false,
        "name": "obj.years",
        "description": ""
      },
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": false,
        "name": "obj.quarters",
        "description": ""
      },
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": false,
        "name": "obj.months",
        "description": ""
      },
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": false,
        "name": "obj.weeks",
        "description": ""
      },
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": false,
        "name": "obj.days",
        "description": ""
      },
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": false,
        "name": "obj.hours",
        "description": ""
      },
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": false,
        "name": "obj.minutes",
        "description": ""
      },
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": false,
        "name": "obj.seconds",
        "description": ""
      },
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": false,
        "name": "obj.milliseconds",
        "description": ""
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "defaultValue": "'en-US'",
        "defaultRaw": "'en-US'",
        "name": "obj.locale",
        "description": "the locale to use"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "obj.numberingSystem",
        "description": "the numbering system to use"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "defaultValue": "'casual'",
        "defaultRaw": "'casual'",
        "name": "obj.conversionAccuracy",
        "description": "the conversion system to use"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["Duration"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "fromISO",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/duration.js~Duration.fromISO",
    "access": "public",
    "description": "Create a Duration from an ISO 8601 duration string.",
    "examples": [
      "Duration.fromISO('P3Y6M4DT12H30M5S').toObject() //=> { years: 3, months: 6, day: 4, hours: 12, minutes: 30, seconds: 5 }",
      "Duration.fromISO('PT23H').toObject() //=> { hours: 23 }",
      "Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }"
    ],
    "see": ["https://en.wikipedia.org/wiki/ISO_8601#Durations"],
    "lineNumber": 252,
    "params": [
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "text to parse"
      },
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "options for parsing"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "defaultValue": "'en-US'",
        "defaultRaw": "'en-US'",
        "name": "opts.locale",
        "description": "the locale to use"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "opts.numberingSystem",
        "description": "the numbering system to use"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "defaultValue": "'casual'",
        "defaultRaw": "'casual'",
        "name": "opts.conversionAccuracy",
        "description": "the conversion system to use"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["Duration"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "invalid",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/duration.js~Duration.invalid",
    "access": "public",
    "description": "Create an invalid Duration.",
    "lineNumber": 268,
    "params": [
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "reason",
        "description": "simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "explanation",
        "description": "longer explanation, may include parameters and other useful debugging information"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["Duration"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "normalizeUnit",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/duration.js~Duration.normalizeUnit",
    "access": "private",
    "description": "",
    "lineNumber": 285,
    "ignore": true,
    "params": [
      {
        "name": "unit",
        "types": ["*"]
      },
      {
        "name": "ignoreUnknown",
        "optional": true,
        "types": ["boolean"],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": {
      "types": ["*"]
    }
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "isDuration",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/duration.js~Duration.isDuration",
    "access": "public",
    "description": "Check if an object is a Duration. Works across context boundaries",
    "lineNumber": 317,
    "params": [
      {
        "nullable": null,
        "types": ["object"],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": ["boolean"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 206,
    "kind": "get",
    "name": "locale",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/duration.js~Duration#locale",
    "access": "public",
    "description": "Get  the locale of a Duration, such 'en-GB'",
    "lineNumber": 325,
    "type": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 207,
    "kind": "get",
    "name": "numberingSystem",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/duration.js~Duration#numberingSystem",
    "access": "public",
    "description": "Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration",
    "lineNumber": 334,
    "type": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "toFormat",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/duration.js~Duration#toFormat",
    "access": "public",
    "description": "Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:\n* `S` for milliseconds\n* `s` for seconds\n* `m` for minutes\n* `h` for hours\n* `d` for days\n* `M` for months\n* `y` for years\nNotes:\n* Add padding by repeating the token, e.g. \"yy\" pads the years to two digits, \"hhhh\" pads the hours out to four digits\n* The duration will be converted to the set of units in the format string using {@link Duration.shiftTo} and the Durations's conversion accuracy setting.",
    "examples": [
      "Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"y d s\") //=> \"1 6 2\"",
      "Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"yy dd sss\") //=> \"01 06 002\"",
      "Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"M S\") //=> \"12 518402000\""
    ],
    "lineNumber": 358,
    "params": [
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "fmt",
        "description": "the format string"
      },
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "options"
      },
      {
        "nullable": null,
        "types": ["boolean"],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "opts.floor",
        "description": "floor numerical values"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "toObject",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/duration.js~Duration#toObject",
    "access": "public",
    "description": "Returns a Javascript object with this Duration's values.",
    "examples": [
      "Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }"
    ],
    "lineNumber": 375,
    "params": [
      {
        "nullable": null,
        "types": ["*"],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "options for generating the object"
      },
      {
        "nullable": null,
        "types": ["boolean"],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "opts.includeConfig",
        "description": "include configuration attributes in the output"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["Object"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "toISO",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/duration.js~Duration#toISO",
    "access": "public",
    "description": "Returns an ISO 8601-compliant string representation of this Duration.",
    "examples": [
      "Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'",
      "Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'",
      "Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'",
      "Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'",
      "Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'"
    ],
    "see": ["https://en.wikipedia.org/wiki/ISO_8601#Durations"],
    "lineNumber": 398,
    "return": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/duration.js~Duration#toJSON",
    "access": "public",
    "description": "Returns an ISO 8601 representation of this Duration appropriate for use in JSON.",
    "lineNumber": 419,
    "return": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "toString",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/duration.js~Duration#toString",
    "access": "public",
    "description": "Returns an ISO 8601 representation of this Duration appropriate for use in debugging.",
    "lineNumber": 427,
    "return": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "valueOf",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/duration.js~Duration#valueOf",
    "access": "public",
    "description": "Returns an milliseconds value of this Duration.",
    "lineNumber": 435,
    "return": {
      "nullable": null,
      "types": ["number"],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "plus",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/duration.js~Duration#plus",
    "access": "public",
    "description": "Make this Duration longer by the specified amount. Return a newly-constructed Duration.",
    "lineNumber": 444,
    "params": [
      {
        "nullable": null,
        "types": ["Duration", "Object", "number"],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["Duration"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "minus",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/duration.js~Duration#minus",
    "access": "public",
    "description": "Make this Duration shorter by the specified amount. Return a newly-constructed Duration.",
    "lineNumber": 464,
    "params": [
      {
        "nullable": null,
        "types": ["Duration", "Object", "number"],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["Duration"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "get",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/duration.js~Duration#get",
    "access": "public",
    "description": "Get the value of unit.",
    "examples": [
      "Duration.fromObject({years: 2, days: 3}).years //=> 2",
      "Duration.fromObject({years: 2, days: 3}).months //=> 0",
      "Duration.fromObject({years: 2, days: 3}).days //=> 3"
    ],
    "lineNumber": 479,
    "params": [
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "unit",
        "description": "a unit such as 'minute' or 'day'"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["number"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "set",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/duration.js~Duration#set",
    "access": "public",
    "description": "\"Set\" the values of specified units. Return a newly-constructed Duration.",
    "examples": ["dur.set({ years: 2017 })", "dur.set({ hours: 8, minutes: 30 })"],
    "lineNumber": 490,
    "params": [
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "a mapping of units to numbers"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["Duration"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "reconfigure",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/duration.js~Duration#reconfigure",
    "access": "public",
    "description": "\"Set\" the locale and/or numberingSystem.  Returns a newly-constructed Duration.",
    "examples": ["dur.reconfigure({ locale: 'en-GB' })"],
    "lineNumber": 500,
    "return": {
      "nullable": null,
      "types": ["Duration"],
      "spread": false,
      "description": ""
    },
    "params": [
      {
        "name": "objectPattern",
        "optional": true,
        "types": ["{\"locale\": *, \"numberingSystem\": *, \"conversionAccuracy\": *}"],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ]
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "as",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/duration.js~Duration#as",
    "access": "public",
    "description": "Return the length of the duration in the specified unit.",
    "examples": [
      "Duration.fromObject({years: 1}).as('days') //=> 365",
      "Duration.fromObject({years: 1}).as('months') //=> 12",
      "Duration.fromObject({hours: 60}).as('days') //=> 2.5"
    ],
    "lineNumber": 519,
    "params": [
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "unit",
        "description": "a unit such as 'minutes' or 'days'"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["number"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "normalize",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/duration.js~Duration#normalize",
    "access": "public",
    "description": "Reduce this Duration to its canonical representation in its current units.",
    "examples": [
      "Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }",
      "Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }"
    ],
    "lineNumber": 529,
    "return": {
      "nullable": null,
      "types": ["Duration"],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "shiftTo",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/duration.js~Duration#shiftTo",
    "access": "public",
    "description": "Convert this Duration into its representation in a different set of units.",
    "examples": [
      "Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }"
    ],
    "lineNumber": 541,
    "return": {
      "nullable": null,
      "types": ["Duration"],
      "spread": false,
      "description": ""
    },
    "params": [
      {
        "name": "units",
        "types": ["...*"],
        "spread": true
      }
    ]
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "negate",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/duration.js~Duration#negate",
    "access": "public",
    "description": "Return the negative of this Duration.",
    "examples": [
      "Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }"
    ],
    "lineNumber": 612,
    "return": {
      "nullable": null,
      "types": ["Duration"],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 223,
    "kind": "get",
    "name": "years",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/duration.js~Duration#years",
    "access": "public",
    "description": "Get the years.",
    "lineNumber": 625,
    "type": {
      "nullable": null,
      "types": ["number"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 224,
    "kind": "get",
    "name": "quarters",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/duration.js~Duration#quarters",
    "access": "public",
    "description": "Get the quarters.",
    "lineNumber": 633,
    "type": {
      "nullable": null,
      "types": ["number"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 225,
    "kind": "get",
    "name": "months",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/duration.js~Duration#months",
    "access": "public",
    "description": "Get the months.",
    "lineNumber": 641,
    "type": {
      "nullable": null,
      "types": ["number"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 226,
    "kind": "get",
    "name": "weeks",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/duration.js~Duration#weeks",
    "access": "public",
    "description": "Get the weeks",
    "lineNumber": 649,
    "type": {
      "nullable": null,
      "types": ["number"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 227,
    "kind": "get",
    "name": "days",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/duration.js~Duration#days",
    "access": "public",
    "description": "Get the days.",
    "lineNumber": 657,
    "type": {
      "nullable": null,
      "types": ["number"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 228,
    "kind": "get",
    "name": "hours",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/duration.js~Duration#hours",
    "access": "public",
    "description": "Get the hours.",
    "lineNumber": 665,
    "type": {
      "nullable": null,
      "types": ["number"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 229,
    "kind": "get",
    "name": "minutes",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/duration.js~Duration#minutes",
    "access": "public",
    "description": "Get the minutes.",
    "lineNumber": 673,
    "type": {
      "nullable": null,
      "types": ["number"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 230,
    "kind": "get",
    "name": "seconds",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/duration.js~Duration#seconds",
    "access": "public",
    "description": "Get the seconds.",
    "lineNumber": 681,
    "return": {
      "nullable": null,
      "types": ["number"],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": ["*"]
    }
  },
  {
    "__docId__": 231,
    "kind": "get",
    "name": "milliseconds",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/duration.js~Duration#milliseconds",
    "access": "public",
    "description": "Get the milliseconds.",
    "lineNumber": 689,
    "return": {
      "nullable": null,
      "types": ["number"],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": ["*"]
    }
  },
  {
    "__docId__": 232,
    "kind": "get",
    "name": "isValid",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/duration.js~Duration#isValid",
    "access": "public",
    "description": "Returns whether the Duration is invalid. Invalid durations are returned by diff operations\non invalid DateTimes or Intervals.",
    "lineNumber": 698,
    "return": {
      "nullable": null,
      "types": ["boolean"],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": ["*"]
    }
  },
  {
    "__docId__": 233,
    "kind": "get",
    "name": "invalidReason",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/duration.js~Duration#invalidReason",
    "access": "public",
    "description": "Returns an error code if this Duration became invalid, or null if the Duration is valid",
    "lineNumber": 706,
    "return": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": ["*"]
    }
  },
  {
    "__docId__": 234,
    "kind": "get",
    "name": "invalidExplanation",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/duration.js~Duration#invalidExplanation",
    "access": "public",
    "description": "Returns an explanation of why this Duration became invalid, or null if the Duration is valid",
    "lineNumber": 714,
    "type": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "equals",
    "memberof": "src/duration.js~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/duration.js~Duration#equals",
    "access": "public",
    "description": "Equality check\nTwo Durations are equal iff they have the same units and the same values for each unit.",
    "lineNumber": 724,
    "params": [
      {
        "nullable": null,
        "types": ["Duration"],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": ["boolean"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 236,
    "kind": "function",
    "name": "friendlyDuration",
    "memberof": "src/duration.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/duration.js~friendlyDuration",
    "access": "private",
    "export": true,
    "importPath": "luxon/src/duration.js",
    "importStyle": "{friendlyDuration}",
    "description": "",
    "lineNumber": 745,
    "ignore": true,
    "params": [
      {
        "name": "durationish",
        "types": ["*"]
      }
    ],
    "return": {
      "types": ["*"]
    }
  },
  {
    "__docId__": 237,
    "kind": "file",
    "name": "src/errors.js",
    "content": "// these aren't really private, but nor are they really useful to document\n\n/**\n * @private\n */\nclass LuxonError extends Error {}\n\n/**\n * @private\n */\nexport class InvalidDateTimeError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid DateTime: ${reason.toMessage()}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidIntervalError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid Interval: ${reason.toMessage()}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidDurationError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid Duration: ${reason.toMessage()}`);\n  }\n}\n\n/**\n * @private\n */\nexport class ConflictingSpecificationError extends LuxonError {}\n\n/**\n * @private\n */\nexport class InvalidUnitError extends LuxonError {\n  constructor(unit) {\n    super(`Invalid unit ${unit}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidArgumentError extends LuxonError {}\n\n/**\n * @private\n */\nexport class ZoneIsAbstractError extends LuxonError {\n  constructor() {\n    super(\"Zone is an abstract class\");\n  }\n}\n",
    "static": true,
    "longname": "/Users/peterkhayes/Remix/luxon/src/errors.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 238,
    "kind": "class",
    "name": "LuxonError",
    "memberof": "src/errors.js",
    "static": true,
    "longname": "src/errors.js~LuxonError",
    "access": "private",
    "export": false,
    "importPath": "luxon/src/errors.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 6,
    "interface": false,
    "extends": ["Error"],
    "ignore": true
  },
  {
    "__docId__": 239,
    "kind": "class",
    "name": "InvalidDateTimeError",
    "memberof": "src/errors.js",
    "static": true,
    "longname": "src/errors.js~InvalidDateTimeError",
    "access": "private",
    "export": true,
    "importPath": "luxon/src/errors.js",
    "importStyle": "{InvalidDateTimeError}",
    "description": "",
    "lineNumber": 11,
    "interface": false,
    "extends": ["LuxonError"],
    "ignore": true
  },
  {
    "__docId__": 240,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/errors.js~InvalidDateTimeError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/errors.js~InvalidDateTimeError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 241,
    "kind": "class",
    "name": "InvalidIntervalError",
    "memberof": "src/errors.js",
    "static": true,
    "longname": "src/errors.js~InvalidIntervalError",
    "access": "private",
    "export": true,
    "importPath": "luxon/src/errors.js",
    "importStyle": "{InvalidIntervalError}",
    "description": "",
    "lineNumber": 20,
    "interface": false,
    "extends": ["LuxonError"],
    "ignore": true
  },
  {
    "__docId__": 242,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/errors.js~InvalidIntervalError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/errors.js~InvalidIntervalError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true
  },
  {
    "__docId__": 243,
    "kind": "class",
    "name": "InvalidDurationError",
    "memberof": "src/errors.js",
    "static": true,
    "longname": "src/errors.js~InvalidDurationError",
    "access": "private",
    "export": true,
    "importPath": "luxon/src/errors.js",
    "importStyle": "{InvalidDurationError}",
    "description": "",
    "lineNumber": 29,
    "interface": false,
    "extends": ["LuxonError"],
    "ignore": true
  },
  {
    "__docId__": 244,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/errors.js~InvalidDurationError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/errors.js~InvalidDurationError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true
  },
  {
    "__docId__": 245,
    "kind": "class",
    "name": "ConflictingSpecificationError",
    "memberof": "src/errors.js",
    "static": true,
    "longname": "src/errors.js~ConflictingSpecificationError",
    "access": "private",
    "export": true,
    "importPath": "luxon/src/errors.js",
    "importStyle": "{ConflictingSpecificationError}",
    "description": "",
    "lineNumber": 38,
    "interface": false,
    "extends": ["LuxonError"],
    "ignore": true
  },
  {
    "__docId__": 246,
    "kind": "class",
    "name": "InvalidUnitError",
    "memberof": "src/errors.js",
    "static": true,
    "longname": "src/errors.js~InvalidUnitError",
    "access": "private",
    "export": true,
    "importPath": "luxon/src/errors.js",
    "importStyle": "{InvalidUnitError}",
    "description": "",
    "lineNumber": 43,
    "interface": false,
    "extends": ["LuxonError"],
    "ignore": true
  },
  {
    "__docId__": 247,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/errors.js~InvalidUnitError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/errors.js~InvalidUnitError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true
  },
  {
    "__docId__": 248,
    "kind": "class",
    "name": "InvalidArgumentError",
    "memberof": "src/errors.js",
    "static": true,
    "longname": "src/errors.js~InvalidArgumentError",
    "access": "private",
    "export": true,
    "importPath": "luxon/src/errors.js",
    "importStyle": "{InvalidArgumentError}",
    "description": "",
    "lineNumber": 52,
    "interface": false,
    "extends": ["LuxonError"],
    "ignore": true
  },
  {
    "__docId__": 249,
    "kind": "class",
    "name": "ZoneIsAbstractError",
    "memberof": "src/errors.js",
    "static": true,
    "longname": "src/errors.js~ZoneIsAbstractError",
    "access": "private",
    "export": true,
    "importPath": "luxon/src/errors.js",
    "importStyle": "{ZoneIsAbstractError}",
    "description": "",
    "lineNumber": 57,
    "interface": false,
    "extends": ["LuxonError"],
    "ignore": true
  },
  {
    "__docId__": 250,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/errors.js~ZoneIsAbstractError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/errors.js~ZoneIsAbstractError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true
  },
  {
    "__docId__": 251,
    "kind": "file",
    "name": "src/info.js",
    "content": "import DateTime from \"./datetime\";\nimport Settings from \"./settings\";\nimport Locale from \"./impl/locale\";\nimport IANAZone from \"./zones/IANAZone\";\n\nimport { hasFormatToParts, hasIntl } from \"./impl/util\";\n\n/**\n * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.\n */\nexport default class Info {\n  /**\n   * Return whether the specified zone contains a DST.\n   * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.\n   * @return {boolean}\n   */\n  static hasDST(zone = Settings.defaultZone) {\n    const proto = DateTime.local()\n      .setZone(zone)\n      .set({ month: 12 });\n\n    return !zone.universal && proto.offset !== proto.set({ month: 6 }).offset;\n  }\n\n  /**\n   * Return whether the specified zone is a valid IANA specifier.\n   * @param {string} zone - Zone to check\n   * @return {boolean}\n   */\n  static isValidIANAZone(zone) {\n    return !!IANAZone.isValidSpecifier(zone) && IANAZone.isValidZone(zone);\n  }\n\n  /**\n   * Return an array of standalone month names.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @example Info.months()[0] //=> 'January'\n   * @example Info.months('short')[0] //=> 'Jan'\n   * @example Info.months('numeric')[0] //=> '1'\n   * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'\n   * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'\n   * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'\n   * @return {[string]}\n   */\n  static months(\n    length = \"long\",\n    { locale = null, numberingSystem = null, outputCalendar = \"gregory\" } = {}\n  ) {\n    return Locale.create(locale, numberingSystem, outputCalendar).months(length);\n  }\n\n  /**\n   * Return an array of format month names.\n   * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that\n   * changes the string.\n   * See {@link months}\n   * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @return {[string]}\n   */\n  static monthsFormat(\n    length = \"long\",\n    { locale = null, numberingSystem = null, outputCalendar = \"gregory\" } = {}\n  ) {\n    return Locale.create(locale, numberingSystem, outputCalendar).months(length, true);\n  }\n\n  /**\n   * Return an array of standalone week names.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {string} [length='long'] - the length of the month representation, such as \"narrow\", \"short\", \"long\".\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @example Info.weekdays()[0] //=> 'Monday'\n   * @example Info.weekdays('short')[0] //=> 'Mon'\n   * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'\n   * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'\n   * @return {[string]}\n   */\n  static weekdays(length = \"long\", { locale = null, numberingSystem = null } = {}) {\n    return Locale.create(locale, numberingSystem, null).weekdays(length);\n  }\n\n  /**\n   * Return an array of format week names.\n   * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that\n   * changes the string.\n   * See {@link weekdays}\n   * @param {string} [length='long'] - the length of the month representation, such as \"narrow\", \"short\", \"long\".\n   * @param {Object} opts - options\n   * @param {string} [opts.locale=null] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @return {[string]}\n   */\n  static weekdaysFormat(length = \"long\", { locale = null, numberingSystem = null } = {}) {\n    return Locale.create(locale, numberingSystem, null).weekdays(length, true);\n  }\n\n  /**\n   * Return an array of meridiems.\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @example Info.meridiems() //=> [ 'AM', 'PM' ]\n   * @example Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]\n   * @return {[string]}\n   */\n  static meridiems({ locale = null } = {}) {\n    return Locale.create(locale).meridiems();\n  }\n\n  /**\n   * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.\n   * @param {string} [length='short'] - the length of the era representation, such as \"short\" or \"long\".\n   * @param {Object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @example Info.eras() //=> [ 'BC', 'AD' ]\n   * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]\n   * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]\n   * @return {[string]}\n   */\n  static eras(length = \"short\", { locale = null } = {}) {\n    return Locale.create(locale, null, \"gregory\").eras(length);\n  }\n\n  /**\n   * Return the set of available features in this environment.\n   * Some features of Luxon are not available in all environments. For example, on older browsers, timezone support is not available. Use this function to figure out if that's the case.\n   * Keys:\n   * * `zones`: whether this environment supports IANA timezones\n   * * `intlTokens`: whether this environment supports internationalized token-based formatting/parsing\n   * * `intl`: whether this environment supports general internationalization\n   * @example Info.features() //=> { intl: true, intlTokens: false, zones: true }\n   * @return {Object}\n   */\n  static features() {\n    let intl = false,\n      intlTokens = false,\n      zones = false;\n\n    if (hasIntl()) {\n      intl = true;\n      intlTokens = hasFormatToParts();\n\n      try {\n        zones =\n          new Intl.DateTimeFormat(\"en\", { timeZone: \"America/New_York\" }).resolvedOptions()\n            .timeZone === \"America/New_York\";\n      } catch (e) {\n        zones = false;\n      }\n    }\n\n    return { intl, intlTokens, zones };\n  }\n}\n",
    "static": true,
    "longname": "/Users/peterkhayes/Remix/luxon/src/info.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 252,
    "kind": "class",
    "name": "Info",
    "memberof": "src/info.js",
    "static": true,
    "longname": "src/info.js~Info",
    "access": "public",
    "export": true,
    "importPath": "luxon/src/info.js",
    "importStyle": "Info",
    "description": "The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 253,
    "kind": "method",
    "name": "hasDST",
    "memberof": "src/info.js~Info",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/info.js~Info.hasDST",
    "access": "public",
    "description": "Return whether the specified zone contains a DST.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": ["string", "Zone"],
        "spread": false,
        "optional": true,
        "defaultValue": "'local'",
        "defaultRaw": "'local'",
        "name": "zone",
        "description": "Zone to check. Defaults to the environment's local zone."
      }
    ],
    "return": {
      "nullable": null,
      "types": ["boolean"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "isValidIANAZone",
    "memberof": "src/info.js~Info",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/info.js~Info.isValidIANAZone",
    "access": "public",
    "description": "Return whether the specified zone is a valid IANA specifier.",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "zone",
        "description": "Zone to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["boolean"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "months",
    "memberof": "src/info.js~Info",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/info.js~Info.months",
    "access": "public",
    "description": "Return an array of standalone month names.",
    "examples": [
      "Info.months()[0] //=> 'January'",
      "Info.months('short')[0] //=> 'Jan'",
      "Info.months('numeric')[0] //=> '1'",
      "Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'",
      "Info.months('numeric', { locale: 'ar' })[0] //=> '١'",
      "Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'"
    ],
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat"
    ],
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "defaultValue": "'long'",
        "defaultRaw": "'long'",
        "name": "length",
        "description": "the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\""
      },
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "options"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "name": "opts.locale",
        "description": "the locale code"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "opts.numberingSystem",
        "description": "the numbering system"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "defaultValue": "'gregory'",
        "defaultRaw": "'gregory'",
        "name": "opts.outputCalendar",
        "description": "the calendar"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["[string]"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "monthsFormat",
    "memberof": "src/info.js~Info",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/info.js~Info.monthsFormat",
    "access": "public",
    "description": "Return an array of format month names.\nFormat months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that\nchanges the string.\nSee {@link months}",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "defaultValue": "'long'",
        "defaultRaw": "'long'",
        "name": "length",
        "description": "the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\""
      },
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "options"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "name": "opts.locale",
        "description": "the locale code"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "opts.numberingSystem",
        "description": "the numbering system"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "defaultValue": "'gregory'",
        "defaultRaw": "'gregory'",
        "name": "opts.outputCalendar",
        "description": "the calendar"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["[string]"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "weekdays",
    "memberof": "src/info.js~Info",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/info.js~Info.weekdays",
    "access": "public",
    "description": "Return an array of standalone week names.",
    "examples": [
      "Info.weekdays()[0] //=> 'Monday'",
      "Info.weekdays('short')[0] //=> 'Mon'",
      "Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'",
      "Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'"
    ],
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat"
    ],
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "defaultValue": "'long'",
        "defaultRaw": "'long'",
        "name": "length",
        "description": "the length of the month representation, such as \"narrow\", \"short\", \"long\"."
      },
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "options"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "name": "opts.locale",
        "description": "the locale code"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "opts.numberingSystem",
        "description": "the numbering system"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["[string]"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "weekdaysFormat",
    "memberof": "src/info.js~Info",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/info.js~Info.weekdaysFormat",
    "access": "public",
    "description": "Return an array of format week names.\nFormat weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that\nchanges the string.\nSee {@link weekdays}",
    "lineNumber": 104,
    "params": [
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "defaultValue": "'long'",
        "defaultRaw": "'long'",
        "name": "length",
        "description": "the length of the month representation, such as \"narrow\", \"short\", \"long\"."
      },
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "options"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "opts.locale",
        "description": "the locale code"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "opts.numberingSystem",
        "description": "the numbering system"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["[string]"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "meridiems",
    "memberof": "src/info.js~Info",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/info.js~Info.meridiems",
    "access": "public",
    "description": "Return an array of meridiems.",
    "examples": [
      "Info.meridiems() //=> [ 'AM', 'PM' ]",
      "Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]"
    ],
    "lineNumber": 116,
    "params": [
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "options"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "name": "opts.locale",
        "description": "the locale code"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["[string]"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "eras",
    "memberof": "src/info.js~Info",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/info.js~Info.eras",
    "access": "public",
    "description": "Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.",
    "examples": [
      "Info.eras() //=> [ 'BC', 'AD' ]",
      "Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]",
      "Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]"
    ],
    "lineNumber": 130,
    "params": [
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "defaultValue": "'short'",
        "defaultRaw": "'short'",
        "name": "length",
        "description": "the length of the era representation, such as \"short\" or \"long\"."
      },
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "options"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "name": "opts.locale",
        "description": "the locale code"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["[string]"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 261,
    "kind": "method",
    "name": "features",
    "memberof": "src/info.js~Info",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/info.js~Info.features",
    "access": "public",
    "description": "Return the set of available features in this environment.\nSome features of Luxon are not available in all environments. For example, on older browsers, timezone support is not available. Use this function to figure out if that's the case.\nKeys:\n* `zones`: whether this environment supports IANA timezones\n* `intlTokens`: whether this environment supports internationalized token-based formatting/parsing\n* `intl`: whether this environment supports general internationalization",
    "examples": ["Info.features() //=> { intl: true, intlTokens: false, zones: true }"],
    "lineNumber": 144,
    "return": {
      "nullable": null,
      "types": ["Object"],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 262,
    "kind": "file",
    "name": "src/interval.js",
    "content": "import DateTime, { friendlyDateTime } from \"./datetime\";\nimport Duration, { friendlyDuration } from \"./duration\";\nimport Settings from \"./settings\";\nimport { InvalidArgumentError, InvalidIntervalError } from \"./errors\";\nimport Invalid from \"./impl/invalid\";\n\nconst INVALID = \"Invalid Interval\";\n\n// checks if the start is equal to or before the end\nfunction validateStartEnd(start, end) {\n  if (!start || !start.isValid) {\n    return new Invalid(\"missing or invalid start\");\n  } else if (!end || !end.isValid) {\n    return new Invalid(\"missing or invalid end\");\n  } else if (end < start) {\n    return new Invalid(\n      \"end before start\",\n      `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`\n    );\n  } else {\n    return null;\n  }\n}\n\n/**\n * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.\n *\n * Here is a brief overview of the most commonly used methods and getters in Interval:\n *\n * * **Creation** To create an Interval, use {@link fromDateTimes}, {@link after}, {@link before}, or {@link fromISO}.\n * * **Accessors** Use {@link start} and {@link end} to get the start and end.\n * * **Interrogation** To analyze the Interval, use {@link count}, {@link length}, {@link hasSame}, {@link contains}, {@link isAfter}, or {@link isBefore}.\n * * **Transformation** To create other Intervals out of this one, use {@link set}, {@link splitAt}, {@link splitBy}, {@link divideEqually}, {@link merge}, {@link xor}, {@link union}, {@link intersection}, or {@link difference}.\n * * **Comparison** To compare this Interval to another one, use {@link equals}, {@link overlaps}, {@link abutsStart}, {@link abutsEnd}, {@link engulfs}\n * * **Output*** To convert the Interval into other representations, see {@link toString}, {@link toISO}, {@link toFormat}, and {@link toDuration}.\n */\nexport default class Interval {\n  /**\n   * @private\n   */\n  constructor(config) {\n    /**\n     * @access private\n     */\n    this.s = config.start;\n    /**\n     * @access private\n     */\n    this.e = config.end;\n    /**\n     * @access private\n     */\n    this.invalid = config.invalid || null;\n    /**\n     * @access private\n     */\n    this.isLuxonInterval = true;\n  }\n\n  /**\n   * Create an invalid Interval.\n   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {Interval}\n   */\n  static invalid(reason, explanation = null) {\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the Interval is invalid\");\n    }\n\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (Settings.throwOnInvalid) {\n      throw new InvalidIntervalError(invalid);\n    } else {\n      return new Interval({ invalid });\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.\n   * @param {DateTime|Date|Object} start\n   * @param {DateTime|Date|Object} end\n   * @return {Interval}\n   */\n  static fromDateTimes(start, end) {\n    const builtStart = friendlyDateTime(start),\n      builtEnd = friendlyDateTime(end);\n\n    return new Interval({\n      start: builtStart,\n      end: builtEnd,\n      invalid: validateStartEnd(builtStart, builtEnd)\n    });\n  }\n\n  /**\n   * Create an Interval from a start DateTime and a Duration to extend to.\n   * @param {DateTime|Date|Object} start\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static after(start, duration) {\n    const dur = friendlyDuration(duration),\n      dt = friendlyDateTime(start);\n    return Interval.fromDateTimes(dt, dt.plus(dur));\n  }\n\n  /**\n   * Create an Interval from an end DateTime and a Duration to extend backwards to.\n   * @param {DateTime|Date|Object} end\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static before(end, duration) {\n    const dur = friendlyDuration(duration),\n      dt = friendlyDateTime(end);\n    return Interval.fromDateTimes(dt.minus(dur), dt);\n  }\n\n  /**\n   * Create an Interval from an ISO 8601 string.\n   * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.\n   * @param {string} text - the ISO string to parse\n   * @param {Object} [opts] - options to pass {@link DateTime.fromISO} and optionally {@link Duration.fromISO}\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {Interval}\n   */\n  static fromISO(text, opts) {\n    const [s, e] = (text || \"\").split(\"/\", 2);\n    if (s && e) {\n      const start = DateTime.fromISO(s, opts),\n        end = DateTime.fromISO(e, opts);\n\n      if (start.isValid && end.isValid) {\n        return Interval.fromDateTimes(start, end);\n      }\n\n      if (start.isValid) {\n        const dur = Duration.fromISO(e, opts);\n        if (dur.isValid) {\n          return Interval.after(start, dur);\n        }\n      } else if (end.isValid) {\n        const dur = Duration.fromISO(s, opts);\n        if (dur.isValid) {\n          return Interval.before(end, dur);\n        }\n      }\n    }\n    return Interval.invalid(\"unparsable\", `the input \"${text}\" can't be parsed asISO 8601`);\n  }\n\n  /**\n   * Check if an object is an Interval. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n  static isInterval(o) {\n    return o instanceof Interval || o.isLuxonInterval;\n  }\n\n  /**\n   * Returns the start of the Interval\n   * @type {DateTime}\n   */\n  get start() {\n    return this.isValid ? this.s : null;\n  }\n\n  /**\n   * Returns the end of the Interval\n   * @type {DateTime}\n   */\n  get end() {\n    return this.isValid ? this.e : null;\n  }\n\n  /**\n   * Returns whether this Interval's end is at least its start, i.e. that the Interval isn't 'backwards'.\n   * @type {boolean}\n   */\n  get isValid() {\n    return this.invalidReason === null;\n  }\n\n  /**\n   * Returns an error code if this Interval is invalid, or null if the Interval is valid\n   * @type {string}\n   */\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n\n  /**\n   * Returns an explanation of why this Interval became invalid, or null if the Interval is valid\n   * @type {string}\n   */\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n\n  /**\n   * Returns the length of the Interval in the specified unit.\n   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.\n   * @return {number}\n   */\n  length(unit = \"milliseconds\") {\n    return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;\n  }\n\n  /**\n   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.\n   * Unlike {@link length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'\n   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'\n   * @param {string} [unit='milliseconds'] - the unit of time to count.\n   * @return {number}\n   */\n  count(unit = \"milliseconds\") {\n    if (!this.isValid) return NaN;\n    const start = this.start.startOf(unit),\n      end = this.end.startOf(unit);\n    return Math.floor(end.diff(start, unit).get(unit)) + 1;\n  }\n\n  /**\n   * Returns whether this Interval's start and end are both in the same unit of time\n   * @param {string} unit - the unit of time to check sameness on\n   * @return {boolean}\n   */\n  hasSame(unit) {\n    return this.isValid ? this.e.minus(1).hasSame(this.s, unit) : false;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end DateTimes.\n   * @return {boolean}\n   */\n  isEmpty() {\n    return this.s.valueOf() === this.e.valueOf();\n  }\n\n  /**\n   * Return whether this Interval's start is after the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isAfter(dateTime) {\n    if (!this.isValid) return false;\n    return this.s > dateTime;\n  }\n\n  /**\n   * Return whether this Interval's end is before the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isBefore(dateTime) {\n    if (!this.isValid) return false;\n    return this.e <= dateTime;\n  }\n\n  /**\n   * Return whether this Interval contains the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  contains(dateTime) {\n    if (!this.isValid) return false;\n    return this.s <= dateTime && this.e > dateTime;\n  }\n\n  /**\n   * \"Sets\" the start and/or end dates. Returns a newly-constructed Interval.\n   * @param {Object} values - the values to set\n   * @param {DateTime} values.start - the starting DateTime\n   * @param {DateTime} values.end - the ending DateTime\n   * @return {Interval}\n   */\n  set({ start, end } = {}) {\n    if (!this.isValid) return this;\n    return Interval.fromDateTimes(start || this.s, end || this.e);\n  }\n\n  /**\n   * Split this Interval at each of the specified DateTimes\n   * @param {...[DateTime]} dateTimes - the unit of time to count.\n   * @return {[Interval]}\n   */\n  splitAt(...dateTimes) {\n    if (!this.isValid) return [];\n    const sorted = dateTimes.map(friendlyDateTime).sort(),\n      results = [];\n    let { s } = this,\n      i = 0;\n\n    while (s < this.e) {\n      const added = sorted[i] || this.e,\n        next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      i += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into smaller Intervals, each of the specified length.\n   * Left over time is grouped into a smaller interval\n   * @param {Duration|Object|number} duration - The length of each resulting interval.\n   * @return {[Interval]}\n   */\n  splitBy(duration) {\n    const dur = friendlyDuration(duration);\n\n    if (!this.isValid || !dur.isValid || dur.as(\"milliseconds\") === 0) {\n      return [];\n    }\n\n    let { s } = this,\n      added,\n      next;\n\n    const results = [];\n    while (s < this.e) {\n      added = s.plus(dur);\n      next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into the specified number of smaller intervals.\n   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.\n   * @return {[Interval]}\n   */\n  divideEqually(numberOfParts) {\n    if (!this.isValid) return [];\n    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);\n  }\n\n  /**\n   * Return whether this Interval overlaps with the specified Interval\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  overlaps(other) {\n    return this.e > other.s && this.s < other.e;\n  }\n\n  /**\n   * Return whether this Interval's end is adjacent to the specified Interval's start.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsStart(other) {\n    if (!this.isValid) return false;\n    return +this.e === +other.s;\n  }\n\n  /**\n   * Return whether this Interval's start is adjacent to the specified Interval's end.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsEnd(other) {\n    if (!this.isValid) return false;\n    return +other.e === +this.s;\n  }\n\n  /**\n   * Return whether this Interval engulfs the start and end of the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  engulfs(other) {\n    if (!this.isValid) return false;\n    return this.s <= other.s && this.e >= other.e;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end as the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n\n    return this.s.equals(other.s) && this.e.equals(other.e);\n  }\n\n  /**\n   * Return an Interval representing the intersection of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.\n   * Returns null if the intersection is empty, i.e., the intervals don't intersect.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  intersection(other) {\n    if (!this.isValid) return this;\n    const s = this.s > other.s ? this.s : other.s,\n      e = this.e < other.e ? this.e : other.e;\n\n    if (s > e) {\n      return null;\n    } else {\n      return Interval.fromDateTimes(s, e);\n    }\n  }\n\n  /**\n   * Return an Interval representing the union of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  union(other) {\n    if (!this.isValid) return this;\n    const s = this.s < other.s ? this.s : other.s,\n      e = this.e > other.e ? this.e : other.e;\n    return Interval.fromDateTimes(s, e);\n  }\n\n  /**\n   * Merge an array of Intervals into a equivalent minimal set of Intervals.\n   * Combines overlapping and adjacent Intervals.\n   * @param {[Interval]} intervals\n   * @return {[Interval]}\n   */\n  static merge(intervals) {\n    const [found, final] = intervals.sort((a, b) => a.s - b.s).reduce(\n      ([sofar, current], item) => {\n        if (!current) {\n          return [sofar, item];\n        } else if (current.overlaps(item) || current.abutsStart(item)) {\n          return [sofar, current.union(item)];\n        } else {\n          return [sofar.concat([current]), item];\n        }\n      },\n      [[], null]\n    );\n    if (final) {\n      found.push(final);\n    }\n    return found;\n  }\n\n  /**\n   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.\n   * @param {[Interval]} intervals\n   * @return {[Interval]}\n   */\n  static xor(intervals) {\n    let start = null,\n      currentCount = 0;\n    const results = [],\n      ends = intervals.map(i => [{ time: i.s, type: \"s\" }, { time: i.e, type: \"e\" }]),\n      flattened = Array.prototype.concat(...ends),\n      arr = flattened.sort((a, b) => a.time - b.time);\n\n    for (const i of arr) {\n      currentCount += i.type === \"s\" ? 1 : -1;\n\n      if (currentCount === 1) {\n        start = i.time;\n      } else {\n        if (start && +start !== +i.time) {\n          results.push(Interval.fromDateTimes(start, i.time));\n        }\n\n        start = null;\n      }\n    }\n\n    return Interval.merge(results);\n  }\n\n  /**\n   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.\n   * @param {...Interval} intervals\n   * @return {[Interval]}\n   */\n  difference(...intervals) {\n    return Interval.xor([this].concat(intervals))\n      .map(i => this.intersection(i))\n      .filter(i => i && !i.isEmpty());\n  }\n\n  /**\n   * Returns a string representation of this Interval appropriate for debugging.\n   * @return {string}\n   */\n  toString() {\n    if (!this.isValid) return INVALID;\n    return `[${this.s.toISO()} – ${this.e.toISO()})`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Interval.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime.toISO}\n   * @return {string}\n   */\n  toISO(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;\n  }\n\n  /**\n   * Returns a string representation of this Interval formatted according to the specified format string.\n   * @param {string} dateFormat - the format string. This string formats the start and end time. See {@link DateTime.toFormat} for details.\n   * @param {Object} opts - options\n   * @param {string} [opts.separator =  ' – '] - a separator to place between the start and end representations\n   * @return {string}\n   */\n  toFormat(dateFormat, { separator = \" – \" } = {}) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;\n  }\n\n  /**\n   * Return a Duration representing the time spanned by this interval.\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }\n   * @return {Duration}\n   */\n  toDuration(unit, opts) {\n    if (!this.isValid) {\n      return Duration.invalid(this.invalidReason);\n    }\n    return this.e.diff(this.s, unit, opts);\n  }\n}\n",
    "static": true,
    "longname": "/Users/peterkhayes/Remix/luxon/src/interval.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 263,
    "kind": "variable",
    "name": "INVALID",
    "memberof": "src/interval.js",
    "static": true,
    "longname": "src/interval.js~INVALID",
    "access": "public",
    "export": false,
    "importPath": "luxon/src/interval.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": ["string"]
    },
    "ignore": true
  },
  {
    "__docId__": 264,
    "kind": "function",
    "name": "validateStartEnd",
    "memberof": "src/interval.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/interval.js~validateStartEnd",
    "access": "public",
    "export": false,
    "importPath": "luxon/src/interval.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "start",
        "types": ["*"]
      },
      {
        "name": "end",
        "types": ["*"]
      }
    ],
    "return": {
      "types": ["*"]
    },
    "ignore": true
  },
  {
    "__docId__": 265,
    "kind": "class",
    "name": "Interval",
    "memberof": "src/interval.js",
    "static": true,
    "longname": "src/interval.js~Interval",
    "access": "public",
    "export": true,
    "importPath": "luxon/src/interval.js",
    "importStyle": "Interval",
    "description": "An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.\n\nHere is a brief overview of the most commonly used methods and getters in Interval:\n\n* **Creation** To create an Interval, use {@link fromDateTimes}, {@link after}, {@link before}, or {@link fromISO}.\n* **Accessors** Use {@link start} and {@link end} to get the start and end.\n* **Interrogation** To analyze the Interval, use {@link count}, {@link length}, {@link hasSame}, {@link contains}, {@link isAfter}, or {@link isBefore}.\n* **Transformation** To create other Intervals out of this one, use {@link set}, {@link splitAt}, {@link splitBy}, {@link divideEqually}, {@link merge}, {@link xor}, {@link union}, {@link intersection}, or {@link difference}.\n* **Comparison** To compare this Interval to another one, use {@link equals}, {@link overlaps}, {@link abutsStart}, {@link abutsEnd}, {@link engulfs}\n* **Output*** To convert the Interval into other representations, see {@link toString}, {@link toISO}, {@link toFormat}, and {@link toDuration}.",
    "lineNumber": 37,
    "interface": false
  },
  {
    "__docId__": 266,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/interval.js~Interval#constructor",
    "access": "private",
    "description": "",
    "lineNumber": 41,
    "ignore": true
  },
  {
    "__docId__": 267,
    "kind": "member",
    "name": "s",
    "memberof": "src/interval.js~Interval",
    "static": false,
    "longname": "src/interval.js~Interval#s",
    "access": "private",
    "description": "",
    "lineNumber": 45,
    "ignore": true,
    "type": {
      "types": ["*"]
    }
  },
  {
    "__docId__": 268,
    "kind": "member",
    "name": "e",
    "memberof": "src/interval.js~Interval",
    "static": false,
    "longname": "src/interval.js~Interval#e",
    "access": "private",
    "description": "",
    "lineNumber": 49,
    "ignore": true,
    "type": {
      "types": ["*"]
    }
  },
  {
    "__docId__": 269,
    "kind": "member",
    "name": "invalid",
    "memberof": "src/interval.js~Interval",
    "static": false,
    "longname": "src/interval.js~Interval#invalid",
    "access": "private",
    "description": "",
    "lineNumber": 53,
    "ignore": true,
    "type": {
      "types": ["*"]
    }
  },
  {
    "__docId__": 270,
    "kind": "member",
    "name": "isLuxonInterval",
    "memberof": "src/interval.js~Interval",
    "static": false,
    "longname": "src/interval.js~Interval#isLuxonInterval",
    "access": "private",
    "description": "",
    "lineNumber": 57,
    "ignore": true,
    "type": {
      "types": ["boolean"]
    }
  },
  {
    "__docId__": 271,
    "kind": "method",
    "name": "invalid",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/interval.js~Interval.invalid",
    "access": "public",
    "description": "Create an invalid Interval.",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "reason",
        "description": "simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "explanation",
        "description": "longer explanation, may include parameters and other useful debugging information"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["Interval"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 272,
    "kind": "method",
    "name": "fromDateTimes",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/interval.js~Interval.fromDateTimes",
    "access": "public",
    "description": "Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.",
    "lineNumber": 86,
    "params": [
      {
        "nullable": null,
        "types": ["DateTime", "Date", "Object"],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": ""
      },
      {
        "nullable": null,
        "types": ["DateTime", "Date", "Object"],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": ["Interval"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 273,
    "kind": "method",
    "name": "after",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/interval.js~Interval.after",
    "access": "public",
    "description": "Create an Interval from a start DateTime and a Duration to extend to.",
    "lineNumber": 103,
    "params": [
      {
        "nullable": null,
        "types": ["DateTime", "Date", "Object"],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": ""
      },
      {
        "nullable": null,
        "types": ["Duration", "Object", "number"],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "the length of the Interval."
      }
    ],
    "return": {
      "nullable": null,
      "types": ["Interval"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "before",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/interval.js~Interval.before",
    "access": "public",
    "description": "Create an Interval from an end DateTime and a Duration to extend backwards to.",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": ["DateTime", "Date", "Object"],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": ""
      },
      {
        "nullable": null,
        "types": ["Duration", "Object", "number"],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "the length of the Interval."
      }
    ],
    "return": {
      "nullable": null,
      "types": ["Interval"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "fromISO",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/interval.js~Interval.fromISO",
    "access": "public",
    "description": "Create an Interval from an ISO 8601 string.\nAccepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.",
    "see": ["https://en.wikipedia.org/wiki/ISO_8601#Time_intervals"],
    "lineNumber": 129,
    "params": [
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "the ISO string to parse"
      },
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": true,
        "name": "opts",
        "description": "options to pass {@link DateTime.fromISO} and optionally {@link Duration.fromISO}"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["Interval"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "isInterval",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/interval.js~Interval.isInterval",
    "access": "public",
    "description": "Check if an object is an Interval. Works across context boundaries",
    "lineNumber": 159,
    "params": [
      {
        "nullable": null,
        "types": ["object"],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": ["boolean"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 277,
    "kind": "get",
    "name": "start",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/interval.js~Interval#start",
    "access": "public",
    "description": "Returns the start of the Interval",
    "lineNumber": 167,
    "type": {
      "nullable": null,
      "types": ["DateTime"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 278,
    "kind": "get",
    "name": "end",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/interval.js~Interval#end",
    "access": "public",
    "description": "Returns the end of the Interval",
    "lineNumber": 175,
    "type": {
      "nullable": null,
      "types": ["DateTime"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 279,
    "kind": "get",
    "name": "isValid",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/interval.js~Interval#isValid",
    "access": "public",
    "description": "Returns whether this Interval's end is at least its start, i.e. that the Interval isn't 'backwards'.",
    "lineNumber": 183,
    "type": {
      "nullable": null,
      "types": ["boolean"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 280,
    "kind": "get",
    "name": "invalidReason",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/interval.js~Interval#invalidReason",
    "access": "public",
    "description": "Returns an error code if this Interval is invalid, or null if the Interval is valid",
    "lineNumber": 191,
    "type": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 281,
    "kind": "get",
    "name": "invalidExplanation",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/interval.js~Interval#invalidExplanation",
    "access": "public",
    "description": "Returns an explanation of why this Interval became invalid, or null if the Interval is valid",
    "lineNumber": 199,
    "type": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 282,
    "kind": "method",
    "name": "length",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/interval.js~Interval#length",
    "access": "public",
    "description": "Returns the length of the Interval in the specified unit.",
    "lineNumber": 208,
    "params": [
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "unit",
        "description": "the unit (such as 'hours' or 'days') to return the length in."
      }
    ],
    "return": {
      "nullable": null,
      "types": ["number"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "count",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/interval.js~Interval#count",
    "access": "public",
    "description": "Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.\nUnlike {@link length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'\nasks 'what dates are included in this interval?', not 'how many days long is this interval?'",
    "lineNumber": 219,
    "params": [
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "defaultValue": "'milliseconds'",
        "defaultRaw": "'milliseconds'",
        "name": "unit",
        "description": "the unit of time to count."
      }
    ],
    "return": {
      "nullable": null,
      "types": ["number"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 284,
    "kind": "method",
    "name": "hasSame",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/interval.js~Interval#hasSame",
    "access": "public",
    "description": "Returns whether this Interval's start and end are both in the same unit of time",
    "lineNumber": 231,
    "params": [
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "unit",
        "description": "the unit of time to check sameness on"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["boolean"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 285,
    "kind": "method",
    "name": "isEmpty",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/interval.js~Interval#isEmpty",
    "access": "public",
    "description": "Return whether this Interval has the same start and end DateTimes.",
    "lineNumber": 239,
    "return": {
      "nullable": null,
      "types": ["boolean"],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 286,
    "kind": "method",
    "name": "isAfter",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/interval.js~Interval#isAfter",
    "access": "public",
    "description": "Return whether this Interval's start is after the specified DateTime.",
    "lineNumber": 248,
    "params": [
      {
        "nullable": null,
        "types": ["DateTime"],
        "spread": false,
        "optional": false,
        "name": "dateTime",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": ["boolean"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 287,
    "kind": "method",
    "name": "isBefore",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/interval.js~Interval#isBefore",
    "access": "public",
    "description": "Return whether this Interval's end is before the specified DateTime.",
    "lineNumber": 258,
    "params": [
      {
        "nullable": null,
        "types": ["DateTime"],
        "spread": false,
        "optional": false,
        "name": "dateTime",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": ["boolean"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 288,
    "kind": "method",
    "name": "contains",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/interval.js~Interval#contains",
    "access": "public",
    "description": "Return whether this Interval contains the specified DateTime.",
    "lineNumber": 268,
    "params": [
      {
        "nullable": null,
        "types": ["DateTime"],
        "spread": false,
        "optional": false,
        "name": "dateTime",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": ["boolean"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 289,
    "kind": "method",
    "name": "set",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/interval.js~Interval#set",
    "access": "public",
    "description": "\"Sets\" the start and/or end dates. Returns a newly-constructed Interval.",
    "lineNumber": 280,
    "params": [
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "the values to set"
      },
      {
        "nullable": null,
        "types": ["DateTime"],
        "spread": false,
        "optional": false,
        "name": "values.start",
        "description": "the starting DateTime"
      },
      {
        "nullable": null,
        "types": ["DateTime"],
        "spread": false,
        "optional": false,
        "name": "values.end",
        "description": "the ending DateTime"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["Interval"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 290,
    "kind": "method",
    "name": "splitAt",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/interval.js~Interval#splitAt",
    "access": "public",
    "description": "Split this Interval at each of the specified DateTimes",
    "lineNumber": 290,
    "params": [
      {
        "nullable": null,
        "types": ["...[DateTime]"],
        "spread": true,
        "optional": false,
        "name": "dateTimes",
        "description": "the unit of time to count."
      }
    ],
    "return": {
      "nullable": null,
      "types": ["[Interval]"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 291,
    "kind": "method",
    "name": "splitBy",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/interval.js~Interval#splitBy",
    "access": "public",
    "description": "Split this Interval into smaller Intervals, each of the specified length.\nLeft over time is grouped into a smaller interval",
    "lineNumber": 314,
    "params": [
      {
        "nullable": null,
        "types": ["Duration", "Object", "number"],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "The length of each resulting interval."
      }
    ],
    "return": {
      "nullable": null,
      "types": ["[Interval]"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "divideEqually",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/interval.js~Interval#divideEqually",
    "access": "public",
    "description": "Split this Interval into the specified number of smaller intervals.",
    "lineNumber": 341,
    "params": [
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": false,
        "name": "numberOfParts",
        "description": "The number of Intervals to divide the Interval into."
      }
    ],
    "return": {
      "nullable": null,
      "types": ["[Interval]"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "overlaps",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/interval.js~Interval#overlaps",
    "access": "public",
    "description": "Return whether this Interval overlaps with the specified Interval",
    "lineNumber": 351,
    "params": [
      {
        "nullable": null,
        "types": ["Interval"],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": ["boolean"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "abutsStart",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/interval.js~Interval#abutsStart",
    "access": "public",
    "description": "Return whether this Interval's end is adjacent to the specified Interval's start.",
    "lineNumber": 360,
    "params": [
      {
        "nullable": null,
        "types": ["Interval"],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": ["boolean"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "abutsEnd",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/interval.js~Interval#abutsEnd",
    "access": "public",
    "description": "Return whether this Interval's start is adjacent to the specified Interval's end.",
    "lineNumber": 370,
    "params": [
      {
        "nullable": null,
        "types": ["Interval"],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": ["boolean"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "engulfs",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/interval.js~Interval#engulfs",
    "access": "public",
    "description": "Return whether this Interval engulfs the start and end of the specified Interval.",
    "lineNumber": 380,
    "params": [
      {
        "nullable": null,
        "types": ["Interval"],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": ["boolean"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "equals",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/interval.js~Interval#equals",
    "access": "public",
    "description": "Return whether this Interval has the same start and end as the specified Interval.",
    "lineNumber": 390,
    "params": [
      {
        "nullable": null,
        "types": ["Interval"],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": ["boolean"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "intersection",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/interval.js~Interval#intersection",
    "access": "public",
    "description": "Return an Interval representing the intersection of this Interval and the specified Interval.\nSpecifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.\nReturns null if the intersection is empty, i.e., the intervals don't intersect.",
    "lineNumber": 405,
    "params": [
      {
        "nullable": null,
        "types": ["Interval"],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": ["Interval"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 299,
    "kind": "method",
    "name": "union",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/interval.js~Interval#union",
    "access": "public",
    "description": "Return an Interval representing the union of this Interval and the specified Interval.\nSpecifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.",
    "lineNumber": 423,
    "params": [
      {
        "nullable": null,
        "types": ["Interval"],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": ["Interval"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 300,
    "kind": "method",
    "name": "merge",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/interval.js~Interval.merge",
    "access": "public",
    "description": "Merge an array of Intervals into a equivalent minimal set of Intervals.\nCombines overlapping and adjacent Intervals.",
    "lineNumber": 436,
    "params": [
      {
        "nullable": null,
        "types": ["[Interval]"],
        "spread": false,
        "optional": false,
        "name": "intervals",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": ["[Interval]"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 301,
    "kind": "method",
    "name": "xor",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/interval.js~Interval.xor",
    "access": "public",
    "description": "Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.",
    "lineNumber": 460,
    "params": [
      {
        "nullable": null,
        "types": ["[Interval]"],
        "spread": false,
        "optional": false,
        "name": "intervals",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": ["[Interval]"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 302,
    "kind": "method",
    "name": "difference",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/interval.js~Interval#difference",
    "access": "public",
    "description": "Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.",
    "lineNumber": 490,
    "params": [
      {
        "nullable": null,
        "types": ["...Interval"],
        "spread": true,
        "optional": false,
        "name": "intervals",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": ["[Interval]"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 303,
    "kind": "method",
    "name": "toString",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/interval.js~Interval#toString",
    "access": "public",
    "description": "Returns a string representation of this Interval appropriate for debugging.",
    "lineNumber": 500,
    "return": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 304,
    "kind": "method",
    "name": "toISO",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/interval.js~Interval#toISO",
    "access": "public",
    "description": "Returns an ISO 8601-compliant string representation of this Interval.",
    "see": ["https://en.wikipedia.org/wiki/ISO_8601#Time_intervals"],
    "lineNumber": 511,
    "params": [
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "The same options as {@link DateTime.toISO}"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 305,
    "kind": "method",
    "name": "toFormat",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/interval.js~Interval#toFormat",
    "access": "public",
    "description": "Returns a string representation of this Interval formatted according to the specified format string.",
    "lineNumber": 523,
    "params": [
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "dateFormat",
        "description": "the format string. This string formats the start and end time. See {@link DateTime.toFormat} for details."
      },
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "options"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "defaultValue": "  ' – '",
        "defaultRaw": "  ' – '",
        "name": "opts.separator",
        "description": "a separator to place between the start and end representations"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 306,
    "kind": "method",
    "name": "toDuration",
    "memberof": "src/interval.js~Interval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/interval.js~Interval#toDuration",
    "access": "public",
    "description": "Return a Duration representing the time spanned by this interval.",
    "examples": [
      "Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }",
      "Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }",
      "Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }",
      "Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }",
      "Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }"
    ],
    "lineNumber": 540,
    "params": [
      {
        "nullable": null,
        "types": ["string", "string[]"],
        "spread": false,
        "optional": true,
        "defaultValue": "['milliseconds']",
        "defaultRaw": "['milliseconds']",
        "name": "unit",
        "description": "the unit or units (such as 'hours' or 'days') to include in the duration."
      },
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "options that affect the creation of the Duration"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": true,
        "defaultValue": "'casual'",
        "defaultRaw": "'casual'",
        "name": "opts.conversionAccuracy",
        "description": "the conversion system to use"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["Duration"],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 307,
    "kind": "file",
    "name": "src/settings.js",
    "content": "import LocalZone from \"./zones/localZone\";\nimport Locale from \"./impl/locale\";\n\nimport { normalizeZone } from \"./impl/zoneUtil\";\n\nlet now = () => Date.now(),\n  defaultZone = null, // not setting this directly to LocalZone.instance bc loading order issues\n  defaultLocale = null,\n  defaultNumberingSystem = null,\n  defaultOutputCalendar = null,\n  throwOnInvalid = false;\n\n/**\n * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.\n */\nexport default class Settings {\n  /**\n   * Get the callback for returning the current timestamp.\n   * @type {function}\n   */\n  static get now() {\n    return now;\n  }\n\n  /**\n   * Set the callback for returning the current timestamp.\n   * The function should return a number, which will be interpreted as an Epoch millisecond count\n   * @type {function}\n   * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future\n   * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time\n   */\n  static set now(n) {\n    now = n;\n  }\n\n  /**\n   * Get the default time zone to create DateTimes in.\n   * @type {string}\n   */\n  static get defaultZoneName() {\n    return (defaultZone || LocalZone.instance).name;\n  }\n\n  /**\n   * Set the default time zone to create DateTimes in. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultZoneName(z) {\n    if (!z) {\n      defaultZone = null;\n    } else {\n      defaultZone = normalizeZone(z);\n    }\n  }\n\n  /**\n   * Get the default time zone object to create DateTimes in. Does not affect existing instances.\n   * @type {Zone}\n   */\n  static get defaultZone() {\n    return defaultZone || LocalZone.instance;\n  }\n\n  /**\n   * Get the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultLocale() {\n    return defaultLocale;\n  }\n\n  /**\n   * Set the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultLocale(locale) {\n    defaultLocale = locale;\n  }\n\n  /**\n   * Get the default numbering system to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultNumberingSystem() {\n    return defaultNumberingSystem;\n  }\n\n  /**\n   * Set the default numbering system to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultNumberingSystem(numberingSystem) {\n    defaultNumberingSystem = numberingSystem;\n  }\n\n  /**\n   * Get the default output calendar to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultOutputCalendar() {\n    return defaultOutputCalendar;\n  }\n\n  /**\n   * Set the default output calendar to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultOutputCalendar(outputCalendar) {\n    defaultOutputCalendar = outputCalendar;\n  }\n\n  /**\n   * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {boolean}\n   */\n  static get throwOnInvalid() {\n    return throwOnInvalid;\n  }\n\n  /**\n   * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {boolean}\n   */\n  static set throwOnInvalid(t) {\n    throwOnInvalid = t;\n  }\n\n  /**\n   * Reset Luxon's global caches. Should only be necessary in testing scenarios.\n   * @return {void}\n   */\n  static resetCaches() {\n    Locale.resetCache();\n  }\n}\n",
    "static": true,
    "longname": "/Users/peterkhayes/Remix/luxon/src/settings.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 308,
    "kind": "function",
    "name": "now",
    "memberof": "src/settings.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/settings.js~now",
    "access": "public",
    "export": false,
    "importPath": "luxon/src/settings.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 309,
    "kind": "class",
    "name": "Settings",
    "memberof": "src/settings.js",
    "static": true,
    "longname": "src/settings.js~Settings",
    "access": "public",
    "export": true,
    "importPath": "luxon/src/settings.js",
    "importStyle": "Settings",
    "description": "Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.",
    "lineNumber": 16,
    "interface": false
  },
  {
    "__docId__": 310,
    "kind": "get",
    "name": "now",
    "memberof": "src/settings.js~Settings",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/settings.js~Settings.now",
    "access": "public",
    "description": "Get the callback for returning the current timestamp.",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": ["function"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 311,
    "kind": "set",
    "name": "now",
    "memberof": "src/settings.js~Settings",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/settings.js~Settings.now",
    "access": "public",
    "description": "Set the callback for returning the current timestamp.\nThe function should return a number, which will be interpreted as an Epoch millisecond count",
    "examples": [
      "Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future",
      "Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time"
    ],
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": ["function"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 312,
    "kind": "get",
    "name": "defaultZoneName",
    "memberof": "src/settings.js~Settings",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/settings.js~Settings.defaultZoneName",
    "access": "public",
    "description": "Get the default time zone to create DateTimes in.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 313,
    "kind": "set",
    "name": "defaultZoneName",
    "memberof": "src/settings.js~Settings",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/settings.js~Settings.defaultZoneName",
    "access": "public",
    "description": "Set the default time zone to create DateTimes in. Does not affect existing instances.",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 314,
    "kind": "get",
    "name": "defaultZone",
    "memberof": "src/settings.js~Settings",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/settings.js~Settings.defaultZone",
    "access": "public",
    "description": "Get the default time zone object to create DateTimes in. Does not affect existing instances.",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": ["Zone"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 315,
    "kind": "get",
    "name": "defaultLocale",
    "memberof": "src/settings.js~Settings",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/settings.js~Settings.defaultLocale",
    "access": "public",
    "description": "Get the default locale to create DateTimes with. Does not affect existing instances.",
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 316,
    "kind": "set",
    "name": "defaultLocale",
    "memberof": "src/settings.js~Settings",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/settings.js~Settings.defaultLocale",
    "access": "public",
    "description": "Set the default locale to create DateTimes with. Does not affect existing instances.",
    "lineNumber": 76,
    "type": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 317,
    "kind": "get",
    "name": "defaultNumberingSystem",
    "memberof": "src/settings.js~Settings",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/settings.js~Settings.defaultNumberingSystem",
    "access": "public",
    "description": "Get the default numbering system to create DateTimes with. Does not affect existing instances.",
    "lineNumber": 84,
    "type": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 318,
    "kind": "set",
    "name": "defaultNumberingSystem",
    "memberof": "src/settings.js~Settings",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/settings.js~Settings.defaultNumberingSystem",
    "access": "public",
    "description": "Set the default numbering system to create DateTimes with. Does not affect existing instances.",
    "lineNumber": 92,
    "type": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 319,
    "kind": "get",
    "name": "defaultOutputCalendar",
    "memberof": "src/settings.js~Settings",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/settings.js~Settings.defaultOutputCalendar",
    "access": "public",
    "description": "Get the default output calendar to create DateTimes with. Does not affect existing instances.",
    "lineNumber": 100,
    "type": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 320,
    "kind": "set",
    "name": "defaultOutputCalendar",
    "memberof": "src/settings.js~Settings",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/settings.js~Settings.defaultOutputCalendar",
    "access": "public",
    "description": "Set the default output calendar to create DateTimes with. Does not affect existing instances.",
    "lineNumber": 108,
    "type": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 321,
    "kind": "get",
    "name": "throwOnInvalid",
    "memberof": "src/settings.js~Settings",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/settings.js~Settings.throwOnInvalid",
    "access": "public",
    "description": "Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals",
    "lineNumber": 116,
    "type": {
      "nullable": null,
      "types": ["boolean"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 322,
    "kind": "set",
    "name": "throwOnInvalid",
    "memberof": "src/settings.js~Settings",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/settings.js~Settings.throwOnInvalid",
    "access": "public",
    "description": "Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals",
    "lineNumber": 124,
    "type": {
      "nullable": null,
      "types": ["boolean"],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 323,
    "kind": "method",
    "name": "resetCaches",
    "memberof": "src/settings.js~Settings",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/settings.js~Settings.resetCaches",
    "access": "public",
    "description": "Reset Luxon's global caches. Should only be necessary in testing scenarios.",
    "lineNumber": 132,
    "return": {
      "nullable": null,
      "types": ["void"],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 324,
    "kind": "file",
    "name": "src/zone.js",
    "content": "/* eslint no-unused-vars: \"off\" */\nimport { ZoneIsAbstractError } from \"./errors\";\n\n/**\n * @interface\n */\nexport default class Zone {\n  /**\n   * The type of zone\n   * @abstract\n   * @type {string}\n   */\n  get type() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * The name of this zone.\n   * @abstract\n   * @type {string}\n   */\n  get name() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns whether the offset is known to be fixed for the whole year.\n   * @abstract\n   * @type {boolean}\n   */\n  get universal() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns the offset's common name (such as EST) at the specified timestamp\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to get the name\n   * @param {Object} opts - Options to affect the format\n   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.\n   * @param {string} opts.locale - What locale to return the offset name in.\n   * @return {string}\n   */\n  offsetName(ts, opts) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return the offset in minutes for this zone at the specified timestamp.\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to compute the offset\n   * @return {number}\n   */\n  offset(ts) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return whether this Zone is equal to another zoner\n   * @abstract\n   * @param {Zone} otherZone - the zone to compare\n   * @return {boolean}\n   */\n  equals(otherZone) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return whether this Zone is valid.\n   * @abstract\n   * @type {boolean}\n   */\n  get isValid() {\n    throw new ZoneIsAbstractError();\n  }\n}\n",
    "static": true,
    "longname": "/Users/peterkhayes/Remix/luxon/src/zone.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 325,
    "kind": "class",
    "name": "Zone",
    "memberof": "src/zone.js",
    "static": true,
    "longname": "src/zone.js~Zone",
    "access": "public",
    "export": true,
    "importPath": "luxon/src/zone.js",
    "importStyle": "Zone",
    "description": "",
    "lineNumber": 7,
    "interface": true
  },
  {
    "__docId__": 326,
    "kind": "get",
    "name": "type",
    "memberof": "src/zone.js~Zone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/zone.js~Zone#type",
    "access": "public",
    "description": "The type of zone",
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": null
    },
    "abstract": true
  },
  {
    "__docId__": 327,
    "kind": "get",
    "name": "name",
    "memberof": "src/zone.js~Zone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/zone.js~Zone#name",
    "access": "public",
    "description": "The name of this zone.",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": null
    },
    "abstract": true
  },
  {
    "__docId__": 328,
    "kind": "get",
    "name": "universal",
    "memberof": "src/zone.js~Zone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/zone.js~Zone#universal",
    "access": "public",
    "description": "Returns whether the offset is known to be fixed for the whole year.",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": ["boolean"],
      "spread": false,
      "description": null
    },
    "abstract": true
  },
  {
    "__docId__": 329,
    "kind": "method",
    "name": "offsetName",
    "memberof": "src/zone.js~Zone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/zone.js~Zone#offsetName",
    "access": "public",
    "description": "Returns the offset's common name (such as EST) at the specified timestamp",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": false,
        "name": "ts",
        "description": "Epoch milliseconds for which to get the name"
      },
      {
        "nullable": null,
        "types": ["Object"],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "Options to affect the format"
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "opts.format",
        "description": "What style of offset to return. Accepts 'long' or 'short'."
      },
      {
        "nullable": null,
        "types": ["string"],
        "spread": false,
        "optional": false,
        "name": "opts.locale",
        "description": "What locale to return the offset name in."
      }
    ],
    "return": {
      "nullable": null,
      "types": ["string"],
      "spread": false,
      "description": ""
    },
    "abstract": true
  },
  {
    "__docId__": 330,
    "kind": "method",
    "name": "offset",
    "memberof": "src/zone.js~Zone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/zone.js~Zone#offset",
    "access": "public",
    "description": "Return the offset in minutes for this zone at the specified timestamp.",
    "lineNumber": 54,
    "params": [
      {
        "nullable": null,
        "types": ["number"],
        "spread": false,
        "optional": false,
        "name": "ts",
        "description": "Epoch milliseconds for which to compute the offset"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["number"],
      "spread": false,
      "description": ""
    },
    "abstract": true
  },
  {
    "__docId__": 331,
    "kind": "method",
    "name": "equals",
    "memberof": "src/zone.js~Zone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/zone.js~Zone#equals",
    "access": "public",
    "description": "Return whether this Zone is equal to another zoner",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": ["Zone"],
        "spread": false,
        "optional": false,
        "name": "otherZone",
        "description": "the zone to compare"
      }
    ],
    "return": {
      "nullable": null,
      "types": ["boolean"],
      "spread": false,
      "description": ""
    },
    "abstract": true
  },
  {
    "__docId__": 332,
    "kind": "get",
    "name": "isValid",
    "memberof": "src/zone.js~Zone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/zone.js~Zone#isValid",
    "access": "public",
    "description": "Return whether this Zone is valid.",
    "lineNumber": 73,
    "type": {
      "nullable": null,
      "types": ["boolean"],
      "spread": false,
      "description": null
    },
    "abstract": true
  },
  {
    "kind": "index",
    "content": "# Luxon\n\n[![MIT License][license-image]][license] [![Build Status][travis-image]][travis-url] [![NPM version][npm-version-image]][npm-url] [![Coverage Status][test-coverage-image]][test-coverage-url] [![Doc coverage][doc-coverage-image]][doc-url] [![PRs welcome][contributing-image]][contributing-url]\n\nLuxon is a library for working with dates and times in Javascript.\n\n```js\nDateTime.local().setZone('America/New_York').minus({ weeks: 1 }).endOf('day').toISO();\n```\n\n## Features\n * DateTime, Duration, and Interval types.\n * Immutable, chainable, unambiguous API.\n * Parsing and formatting for common and custom formats.\n * Native time zone and Intl support (no locale or tz files).\n\n## Download/install\n\n[Download/install instructions](https://moment.github.io/luxon/docs/manual/install.html)\n\n## Documentation\n\n* [General documentation][doc-url]\n* [API docs](https://moment.github.io/luxon/docs/identifiers.html)\n* [Quick tour](https://moment.github.io/luxon/docs/manual/tour.html)\n* [For Moment users](https://moment.github.io/luxon/docs/manual/moment.html)\n* [Why does Luxon exist?](https://moment.github.io/luxon/docs/manual/why.html)\n* [A quick demo](https://moment.github.io/luxon/demo/global.html)\n\n## Development\n\nSee [contributing](contributing.md).\n\n![Phasers to stun][phasers-image]\n\n[license-image]: http://img.shields.io/badge/license-MIT-blue.svg\n[license]: license.txt\n\n[travis-url]: http://travis-ci.org/moment/luxon\n[travis-image]: https://api.travis-ci.org/moment/luxon.svg?branch=master\n\n[npm-url]: https://npmjs.org/package/luxon\n[npm-version-image]: https://badge.fury.io/js/luxon.svg\n\n[doc-url]: https://moment.github.io/luxon/docs/\n[doc-coverage-image]: https://moment.github.io/luxon/docs/badge.svg\n\n[test-coverage-url]: https://codecov.io/gh/moment/luxon\n[test-coverage-image]: https://codecov.io/gh/moment/luxon/branch/master/graph/badge.svg\n\n[contributing-url]: https://moment.github.io/luxon/docs/manual/contributing.html\n[contributing-image]: https://img.shields.io/badge/PRs-welcome-brightgreen.svg\n\n[phasers-image]: https://img.shields.io/badge/phasers-stun-brightgreen.svg\n",
    "longname": "/Users/peterkhayes/Remix/luxon/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"luxon\",\n  \"version\": \"1.7.1\",\n  \"description\": \"Immutable date wrapper\",\n  \"author\": \"Isaac Cambron\",\n  \"keywords\": [\n    \"date\",\n    \"immutable\"\n  ],\n  \"repository\": \"https://github.com/moment/luxon\",\n  \"scripts\": {\n    \"build\": \"babel-node tasks/buildAll.js\",\n    \"build-node\": \"babel-node tasks/buildNode.js\",\n    \"test\": \"babel-node tasks/unit.js\",\n    \"docs\": \"esdoc -c docs/index.js\",\n    \"site\": \"cp -r site/** build/\",\n    \"lint\": \"eslint --quiet src test benchmarks\",\n    \"lint!\": \"npm run format && npm run lint\",\n    \"format\": \"prettier --config .prettier.js --write 'src/**/*.js' 'test/**/*.js' 'benchmarks/*.js'\",\n    \"benchmark\": \"babel-node benchmarks/datetime.js\",\n    \"codecov\": \"codecov\",\n    \"check-doc-coverage\": \"babel-node tasks/docCoverage\"\n  },\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged\"\n    }\n  },\n  \"lint-staged\": {\n    \"*.{js,json}\": [\n      \"prettier --config .prettier.js --write\",\n      \"git add\"\n    ]\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.1.2\",\n    \"@babel/node\": \"^7.0.0\",\n    \"@babel/plugin-external-helpers\": \"^7.0.0\",\n    \"@babel/preset-env\": \"^7.0.0\",\n    \"babel-core\": \"^7.0.0-bridge.0\",\n    \"babel-eslint\": \"latest\",\n    \"babel-jest\": \"latest\",\n    \"benchmark\": \"latest\",\n    \"codecov\": \"^3.1.0\",\n    \"core-js\": \"^2.5.7\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"latest\",\n    \"eslint\": \"^5.8.0\",\n    \"eslint-config-defaults\": \"latest\",\n    \"eslint-config-prettier\": \"3.1.0\",\n    \"eslint-config-standard\": \"latest\",\n    \"eslint-plugin-babel\": \"latest\",\n    \"eslint-plugin-import\": \"latest\",\n    \"eslint-plugin-node\": \"^8.0.0\",\n    \"eslint-plugin-prettier\": \"3.0.0\",\n    \"eslint-plugin-promise\": \"latest\",\n    \"eslint-plugin-react\": \"latest\",\n    \"eslint-plugin-standard\": \"latest\",\n    \"fs-extra\": \"^6.0.1\",\n    \"full-icu\": \"^1.2.1\",\n    \"husky\": \"latest\",\n    \"jest\": \"latest\",\n    \"jest-cli\": \"^23.6.0\",\n    \"lint-staged\": \"latest\",\n    \"prettier\": \"1.14.3\",\n    \"rollup\": \"latest\",\n    \"rollup-plugin-babel\": \"latest\",\n    \"rollup-plugin-babel-minify\": \"^6.1.1\",\n    \"rollup-plugin-commonjs\": \"^9.2.0\",\n    \"rollup-plugin-node-resolve\": \"latest\",\n    \"uglify-js\": \"latest\"\n  },\n  \"main\": \"build/node/luxon.js\",\n  \"module\": \"src/luxon.js\",\n  \"browser\": \"build/cjs-browser/luxon.js\",\n  \"engines\": {\n    \"node\": \"*\"\n  },\n  \"files\": [\n    \"build/node/luxon.js\",\n    \"build/node/luxon.js.map\",\n    \"build/cjs-browser/luxon.js\",\n    \"build/cjs-browser/luxon.js.map\",\n    \"build/amd/luxon.js\",\n    \"build/amd/luxon.js.map\",\n    \"build/global/luxon.js\",\n    \"build/global/luxon.js.map\",\n    \"build/global/luxon.min.js\",\n    \"build/global/luxon.min.js.map\",\n    \"src\"\n  ],\n  \"license\": \"MIT\"\n}\n",
    "longname": "/Users/peterkhayes/Remix/luxon/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": true,
    "content": "# Luxon Documentation\n\nThis is the manual for Luxon. You'll find guides below and an API doc reference [here](identifiers.html).\n",
    "longname": "/Users/peterkhayes/Remix/luxon/docs/index.md",
    "name": "./docs/index.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/peterkhayes/Remix/luxon/docs/install.md",
    "name": "./docs/install.md",
    "content": "# Install guide\n\nLuxon provides different builds for different JS environments. See below for a link to the right one and instructions on how to use it. Luxon supports all modern platforms, but see [the support matrix](matrix.html) for additional details.\n\n## Basic browser setup\n\n- [Download full](../../global/luxon.js)\n- [Download minified](../../global/luxon.min.js)\n\nJust include Luxon in a script tag. You can access its various classes through the `luxon` global.\n\n```html\n<script src=\"luxon.js\"></script>\n```\n\nYou may wish to alias the classes you use:\n\n```js\nvar DateTime = luxon.DateTime;\n```\n\n### Internet Explorer\n\nIf you're supporting IE 10 or 11, you need some polyfills to get Luxon to work. Use polyfill.io:\n\n```html\n<script src=\"https://cdn.polyfill.io/v2/polyfill.js?features=default,String.prototype.repeat,Array.prototype.find,Array.prototype.findIndex,Math.trunc\"></script>\n```\n\nSee the [support matrix](matrix.html) for more information on what works and what doesn't in IE.\n\n## Node\n\nSupports Node 6+. Install via NPM:\n\n```\nnpm install --save luxon\n```\n\n```js\nconst { DateTime } = require(\"luxon\");\n```\n\nIf you want to work with locales, you'll need to have `full-icu` support installed in Node. You can [build Node with it](https://github.com/nodejs/node/wiki/Intl), use an [NPM module](https://www.npmjs.com/package/full-icu) to provide it, or find it prepackaged for your platform, like `brew install node --with-full-icu`. If you skip this step, Luxon still works but methods like `setLocale()` will do nothing.\n\nThe instructions for using full-icu as a package are a little confusing. Node can't automatically discover that you've installed the it, so you need to tell it where to find the data, like this:\n\n```\nnpm install full-icu\nnode --icu-data-dir=./node_modules/full-icu\n```\n\nYou can also point to the data with an environment var, like this:\n\n```\nNODE_ICU_DATA=\"$(pwd)/node_modules/full-icu\" node\n```\n\n## AMD (System.js, RequireJS, etc)\n\n- [Download full](../../amd/luxon.js)\n- [Download minified](../../amd/luxon.min.js)\n\n```js\nrequirejs([\"luxon\"], function(luxon) {\n  //...\n});\n```\n\n## ES6\n\n- [Download full](../../es6/luxon.js)\n- [Download minified](../../es6/luxon.min.js)\n\n```js\nimport { DateTime } from \"luxon\";\n```\n\n## Webpack\n\n```\nnpm install --save luxon\n```\n\n```js\nimport { DateTime } from \"luxon\";\n```\n\n## Types\n\nThere are third-party typing files for Flow (via [flow-typed](https://github.com/flowtype/flow-typed)) and TypeScript (via [DefinitelyTyped](https://github.com/DefinitelyTyped/DefinitelyTyped)).\n\nFor Flow, use:\n\n```\nflow-typed install luxon\n```\n\nFor TypeScript, use:\n\n```\nnpm install --save-dev @types/luxon\n```\n\n## React Native\n\nReact Native works just fine, but React Native for Android doesn't ship with Intl support, which you need for [a lot of Luxon's functionality](matrix.html). Use [jsc-android-buildscripts](https://github.com/SoftwareMansion/jsc-android-buildscripts) to fix it.\n\n## Meteor\n\n[Help wanted.]\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/peterkhayes/Remix/luxon/docs/tour.md",
    "name": "./docs/tour.md",
    "content": "# A quick tour\n\nLuxon is a library that makes it easier to work with dates and times in Javascript. If you want, add and subtract them, format and parse them, ask them hard questions, and so on, Luxon provides a much easier and comprehensive interface than the native types it wraps. We're going to talk about the most immediately useful subset of that interface.\n\nThis is going to be a bit brisk, but keep in mind that the API docs are comprehensive, so if you want to know more, feel free to [dive into them](../identifiers.html).\n\n## Your first DateTime\n\nThe most important class in Luxon is [DateTime](../class/src/datetime.js~DateTime.html). A DateTime represents a specific millisecond in time, along with a time zone and a locale. Here's one that represents May 15, 2017 at 8:30 in the morning:\n\n```js\nvar dt = DateTime.local(2017, 5, 15, 8, 30);\n```\n\nTo get the current time, just do this:\n\n```js\nvar now = DateTime.local();\n```\n\n[DateTime.local](../class/src/datetime.js~DateTime.html#static-method-local) takes any number of arguments, all the way out to milliseconds. Underneath, this is just a Javascript Date object. But we've decorated it with lots of useful methods.\n\n## Creating a DateTime\n\nThere are lots of ways to create a DateTime by parsing strings or constructing them out of parts. You've already seen one, `DateTime.local()`, but let's talk about two more.\n\n### Create from an object\n\nThe most powerful way to create a DateTime instance is to provide an object containing all the information:\n\n```js\ndt = DateTime.fromObject({day: 22, hour: 12, zone: 'America/Los_Angeles', numberingSystem: 'beng'})\n```\n\nDon't worry too much about the properties you don't understand yet; the point is that you can set every attribute of a DateTime when you create it. One thing to notice from the example is that we just set the day and hour; the year and month get defaulted to the current one and the minutes, seconds, and milliseconds get defaulted to 0. So [DateTime.fromObject](../class/src/datetime.js~DateTime.html#static-method-fromObject) is sort of the power user interface.\n\n### Parse from ISO 8601\n\nLuxon has lots of parsing capabilities, but the most important one is parsing [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) strings, because they're more-or-less the standard wire format for dates and times. Use [DateTime.fromISO](../class/src/datetime.js~DateTime.html#static-method-fromISO).\n\n\n```js\nDateTime.fromISO(\"2017-05-15\")          //=> May 15, 2017 at midnight\nDateTime.fromISO(\"2017-05-15T08:30:00\") //=> May 15, 2017 at 8:30\n```\n\nYou can parse a bunch of other formats, including [your own custom ones](parsing.html).\n\n## Getting to know your DateTime instance\n\nNow that we've made some DateTimes, let's see what we can ask of it.\n\n### toString\n\nThe first thing we want to see is the DateTime as a string. Luxon returns ISO 8601 strings:\n\n```js\nDateTime.local().toString() //=> '2017-09-14T03:20:34.091-04:00'\n```\n\n### Getting at components\n\nWe can get at the components of the time individually through getters. For example:\n\n```js\ndt = DateTime.local()\ndt.year     //=> 2017\ndt.month    //=> 9\ndt.day      //=> 14\ndt.second   //=> 47\ndt.weekday  //=> 4\n```\n\n### Other fun accessors\n\n```js\ndt.zoneName     //=> 'America/New_York'\ndt.offset       //=> -240\ndt.daysInMonth  //=> 30\n```\n\nThere are lots more!\n\n## Formatting your DateTime\n\nYou may want to output your DateTime to a string for a machine or a human to read. Luxon has lots of tools for this, but two of them are most important. If you want to format a human-readable string, use `toLocaleString`:\n\n```js\ndt.toLocaleString()      //=> '9/14/2017'\ndt.toLocaleString(DateTime.DATETIME_MED) //=> 'September 14, 3:21 AM'\n```\n\nThis works well across different locales (languages) by letting the browser figure out what order the different parts go in and how to punctuate them.\n\nIf you want the string read by another program, you almost certainly want to use `toISO`:\n\n```js\ndt.toISO() //=> '2017-09-14T03:21:47.070-04:00'\n```\n\nCustom formats are also supported. See [formatting](formatting).\n\n## Transforming your DateTime\n\n### Immutability\n\nLuxon objects are immutable. That means that you can't alter them in place, just create altered copies. Throughout the documentation, we use terms like \"alter\", \"change\", and \"set\" loosely, but rest assured we mean \"create a new instance with different properties\".\n\n### Math\n\nThis is easier to show than to tell. All of these calls return new DateTime instances:\n\n```js\nvar dt = DateTime.local();\ndt.plus({hours: 3, minutes: 2});\ndt.minus({days: 7});\ndt.startOf('day');\ndt.endOf('hour');\n```\n\n### Set\n\nYou can create new instances by overriding specific properties:\n\n```js\nvar dt = DateTime.local();\ndt.set({hour: 3}).hour   //=> 3\n```\n\n## Intl\n\nLuxon provides several different Intl capabilities, but the most important one is in formatting:\n\n```js\nvar dt = DateTime.local();\nvar f = {month: 'long', day: 'numeric'};\ndt.setLocale('fr').toLocaleString(f)      //=> '14 septembre'\ndt.setLocale('en-GB').toLocaleString(f)   //=> '14 September'\ndt.setLocale('en-US').toLocaleString(f)  //=> 'September 14'\n ```\n\nLuxon's Info class can also list months or weekdays for different locales:\n\n```js\nInfo.months('long', {locale: 'fr'}) //=> [ 'janvier', 'février', 'mars', 'avril', ... ]\n```\n\n## Time zones\n\nLuxon supports time zones. There's a whole [big section](zones) about it. But briefly, you can create DateTimes in specific zones and change their zones:\n\n```js\nDateTime.fromObject({zone: 'America/Los_Angeles'}) // now, but expressed in LA's local time\nDateTime.local().setZone('America/Los_Angeles') // same\n```\n\nLuxon also supports UTC directly:\n\n```js\nDateTime.utc(2017, 5, 15);\nDateTime.utc();\nDateTime.local().toUTC();\nDateTime.utc().toLocal();\n```\n\n## Durations\n\nThe Duration class represents a quantity of time such as \"2 hours and 7 minutes\". You create them like this:\n\n```js\nvar dur = Duration.fromObject({hours: 2, minutes: 7});\n```\n\nThey can be add or subtracted from DateTimes like this:\n\n```js\ndt.plus(dur);\n```\n\nThey have getters just like DateTime:\n\n```js\ndur.hours   //=> 2\ndur.minutes //=> 7\ndur.seconds //=> 0\n```\n\nAnd some other useful stuff:\n\n```js\ndur.as('seconds') //=> 7620\ndur.toObject()    //=> { hours: 2, minutes: 7 }\ndur.toISO()       //=> 'PT2H7M'\n```\n\nYou can also format, negate, and normalize them. See it all in the [Duration API docs](../class/src/duration.js~Duration.html).\n\n## Intervals\n\nIntervals are a specific period of time, such as \"between now and midnight\". They're really a wrapper for two DateTimes that form its endpoints. Here's what you can do with them:\n\n\n```js\nnow = DateTime.local();\nlater = DateTime.local(2020, 10, 12);\ni = Interval.fromDateTimes(now, later);\n\ni.length()                             //=> 97098768468\ni.length('years', true)                //=> 3.0762420239726027\ni.contains(DateTime.local(2019))       //=> true\n\ni.toISO()       //=> '2017-09-14T04:07:11.532-04:00/2020-10-12T00:00:00.000-04:00'\ni.toString()    //=> '[2017-09-14T04:07:11.532-04:00 – 2020-10-12T00:00:00.000-04:00)\n```\n\nIntervals can be split up into smaller intervals, perform set-like operations with other intervals, and few other handy features. See the [Interval API docs](../class/src/interval.js~Interval.html).\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/peterkhayes/Remix/luxon/docs/intl.md",
    "name": "./docs/intl.md",
    "content": "# Intl\n\nLuxon uses the native Intl API to provide easy-to-use internationalization. A quick example:\n\n```js\nDateTime.local()\n  .setLocale(\"el\")\n  .toLocaleString(DateTime.DATE_FULL); //=>  '24 Σεπτεμβρίου 2017'\n```\n\n## Making sure you have access to other locales\n\nPlease see the [install guide](install.html) for instructions on making sure your platform has access to the Intl APIs and the ICU data to power it. This especially important for Node, which doesn't ship with ICU data by default.\n\n## How locales work\n\nLuxon DateTimes can be configured using [BCP 47](https://tools.ietf.org/html/rfc5646) locale strings specifying the language to use generating or interpreting strings. The native Intl API provides the actual internationalized strings; Luxon just wraps it with a nice layer of convenience and integrates the localization functionality into the rest of Luxon. The Mozilla MDN Intl docs have a [good description](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation) of how the `locale` argument works. In Luxon, the methods are different but the semantics are the same, except in that Luxon allows you to specify a numbering system and output calendar independently of the locale string.\n\nThe rest of this document will concentrate on what Luxon does when provided with locale information.\n\n## Setting the locale\n\n`locale` is a property of Luxon object. Thus, locale is a sort of setting on the DateTime object, as opposed to an argument you provide the different methods that need internationalized.\n\nYou can generally set it at construction time:\n\n```js\nvar dt = DateTime.fromISO(\"2017-09-24\", { locale: \"fr\" });\ndt.locale; //=> 'fr'\n```\n\nIn this case, the specified locale didn't change the how the parsing worked (there's nothing localized about it), but it did set the locale property in the resulting instance. For other factory methods, such as `fromFormat`, the locale argument _does_ affect how the string is parsed. See further down for more.\n\nYou can change the locale of a DateTime instance (meaning, create a clone DateTime with a different locale) using `setLocale`:\n\n```js\nDateTime.local().setLocale(\"fr\").locale; //=> 'fr'\n```\n\n`setLocale` is just a convenience for `reconfigure`:\n\n```js\nDateTime.local().reconfigure({ locale: \"fr\" }).locale; //=> 'fr'\n```\n\n## Default locale\n\n### Out-of-the-box behavior\n\nBy default the `locale` property of a new DateTime or Duration is `null`. This means different things in different contexts:\n\n1.  `DateTime#toLocaleString`, `DateTime#toLocaleParts`, and other human-readable-string methods like `Info.months` will fall back on the system locale. On a browser, that means whatever the user has their browser or OS language set to. On Node, that usually means en-US.\n2.  `DateTime.fromFormat` and `DateTime#toFormat` fall back on en-US. That's because these methods are often used to parse or format strings for consumption by APIs that don't care about the user's locale. So we need to pick a locale and stick with it, or the code will break depending on whose browser it runs in.\n3.  There's an exception, though: DateTime#toFormat can take \"macro\" formats like \"D\" that produce localized strings as part of a larger string. These _do_ default to the system locale because their entire purpose is to be localized.\n\n### Setting the default\n\nYou can set a default locale so that news instances will always be created with the specified locale:\n\n```js\nSettings.defaultLocale = \"fr\";\nDateTime.local().locale; //=> 'fr'\n```\n\nNote that this also alters the behavior of `DateTime#toFormat` and `DateTime#fromFormat`.\n\n### Using the system locale in string parsing\n\nYou generally don't want `DateTime#fromFormat` and `DateTime#toFormat` to use the system's locale, since your format won't be sensitive to the locale's string ordering. That's why Luxon doesn't behave that way by default. But if you really want that behavior, you can always do this:\n\n```js\nSettings.defaultLocale = DateTime.local().resolvedLocaleOpts().locale;\n```\n\n## Checking what you got\n\nThe local environment may not support the exact locale you asked for. The native Intl API will try to find the best match. If you want to know what that match was, use `resolvedLocaleOpts`:\n\n```js\nDateTime.fromObject({ locale: \"fr-co\" }).resolvedLocaleOpts(); //=> { locale: 'fr',\n//     numberingSystem: 'latn',\n//     outputCalendar: 'gregory' }\n```\n\n## Methods affected by the locale\n\n### Formatting\n\nThe most important method affected by the locale setting is `toLocaleString`, which allows you to produce internationalized, human-readable strings.\n\n```js\ndt.setLocale(\"fr\").toLocaleString(DateTime.DATE_FULL); //=> '25 septembre 2017'\n```\n\nThat's the normal way to do it: set the locale as property of the DateTime itself and let the `toLocaleString` inherit it. But you can specify the locale directly to `toLocaleString` too:\n\n```js\ndt.toLocaleString(Object.assign({ locale: \"es\" }, DateTime.DATE_FULL)); //=> '25 de septiembre de 2017'\n```\n\nAd-hoc formatting also respects the locale:\n\n```js\ndt.setLocale(\"fr\").toFormat(\"MMMM dd, yyyy GG\"); //=> 'septembre 25, 2017 après Jésus-Christ'\n```\n\n### Parsing\n\nYou can [parse](parsing.html) localized strings:\n\n```js\nDateTime.fromFormat(\"septembre 25, 2017 après Jésus-Christ\", \"MMMM dd, yyyy GG\", { locale: \"fr\" });\n```\n\n### Listing\n\nSome of the methods in the [Info](../class/src/info.js~Info.html) class let you list strings like months, weekdays, and eras, and they can be localized:\n\n```js\nInfo.months(\"long\", { locale: \"fr\" }); //=> [ 'janvier', 'février', ...\nInfo.weekdays(\"long\", { locale: \"fr\" }); //=> [ 'lundi', 'mardi', ...\nInfo.eras(\"long\", { locale: \"fr\" }); //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]\n```\n\n## numberingSystem\n\nDateTimes also have a `numberingSystem` setting that lets you control what system of numerals is used in formatting. In general, you shouldn't override the numbering system provided by the locale. For example, no extra work is needed to get Arabic numbers to show up in Arabic-speaking locales:\n\n```js\nvar dt = DateTime.local().setLocale(\"ar\");\n\ndt.resolvedLocaleOpts(); //=> { locale: 'ar',\n//     numberingSystem: 'arab',\n//     outputCalendar: 'gregory' }\n\ndt.toLocaleString(); //=> '٢٤‏/٩‏/٢٠١٧'\n```\n\nFor this reason, Luxon defaults its own `numberingSystem` property to null, by which it means \"let the Intl API decide\". However, you can override it if you want. This example is admittedly ridiculous:\n\n```js\nvar dt = DateTime.local().reconfigure({ locale: \"it\", numberingSystem: \"beng\" });\ndt.toLocaleString(DateTime.DATE_FULL); //=> '২৪ settembre ২০১৭'\n```\n\nSimilar to `locale`, you can set the default numbering system for new instances:\n\n```js\nSettings.defaultNumberingSystem = \"beng\";\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/peterkhayes/Remix/luxon/docs/zones.md",
    "name": "./docs/zones.md",
    "content": "# Time zones and offsets\n\nLuxon has support for time zones. This page explains how to use them.\n\n## Don't worry!\n\nYou _usually_ don't need to worry about time zones. Your code runs on a computer with a particular time zone and everything will work consistently in that zone without you doing anything. It's when you want to do complicated stuff _across_ zones that you have to think about it. Even then, here are some pointers to help you avoid situations where you have to think carefully about time zones:\n\n1.  Don't make servers think about _local_ times. Configure them to use UTC and write your server's code to work in UTC. Times can often be thought of as a simple count of epoch milliseconds; what you would call that time (e.g. 9:30) in what zone doesn't (again, often) matter.\n2.  Communicate times between systems in ISO 8601, like \"2017-05-15T13:30:34Z\" where possible (it doesn't matter if you use Z or some local offset; the point is that it precisely identifies the millisecond on the global timeline).\n3.  Where possible, only think of time zones as a formatting concern; your application ideally never knows that the time it's working with is called \"9:00\" until it's being rendered to the user.\n4.  Barring 3, do as much manipulation of the time (say, adding an hour to the current time) in the client code that's already running in the time zone where the results will matter.\n\nAll those things will make it less likely you ever need to work explicitly with time zones and may also save you plenty of other headaches. But those aren't possible for some applications; you might need to work with times in zones other than the one the program is running in, for any number of reasons. And that's where Luxon's time zone support comes in.\n\n## Terminology\n\nBear with me here. Time zones are pain in the ass. Luxon has lots of tools to deal with them, but there's no getting around the fact that they're complicated. The terminology for time zones and offsets isn't well-established. But let's try to impose some order:\n\n1.  An **offset** is a difference between the local time and the UTC time, such as +5 (hours) or -12:30. They may be expressed directly in minutes, or in hours, or in a combination of minutes and hours. Here we'll use hours.\n1.  A **time zone** is a set of rules, associated with a geographical location, that determines the local offset from UTC at any given time. The best way to identify a zone is by its IANA string, such as \"America/New_York\". That zone says something to the effect of \"The offset is -4, except between March and November, when it's -5\".\n1.  A **fixed-offset time zone** is any time zone that never changes offsets, such as UTC. Luxon supports fixed-offset zones directly; they're specified like UTC+7, which you can interpret as \"always with an offset of +7\".\n1.  A **named offset** is a time zone-specific name for an offset, such as Eastern Daylight Time. It expresses both the zone (America's EST roughly implies America/New_York) and the current offset (EST means -4). They are also confusing in that they overspecify the offset (e.g. for any given time it is unnecessary to specify EST vs EDT; it's always whichever one is right). They are also ambiguous (BST is both British Summer Time and Bangladesh Standard Time), unstandardized, and internationalized (what would a Frenchman call the US's EST?). For all these reasons, you should avoid them when specifying times programmatically. Luxon only supports their use in formatting.\n\nSome subtleties:\n\n1.  Multiple zones can have the same offset (think about the US's zones and their Canadian equivalents), though they might not have the same offset all the time, depending on when their DSTs are. Thus zones and offsets have a many-to-many relationship.\n1.  Just because a time zone doesn't have a DST now doesn't mean it's fixed. Perhaps it had one in the past. Regardless, Luxon does not have first-class access to the list of rules, so it assumes any IANA-specified zone is not fixed and checks for its current offset programmatically.\n\nIf all this seems too terse, check out these articles. The terminology in them is subtly different but the concepts are the same:\n\n- [Time Zones Aren’t Offsets – Offsets Aren’t Time Zones](https://spin.atomicobject.com/2016/07/06/time-zones-offsets/)\n- [Stack Overflow's timezone wiki page](https://stackoverflow.com/tags/timezone/info)\n\n## Luxon works with time zones\n\nLuxon's DateTime class supports zones directly. By default, a date created in Luxon is \"in\" the local time zone of the machine it's running on. By \"in\" we mean that the DateTime has, as one of its properties, an associated zone.\n\nIt's important to remember that a DateTime represents a specific instant in time and that instant has an unambiguous meaning independent of what time zone you're in; the zone is really piece of social metadata that affects how humans interact with the time, rather than a fact about the passing of time itself. Of course, Luxon is a library for humans, so that social metadata affects Luxon's behavior too. It just doesn't change _what time it is_.\n\nSpecifically, a DateTime's zone affects its behavior in these ways:\n\n1.  Times will be formatted as they would be in that zone.\n1.  Transformations to the DateTime (such as `plus` or `startOf`) will obey any DSTs in that zone that affect the calculation (see \"Math across DSTs\" below)\n\nGenerally speaking, Luxon does not support changing a DateTime's offset, just its zone. That allows it to enforce the behaviors in the list above. The offset for that DateTime is just whatever the zone says it is. If you are unconcerned with the effects above, then you can always give your DateTime a fixed-offset zone.\n\n## Specifying a zone\n\nLuxon's API methods that take a zone as an argument all let you specify the zone in a few ways.\n\n| Type         | Example            | Description                                                       |\n| ------------ | ------------------ | ----------------------------------------------------------------- |\n| IANA         | 'America/New_York' | that zone                                                         |\n| local        | 'local'            | the system's local zone                                           |\n| UTC          | 'utc'              | Universal Coordinated Time                                        |\n| fixed offset | 'UTC+7'            | a fixed offset zone                                               |\n| Zone         | new YourZone()     | A custom implementation of Luxon's Zone interface (advanced only) |\n\n### IANA support\n\nIANA-specified zones are string identifiers like \"America/New_York\" or \"Asia/Tokyo\". Luxon gains direct support for them by abusing built-in Intl APIs. However, your environment may not support them, in which case, you can't fiddle with the zones directly. You can always use the local zone your system is in, UTC, and any fixed-offset zone like UTC+7. You can check if your runtime environment supports IANA zones with our handy utility:\n\n```js\nInfo.features().zones; //=> true\n```\n\nIf you're unsure if all your target environments (browser versions and Node versions) support this, check out the [Support Matrix](matrix.html). You can generally count on modern browsers to have this feature, except IE (it is supported in Edge). You may also [polyfill](matrix.html#zones) your environment.\n\nIf you specify a zone and your environment doesn't support that zone, you'll get an [invalid](validity.html) DateTime. That could be because the environment doesn't support zones at all, because for whatever reason it doesn't support that _particular_ zone, or because the zone is just bogus. Like this:\n\n```js\nbogus = DateTime.local().setZone(\"America/Bogus\");\n\nbogus.isValid; //=> false\nbogus.invalidReason; //=> 'unsupported zone'\n```\n\n## Creating DateTimes\n\n### Local by default\n\nBy default, DateTime instances are created in the system's local zone and parsed strings are interpreted as specifying times in the system's local zone. For example, my computer is configured to use `America/New_York`, which has an offset of -4 in May:\n\n```js\nvar local = DateTime.local(2017, 05, 15, 09, 10, 23);\n\nlocal.zoneName; //=> 'America/New_York'\nlocal.toString(); //=> '2017-05-15T09:10:23.000-04:00'\n\nvar iso = DateTime.fromISO(\"2017-05-15T09:10:23\");\n\niso.zoneName; //=> 'America/New_York'\niso.toString(); //=> '2017-05-15T09:10:23.000-04:00'\n```\n\n### Creating DateTimes in a zone\n\nMany of Luxon's factory methods allow you to tell it specifically what zone to create the DateTime in:\n\n```js\nvar overrideZone = DateTime.fromISO(\"2017-05-15T09:10:23\", { zone: \"Europe/Paris\" });\n\noverrideZone.zoneName; //=> 'Europe/Paris'\noverrideZone.toString(); //=> '2017-05-15T09:10:23.000+02:00'\n```\n\nNote two things:\n\n1.  The date and time specified in the string was interpreted as a Parisian local time (i.e. it's the time that corresponds to what would be called 9:10 _there_).\n2.  The resulting DateTime object is in Europe/Paris.\n\nThose are conceptually independent (i.e. Luxon could have converted the time to the local zone), but it practice it's more convenient for the same option to govern both.\n\nIn addition, one static method, `utc()`, specifically interprets the input as being specified in UTC. It also returns a DateTime in UTC:\n\n```js\nvar utc = DateTime.utc(2017, 05, 15, 09, 10, 23);\n\nutc.zoneName; //=> 'UTC'\nutc.toString(); //=> '2017-05-15T09:10:23.000Z'\n```\n\n### Strings that specify an offset\n\nSome input strings may specify an offset as part of the string itself. In these case, Luxon interprets the time as being specified with that offset, but converts the resulting DateTime into the system's local zone:\n\n```js\nvar specifyOffset = DateTime.fromISO(\"2017-05-15T09:10:23-09:00\");\n\nspecifyOffset.zoneName; //=> 'America/New_York'\nspecifyOffset.toString(); //=> '2017-05-15T14:10:23.000-04:00'\n\nvar specifyZone = DateTime.fromFormat(\n  \"2017-05-15T09:10:23 Europe/Paris\",\n  \"yyyy-MM-dd'T'HH:mm:ss z\"\n);\n\nspecifyZone.zoneName; //=> 'America/New_York'\nspecifyZone.toString(); //=> '2017-05-15T03:10:23.000-04:00'\n```\n\n...unless a zone is specified as an option (see previous section), in which case the DateTime gets converted to _that_ zone:\n\n```js\nvar specifyOffsetAndOverrideZone = DateTime.fromISO(\"2017-05-15T09:10:23-09:00\", {\n  zone: \"Europe/Paris\"\n});\n\nspecifyOffsetAndOverrideZone.zoneName; //=> 'Europe/Paris'\nspecifyOffsetAndOverrideZone.toString(); //=> '2017-05-15T20:10:23.000+02:00'\n```\n\n### setZone\n\nFinally, some parsing functions allow you to \"keep\" the zone in the string as the DateTime's zone. Note that if only an offset is provided by the string, the zone will be a fixed-offset one, since Luxon doesn't know which zone is meant, even if you do.\n\n```js\nvar keepOffset = DateTime.fromISO(\"2017-05-15T09:10:23-09:00\", { setZone: true });\n\nkeepOffset.zoneName; //=> 'UTC-9'\nkeepOffset.toString(); //=> '2017-05-15T09:10:23.000-09:00'\n\nvar keepZone = DateTime.fromFormat(\"2017-05-15T09:10:23 Europe/Paris\", \"yyyy-MM-dd'T'HH:mm:ss z\", {\n  setZone: true\n});\n\nkeepZone.zoneName; //=> 'Europe/Paris'\nkeepZone.toString(); //=> '2017-05-15T09:10:23.000+02:00'\n```\n\n## Changing zones\n\n### setZone\n\nLuxon objects are immutable, so when we say \"changing zones\" we really mean \"creating a new instance with a different zone\". Changing zone generally means \"change the zone in which this DateTime is expressed (and according to which rules it is manipulated), but don't change the underlying timestamp.\" For example:\n\n```js\nvar local = DateTime.local();\nvar rezoned = local.setZone(\"America/Los_Angeles\");\n\n// different local times with different offsets\nlocal.toString(); //=> '2017-09-13T18:30:51.141-04:00'\nrezoned.toString(); //=> '2017-09-13T15:30:51.141-07:00'\n\n// but actually the same time\nlocal.valueOf() === rezoned.valueOf(); //=> true\n```\n\n### keepLocalTime\n\nGenerally, it's best to think of the zone as a sort of metadata that you slide around independent of the underlying count of milliseconds. However, sometimes that's not what you want. Sometimes you want to change zones while keeping the local time fixed and instead altering the timestamp. Luxon supports this:\n\n```js\nvar local = DateTime.local();\nvar rezoned = local.setZone(\"America/Los_Angeles\", { keepLocalTime: true });\n\nlocal.toString(); //=> '2017-09-13T18:36:23.187-04:00'\nrezoned.toString(); //=> '2017-09-13T18:36:23.187-07:00'\n\nlocal.valueOf() === rezoned.valueOf(); //=> false\n```\n\nIf you find that confusing, I recommend just not using it. On the other hand, if you find yourself using this all the time, you are probably doing something wrong.\n\n## Accessors\n\nLuxon DateTimes have a few different accessors that let you find out about the zone and offset:\n\n```js\nvar dt = DateTime.local();\n\ndt.zoneName; //=> 'America/New_York'\ndt.offset; //=> -240\ndt.offsetNameShort; //=> 'EDT'\ndt.offsetNameLong; //=> 'Eastern Daylight Time'\ndt.isOffsetFixed; //=> false\ndt.isInDST; //=> true\n```\n\nThose are all documented in the [DateTime API docs](../class/src/datetime.js~DateTime.html).\n\n## DST weirdness\n\nBecause our ancestors were morons, they opted for a system wherein many governments shift around the local time twice a year for no good reason. And it's not like they do it in a neat, coordinated fashion. No, they do it whimsically, varying the shifts' timing from country to country (or region to region!) and from year to year. And of course, they do it the opposite way south of the Equator. This is all a tremendous waste of everyone's energy and, er, time, but it is how the world works and a date and a time library has to deal with it.\n\nMost of the time, DST shifts will happen without you having to do anything about it and everything will just work. Luxon goes to some pains to make DSTs as unweird as possible. But there are exceptions. This section covers them.\n\n### Invalid times\n\nSome local times simply don't exist. The Spring Forward DST shift involves shifting the local time forward by (usually) one hour. In my zone, `America/New_York`, on March 12, 2017 the millisecond after 1:59:59.999 is 3:00:00.000. Thus the times between 2:00:00.000 and 2:59:59.000, inclusive, don't exist in that zone. But of course, nothing stops a user from constructing a DateTime out of that local time.\n\nIf you create such a DateTime from scratch, the missing time will be advanced by an hour:\n\n```js\nDateTime.local(2017, 3, 12, 2, 30).toString(); //=> '2017-03-12T03:30:00.000-04:00'\n```\n\nYou can also do date math that lands you in the middle of the shift. These also push forward:\n\n```js\nDateTime.local(2017, 3, 11, 2, 30)\n  .plus({ days: 1 })\n  .toString(); //=> '2017-03-12T03:30:00.000-04:00'\nDateTime.local(2017, 3, 13, 2, 30)\n  .minus({ days: 1 })\n  .toString(); //=> '2017-03-12T03:30:00.000-04:00'\n```\n\n### Ambiguous times\n\nHarder to handle are ambiguous times. During Fall Back, some local times happen twice. In my zone, `America/New_York`, on November 5, 2017 the millisecond after 1:59:59.000 became 1:00:00.000. But of course there was already a 1:00 that day, one hour before before this one. So if you create a DateTime with a local time of 1:30, which time do you mean? It's an important question, because they correspond to different moments in time.\n\nHowever, Luxon's behavior here is undefined. It makes no promises about which of the two possible timestamps the instance will represent. Currently, its specific behavior is like this:\n\n```js\nDateTime.local(2017, 11, 5, 1, 30).offset / 60; //=> -4\nDateTime.local(2017, 11, 4, 1, 30).plus({ days: 1 }).offset / 60; //=> -4\nDateTime.local(2017, 11, 6, 1, 30).minus({ days: 1 }).offset / 60; //=> -5\n```\n\nIn other words, sometimes it picks one and sometimes the other. Luxon doesn't guarantee the specific behavior above. That's just what it happens to do.\n\nIf you're curious, this lack of definition is because Luxon doesn't actually know that any particular DateTime is an ambiguous time. It doesn't know the time zones rules at all. It just knows the local time does not contradict the offset and leaves it at that. To find out the time is ambiguous and define exact rules for how to resolve it, Luxon would have to test nearby times to see if it can find duplicate local time, and it would have to do that on every creation of a DateTime, regardless of whether it was anywhere near a real DST shift. Because that's onerous, Luxon doesn't bother.\n\n### Math across DSTs\n\nThere's a whole [section](math.html) about date and time math, but it's worth highlighting one thing here: when Luxon does math across DSTs, it adjusts for them when working with higher-order, variable-length units like days, weeks, months, and years. When working with lower-order, exact units like hours, minutes, and seconds, it does not. For example, DSTs mean that days are not always the same length: one day a year is (usually) 23 hours long and another is 25 hours long. Luxon makes sure that adding days takes that into account. On the other hand, an hour is always 3,600,000 milliseconds.\n\nAn easy way to think of it is that if you add a day to a DateTime, you should always get the same time the next day, regardless of any intervening DSTs. On the other hand, adding 24 hours will result in DateTime that is 24 hours later, which may or may not be the same time the next day. In this example, my zone is `America/New_York`, which had a Spring Forward DST in the early hours of March 12.\n\n```js\nvar start = DateTime.local(2017, 3, 11, 10);\nstart.hour; //=> 10, just for comparison\nstart.plus({ days: 1 }).hour; //=> 10, stayed the same\nstart.plus({ hours: 24 }).hour; //=> 11, DST pushed forward an hour\n```\n\n## Changing the default zone\n\nBy default, Luxon creates DateTimes in the system's local zone. However, you can override this behavior globally:\n\n```js\nSettings.defaultZoneName = \"Asia/Tokyo\";\nDateTime.local().zoneName; //=> 'Asia/Tokyo'\n\nSettings.defaultZoneName = \"utc\";\nDateTime.local().zoneName; //=> 'UTC'\n\n// you can reset by setting to 'local'\n\nSettings.defaultZoneName = \"local\";\nDateTime.local().zoneName; //=> 'America/New_York'\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/peterkhayes/Remix/luxon/docs/calendars.md",
    "name": "./docs/calendars.md",
    "content": "# Calendars\n\nThis covers Luxon's support for various calendar systems. If you don't need to use non-standard calendars, you don't need to read any of this.\n\n## Fully supported calendars\n\nLuxon has full support for Gregorian and ISO Week calendars. What I mean by that is that Luxon can parse dates specified in those calendars, format dates into strings using those calendars, and transform dates using the units of those calendars. For example, here is Luxon working directly with an ISO calendar:\n\n```js\nDateTime.fromISO('2017-W23-3').plus({ weeks: 1, days: 2 }).toISOWeekDate(); //=>  '2017-W24-5'\n```\n\nThe main reason I bring all this is up is to contrast it with the capabilities for other calendars described below.\n\n## Output calendars\n\nLuxon has limited support for other calendaring systems. Which calendars are supported at all is a platform-dependent, but can generally be expected to be these: Buddhist, Chinese, Coptic, Ethioaa, Ethiopic, Hebrew, Indian, Islamic, Islamicc, Japanese, Persian, and ROC. **Support is limited to formatting strings with them**, hence the qualified name \"output calendar\".\n\nIn practice this is pretty useful; you can show users the date in their preferred calendaring system while the software works with dates using Gregorian units or Epoch milliseconds. But the limitations are real enough; Luxon doesn't know how to do things like \"add one Islamic month\".\n\nThe output calendar is a property of the DateTime itself. For example:\n\n```js\nvar dtHebrew = DateTime.local().reconfigure({ outputCalendar: 'hebrew' })\ndtHebrew.outputCalendar; //=> 'hebrew'\ndtHebrew.toLocaleString() //=> '4 Tishri 5778'\n```\n\nYou can modulate the structure of that string with arguments to `toLocaleString` (see [the docs on that](formatting.html#tolocalestring-strings-for-humans-)), but the point here is just that you got the alternative calendar.\n\n### Generally supported calendars\n\nHere's a table of the different calendars with examples generated formatting the same date generated like this:\n\n```js\nDateTime.fromObject({ outputCalendar: c }).toLocaleString(DateTime.DATE_FULL);\n```\n\n| Calendar | Example                  |\n| ---      | ---                      |\n| buddhist | September 24, 2560 BE    |\n| chinese  | Eighth Month 5, 2017     |\n| coptic   | Tout 14, 1734 ERA1       |\n| ethioaa  | Meskerem 14, 7510 ERA0   |\n| ethiopic | Meskerem 14, 2010 ERA1   |\n| hebrew   | 4 Tishri 5778            |\n| indian   | Asvina 2, 1939 Saka      |\n| islamic  | Muharram 4, 1439 AH      |\n| islamicc | Muharram 3, 1439 AH      |\n| japanese | September 24, 29 Heisei  |\n| persian  | Mehr 2, 1396 AP          |\n| roc      | September 24, 106 Minguo |\n\n\n### Default output calendar\n\nYou can set the default output calendar for new DateTime instances like this:\n\n```js\nSettings.defaultOuputCalendar = 'persian';\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/peterkhayes/Remix/luxon/docs/formatting.md",
    "name": "./docs/formatting.md",
    "content": "# Formatting\n\nThis section covers creating strings to represent a DateTime. There are three types of formatting capabilities:\n\n1.  Technical formats like ISO 8601 and RFC 2822\n2.  Internationalizable human-readable formats\n3.  Token-based formatting\n\n## Technical formats (strings for computers)\n\n### ISO 8601\n\n[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) is the most widely used set of string formats for dates and times. Luxon can _parse_ a wide range of them, but provides direct support for formatting only a few of them:\n\n```js\ndt.toISO(); //=> '2017-04-20T11:32:00.000-04:00'\ndt.toISODate(); //=> '2017-04-20'\ndt.toISOWeekDate(); //=> '2017-W17-7'\ndt.toISOTime(); //=> '11:32:00.000-04:00'\n```\n\nGenerally, you'll want the first one. Use it by default when building or interacting with APIs, communicating times over a wire, etc.\n\n### HTTP and RFC 2822\n\nThere are a number of legacy standard date and time formats out there, and Luxon supports some of them. You shouldn't use them unless you have a specific reason to.\n\n```js\ndt.toRFC2822(); //=> 'Thu, 20 Apr 2017 11:32:00 -0400'\ndt.toHTTP(); //=> 'Thu, 20 Apr 2017 03:32:00 GMT'\n```\n\n### Unix timestamps\n\nDateTime objects can also be converted to numerical [Unix timestamps](https://en.wikipedia.org/wiki/Unix_time):\n\n```js\ndt.toMillis(); //=> 1492702320000\ndt.toSeconds(); //=> 1492702320\ndt.valueOf(); //=> 1492702320000, same as .toMillis()\n```\n\n## toLocaleString (strings for humans)\n\n### The basics\n\nModern browsers (and other JS environments) provide support for human-readable, internationalized strings. Luxon provides convenient support for them, and you should use them anytime you want to display a time to a user. Use [toLocaleString](../class/src/datetime.js~DateTime.html#instance-method-toLocaleString) to do it:\n\n```js\ndt.toLocaleString(); //=> '4/20/2017'\ndt.toLocaleString(DateTime.DATETIME_FULL); //=> 'April 20, 2017, 11:32 AM EDT'\ndt.setLocale('fr').toLocaleString(DateTime.DATETIME_FULL); //=> '20 avril 2017 à 11:32 UTC−4'\n```\n\n### Intl.DateTimeFormat\n\nIn the example above, `DateTime.DATETIME_FULL` is one of several convenience formats provided by Luxon. But the arguments are really any object of options that can be provided to [Intl.DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat). For example:\n\n```js\ndt.toLocaleString({ month: 'long', day: 'numeric' }); //=> 'April 20'\n```\n\nAnd that's all the preset is:\n\n```\nDateTime.DATETIME_FULL;  //=> {\n                         //     year: 'numeric',\n                         //     month: 'long',\n                         //     day: 'numeric',\n                         //     hour: 'numeric',\n                         //     minute: '2-digit',\n                         //     timeZoneName: 'short'\n                         //   }\n```\n\nThis also means you can modify the presets as you choose:\n\n```js\ndt.toLocaleString(DateTime.DATE_SHORT); //=>  '4/20/2017'\nvar newFormat = Object.assign({ weekday: 'long' }, DateTime.DATE_SHORT);\ndt.toLocaleString(newFormat); //=>  'Thursday, 4/20/2017'\n```\n\n### Presets\n\nHere's the full set of provided presets using the October 14, 1983 at 13:30:23 as an example.\n\n| Name                        | Description                                                        | Example in en_US                                           | Example in fr                                            |\n| --------------------------- | ------------------------------------------------------------------ | ---------------------------------------------------------- | -------------------------------------------------------- |\n| DATE_SHORT                  | short date                                                         | 10/14/1983                                                 | 14/10/1983                                               |\n| DATE_MED                    | abbreviated date                                                   | Oct 14, 1983                                               | 14 oct. 1983                                             |\n| DATE_FULL                   | full date                                                          | October 14, 1983                                           | 14 octobre 1983                                          |\n| DATE_HUGE                   | full date with weekday                                             | Tuesday, October 14, 1983                                  | vendredi 14 octobre 1983                                 |\n| TIME_SIMPLE                 | time                                                               | 1:30 PM                                                    | 13:30                                                    |\n| TIME_WITH_SECONDS           | time with seconds                                                  | 1:30:23 PM                                                 | 13:30:23                                                 |\n| TIME_WITH_SHORT_OFFSET      | time with seconds and abbreviated named offset                     | 1:30:23 PM EDT                                             | 13:30:23 UTC−4                                           |\n| TIME_WITH_LONG_OFFSET       | time with seconds and full named offset                            | 1:30:23 PM Eastern Daylight Time                           | 13:30:23 heure d’été de l’Est                            |\n| TIME_24_SIMPLE              | 24-hour time                                                       | 13:30                                                      | 13:30                                                    |\n| TIME_24_WITH_SECONDS        | 24-hour time with seconds                                          | 13:30:23                                                   | 13:30:23                                                 |\n| TIME_24_WITH_SHORT_OFFSET   | 24-hour time with seconds and abbreviated named offset             | 13:30:23 EDT                                               | 13:30:23 UTC−4                                           |\n| TIME_24_WITH_LONG_OFFSET    | 24-hour time with seconds and full named offset                    | 13:30:23 Eastern Daylight Time                             | 13:30:23 heure d’été de l’Est                            |\n| DATETIME_SHORT              | short date & time                                                  | 10/14/1983, 1:30 PM                                        | 14/10/1983 à 13:30                                       |\n| DATETIME_MED                | abbreviated date & time                                            | Oct 14, 1983, 1:30 PM                                      | 14 oct. 1983 à 13:30                                     |\n| DATETIME_FULL               | full date and time with abbreviated named offset                   | October 14, 1983, 1:30 PM EDT                              | 14 octobre 1983 à 13:30 UTC−4                            |\n| DATETIME_HUGE               | full date and time with weekday and full named offset              | Friday, October 14, 1983, 1:30 PM Eastern Daylight Time    | vendredi 14 octobre 1983 à 13:30 heure d’été de l’Est    |\n| DATETIME_SHORT_WITH_SECONDS | short date & time with seconds                                     | 10/14/1983, 1:30:23 PM                                     | 14/10/1983 à 13:30:23                                    |\n| DATETIME_MED_WITH_SECONDS   | abbreviated date & time with seconds                               | Oct 14, 1983, 1:30:23 PM                                   | 14 oct. 1983 à 13:30:23                                  |\n| DATETIME_FULL_WITH_SECONDS  | full date and time with abbreviated named offset with seconds      | October 14, 1983, 1:30:23 PM EDT                           | 14 octobre 1983 à 13:30:23 UTC−4                         |\n| DATETIME_HUGE_WITH_SECONDS  | full date and time with weekday and full named offset with seconds | Friday, October 14, 1983, 1:30:23 PM Eastern Daylight Time | vendredi 14 octobre 1983 à 13:30:23 heure d’été de l’Est |\n\n### Intl\n\n`toLocaleString`'s behavior is affected by the DateTime's `locale`, `numberingSystem`, and `outputCalendar` properties. See the [Intl](intl.html) section for more.\n\n## Formatting with tokens (strings for Cthulhu)\n\nThis section covers generating strings from DateTimes with programmer-specified formats.\n\n### Consider alternatives\n\nYou shouldn't create ad-hoc string formats if you can avoid it. If you intend for a computer to read the string, prefer ISO 8601. If a human will read it, prefer `toLocaleString`. Both are covered above. However, if you have some esoteric need where you need some specific format (e.g. because some other software expects it), then `toFormat` is how you do it.\n\n### toFormat\n\nSee [DateTime#toFormat](../class/src/datetime.js~DateTime.html#instance-method-toFormat) for the API signature. As a brief motivating example:\n\n```js\nDateTime.fromISO('2014-08-06T13:07:04.054').toFormat('yyyy LLL dd'); //=> '2014 Aug 06'\n```\n\nThe supported tokens are described in the table below.\n\n### Intl\n\nAll of the strings (e.g. month names and weekday names) are internationalized by introspecting strings generated by the Intl API. Thus they exact strings you get are implementation-specific.\n\n```js\nDateTime.fromISO('2014-08-06T13:07:04.054')\n  .setLocale('fr')\n  .toFormat('yyyy LLL dd'); //=> '2014 août 06'\n```\n\n### Escaping\n\nYou may escape strings using single quotes:\n\n```js\nDateTime.local().toFormat(\"HH 'hours and' mm 'minutes'\"); //=> '20 hours and 55 minutes'\n```\n\n### Standalone vs format tokens\n\nSome tokens have a \"standalone\" and \"format\" version. Some languages require different forms of a word based on whether it is part of a longer phrase or just by itself (e.g. \"Monday the 22nd\" vs \"Monday\"). Use them accordingly.\n\n```js\nvar d = DateTime.fromISO('2014-08-06T13:07:04.054').setLocale('ru');\nd.toFormat('LLLL'); //=> 'август' (standalone)\nd.toFormat('MMMM'); //=> 'августа' (format)\n```\n\n### Macro tokens\n\nSome of the formats are \"macros\", meaning they correspond to multiple components. These use the native Intl API and will order their constituent parts in a locale-friendly way.\n\n```js\nDateTime.fromISO('2014-08-06T13:07:04.054').toFormat('ff'); //=> 'Aug 6, 2014, 1:07 PM'\n```\n\nThe macro options available correspond one-to-one with the preset formats defined for `toLocaleString`.\n\n### Table of tokens\n\n(Examples below given for 2014-08-06T13:07:04.054 considered as a local time in America/New_York).\n\n| Standalone token | Format token | Description                                                    | Example                                                     |\n| ---------------- | ------------ | -------------------------------------------------------------- | ----------------------------------------------------------- |\n| S                |              | millisecond, no padding                                        | 54                                                          |\n| SSS              |              | millisecond, padded to 3                                       | 054                                                         |\n| u                |              | fractional seconds, functionally identical to SSS              | 054                                                         |\n| s                |              | second, no padding                                             | 4                                                           |\n| ss               |              | second, padded to 2 padding                                    | 04                                                          |\n| m                |              | minute, no padding                                             | 7                                                           |\n| mm               |              | minute, padded to 2                                            | 07                                                          |\n| h                |              | hour in 12-hour time, no padding                               | 1                                                           |\n| hh               |              | hour in 12-hour time, padded to 2                              | 01                                                          |\n| H                |              | hour in 24-hour time, no padding                               | 9                                                           |\n| HH               |              | hour in 24-hour time, padded to 2                              | 13                                                          |\n| Z                |              | narrow offset                                                  | +5                                                          |\n| ZZ               |              | short offset                                                   | +05:00                                                      |\n| ZZZ              |              | techie offset                                                  | +0500                                                       |\n| ZZZZ             |              | abbreviated named offset                                       | EST                                                         |\n| ZZZZZ            |              | unabbreviated named offset                                     | Eastern Standard Time                                       |\n| z                |              | IANA zone                                                      | America/New_York                                            |\n| a                |              | meridiem                                                       | AM                                                          |\n| d                |              | day of the month, no padding                                   | 6                                                           |\n| dd               |              | day of the month, padded to 2                                  | 06                                                          |\n| c                | E            | day of the week, as number from 1-7 (Monday is 1, Sunday is 7) | 3                                                           |\n| ccc              | EEE          | day of the week, as an abbreviate localized string             | Wed                                                         |\n| cccc             | EEEE         | day of the week, as an unabbreviated localized string          | Wednesday                                                   |\n| ccccc            | EEEEE        | day of the week, as a single localized letter                  | W                                                           |\n| L                | M            | month as an unpadded number                                    | 8                                                           |\n| LL               | MM           | month as an padded number                                      | 08                                                          |\n| LLL              | MMM          | month as an abbreviated localized string                       | Aug                                                         |\n| LLLL             | MMMM         | month as an unabbreviated localized string                     | August                                                      |\n| LLLLL            | MMMMM        | month as a single localized letter                             | A                                                           |\n| y                |              | year, unpadded                                                 | 2014                                                        |\n| yy               |              | two-digit year                                                 | 14                                                          |\n| yyyy             |              | four- to six- digit year, pads to 4                            | 2014                                                        |\n| G                |              | abbreviated localized era                                      | AD                                                          |\n| GG               |              | unabbreviated localized era                                    | Anno Domini                                                 |\n| GGGGG            |              | one-letter localized era                                       | A                                                           |\n| kk               |              | ISO week year, unpadded                                        | 17                                                          |\n| kkkk             |              | ISO week year, padded to 4                                     | 2014                                                        |\n| W                |              | ISO week number, unpadded                                      | 32                                                          |\n| WW               |              | ISO week number, padded to 2                                   | 32                                                          |\n| o                |              | ordinal (day of year), unpadded                                | 218                                                         |\n| ooo              |              | ordinal (day of year), padded to 3                             | 218                                                         |\n| q                |              | quarter, no padding                                            | 3                                                           |\n| qq               |              | quarter, padded to 2                                           | 03                                                          |\n| D                |              | localized numeric date                                         | 9/4/2017                                                    |\n| DD               |              | localized date with abbreviated month                          | Aug 6, 2014                                                 |\n| DDD              |              | localized date with full month                                 | August 6, 2014                                              |\n| DDDD             |              | localized date with full month and weekday                     | Wednesday, August 6, 2014                                   |\n| t                |              | localized time                                                 | 9:07 AM                                                     |\n| tt               |              | localized time with seconds                                    | 1:07:04 PM                                                  |\n| ttt              |              | localized time with seconds and abbreviated offset             | 1:07:04 PM EDT                                              |\n| tttt             |              | localized time with seconds and full offset                    | 1:07:04 PM Eastern Daylight Time                            |\n| T                |              | localized 24-hour time                                         | 13:07                                                       |\n| TT               |              | localized 24-hour time with seconds                            | 13:07:04                                                    |\n| TTT              |              | localized 24-hour time with seconds and abbreviated offset     | 13:07:04 EDT                                                |\n| TTTT             |              | localized 24-hour time with seconds and full offset            | 13:07:04 Eastern Daylight Time                              |\n| f                |              | short localized date and time                                  | 8/6/2014, 1:07 PM                                           |\n| ff               |              | less short localized date and time                             | Aug 6, 2014, 1:07 PM                                        |\n| fff              |              | verbose localized date and time                                | August 6, 2014, 1:07 PM EDT                                 |\n| ffff             |              | extra verbose localized date and time                          | Wednesday, August 6, 2014, 1:07 PM Eastern Daylight Time    |\n| F                |              | short localized date and time with seconds                     | 8/6/2014, 1:07:04 PM                                        |\n| FF               |              | less short localized date and time with seconds                | Aug 6, 2014, 1:07:04 PM                                     |\n| FFF              |              | verbose localized date and time with seconds                   | August 6, 2014, 1:07:04 PM EDT                              |\n| FFFF             |              | extra verbose localized date and time with seconds             | Wednesday, August 6, 2014, 1:07:04 PM Eastern Daylight Time |\n| X                |              | unix timestamp in seconds                                      | 1407287224                                                  |\n| x                |              | unix timestamp in milliseconds                                 | 1407287224054                                              |\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/peterkhayes/Remix/luxon/docs/parsing.md",
    "name": "./docs/parsing.md",
    "content": "# Parsing\n\nLuxon is not an NLP tool and isn't suitable for all date parsing jobs. But it can do some parsing:\n\n1.  Direct support for several well-known formats, including most valid ISO 8601 formats\n2.  An ad-hoc parser for parsing specific formats\n\n## Parsing technical formats\n\n### ISO 8601\n\nLuxon supports a wide range of valid ISO 8601 formats through the [fromISO](../class/src/datetime.js~DateTime.html#static-method-fromISO) method.\n\n```js\nDateTime.fromISO('2016-05-25');\n```\n\nAll of these are parsable by `fromISO`:\n\n```\n2016\n2016-05\n201605\n2016-05-25\n20160525\n2016-05-25T09\n2016-05-25T09:24\n2016-05-25T09:24:15\n2016-05-25T09:24:15.123\n2016-05-25T0924\n2016-05-25T092415\n2016-05-25T092415.123\n2016-05-25T09:24:15,123\n2016-W21-3\n2016W213\n2016-W21-3T09:24:15.123\n2016W213T09:24:15.123\n2016-200\n2016200\n2016-200T09:24:15.123\n09:24\n09:24:15\n09:24:15.123\n09:24:15,123\n```\n\n- In addition, all the times support offset arguments like \"Z\" and \"+06:00\".\n- Missing lower-order values are always set to the minimum possible value; i.e. it always parses to a full DateTime. For example, \"2016-05-25\" parses to midnight of that day. \"2016-05\" parses to the first of the month, etc.\n- The time is parsed as a local time if no offset is specified, but see the method docs to see your options, and also check out [time zone docs](zones.html) for more details.\n\n### HTTP and RFC2822\n\nLuxon also provides parsing for strings formatted according to RFC 2822 and the HTTP header specs (RFC 850 and 1123):\n\n```js\nDateTime.fromRFC2822('Tue, 01 Nov 2016 13:23:12 +0630');\nDateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT');\nDateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT');\n```\n\n### SQL\n\nLuxon accepts SQL dates, times, and datetimes, via [fromSQL](../class/src/datetime.js~DateTime.html#static-method-fromSQL):\n\n```js\nDateTime.fromSQL('2017-05-15');\nDateTime.fromSQL('2017-05-15 09:24:15');\nDateTime.fromSQL('09:24:15');\n```\n\nIt works similarly to `fromISO`, so see above for additional notes.\n\n### Unix timestamps\n\nLuxon can parse numerical [Unix timestamps](https://en.wikipedia.org/wiki/Unix_time):\n\n```js\nDateTime.fromMillis(1542674993410);\nDateTime.fromSeconds(1542674993);\n```\n\nBoth methods accept the same options, which allow you to specify a timezone, calendar, and/or numbering system.\n\n\n## Ad-hoc parsing\n\n### Consider alternatives\n\nYou generally shouldn't use Luxon to parse arbitrarily formatted date strings:\n\n1.  If the string was generated by a computer for programmatic access, use a standard format like ISO 8601. Then you can parse it using [DateTime.fromISO](../class/src/datetime.js~DateTime.html#static-method-fromISO).\n2.  If the string is typed out by a human, it may not conform to the format you specify when asking Luxon to parse it. Luxon is quite strict about the format matching the string exactly.\n\nSometimes, though, you get a string from some legacy system in some terrible ad-hoc format and you need to parse it.\n\n### fromFormat\n\nSee [DateTime.fromFormat](../class/src/datetime.js~DateTime.html#static-method-fromFormat) for the method signature. A brief example:\n\n```js\nDateTime.fromFormat('May 25 1982', 'LLLL dd yyyy');\n```\n\n### Intl\n\nLuxon supports parsing internationalized strings:\n\n```js\nDateTime.fromFormat('mai 25 1982', 'LLLL dd yyyy', { locale: 'fr' });\n```\n\nNote, however, that Luxon derives the list of strings that can match, say, \"LLLL\" (and their meaning) by introspecting the environment's Intl implementation. Thus the exact strings may in some cases be environment-specific. You also need the Intl API available on the target platform (see the [support matrix](matrix.html)).\n\n### Limitations\n\nNot every token supported by `DateTime#toFormat` is supported in the parser. For example, there's no `ZZZZ` or `ZZZZZ` tokens. This is for a few reasons:\n\n- Luxon relies on natively-available functionality that only provides the mapping in one direction. We can ask what the named offset is and get \"Eastern Standard Time\" but not ask what \"Eastern Standard Time\" is most likely to mean.\n- Some things are ambiguous. There are several Eastern Standard Times in different countries and Luxon has no way to know which one you mean without additional information (such as that the zone is America/New_York) that would make EST superfluous anyway. Similarly, the single-letter month and weekday formats (EEEEE) that are useful in displaying calendars graphically can't be parsed because of their ambiguity.\n- Luxon doesn't yet support parsing the macro tokens it provides for formatting. This may eventually be addressed.\n\n### Debugging\n\nThere are two kinds of things that can go wrong when parsing a string: a) you make a mistake with the tokens or b) the information parsed from the string does not correspond to a valid date. To help you sort that out, Luxon provides a method called [fromFormatExplain](../class/src/datetime.js~DateTime.html#static-method-fromFormatExplain). It takes the same arguments as `fromFormat` but returns a map of information about the parse that can be useful in debugging.\n\nFor example, here the code is using \"MMMM\" where \"MMM\" was needed. You can see the regex Luxon uses and see that it didn't match anything:\n\n```js\n> DateTime.fromFormatExplain(\"Aug 6 1982\", \"MMMM d yyyy\")\n\n{ input: 'Aug 6 1982',\n  tokens:\n   [ { literal: false, val: 'MMMM' },\n     { literal: false, val: ' ' },\n     { literal: false, val: 'd' },\n     { literal: false, val: ' ' },\n     { literal: false, val: 'yyyy' } ],\n  regex: '(January|February|March|April|May|June|July|August|September|October|November|December)( )(\\\\d\\\\d?)( )(\\\\d{4})',\n  matches: {},\n  result: {},\n  zone: null }\n```\n\nIf you parse something and get an invalid date, the debugging steps are slightly different. Here, we're attempting to parse August 32nd, which doesn't exist:\n\n```js\nvar d = DateTime.fromFormat('August 32 1982', 'MMMM d yyyy');\nd.isValid; //=> false\nd.invalidReason; //=> 'day out of range'\n```\n\nFor more on validity and how to debug it, see [validity](validity.html). You may find more comprehensive tips there. But as it applies specifically to `fromFormat`, again try `fromFormatExplain`:\n\n```js\n> DateTime.fromFormatExplain(\"August 32 1982\", \"MMMM d yyyy\")\n\n{ input: 'August 32 1982',\n  tokens:\n   [ { literal: false, val: 'MMMM' },\n     { literal: false, val: ' ' },\n     { literal: false, val: 'd' },\n     { literal: false, val: ' ' },\n     { literal: false, val: 'yyyy' } ],\n  regex: '(January|February|March|April|May|June|July|August|September|October|November|December)( )(\\\\d\\\\d?)( )(\\\\d{4})',\n  matches: { M: 8, d: 32, y: 1982 },\n  result: { month: 8, day: 32, year: 1982 },\n  zone: null }\n```\n\nBecause Luxon was able to parse the string without difficulty, the output is a lot richer. And you can see that the \"day\" field is set to 32. Combined with the \"out of range\" explanation above, that should clear up the situation.\n\n### Table of tokens\n\n(Examples below given for 2014-08-06T13:07:04.054 considered as a local time in America/New_York). Note that many tokens supported by the [formatter](formatting.md) are **not** supported by the parser. That includes all the \"macro\" formats like \"D\" for \"localized numeric date\".\n\n| Standalone token | Format token | Description                                                    | Example          |\n| ---------------- | ------------ | -------------------------------------------------------------- | ---------------- |\n| S                |              | millisecond, no padding                                        | 54               |\n| SSS              |              | millisecond, padded to 3                                       | 054              |\n| u                |              | fractional seconds, (5 is a half second, 54 is slightly more)  | 54               |\n| s                |              | second, no padding                                             | 4                |\n| ss               |              | second, padded to 2 padding                                    | 04               |\n| m                |              | minute, no padding                                             | 7                |\n| mm               |              | minute, padded to 2                                            | 07               |\n| h                |              | hour in 12-hour time, no padding                               | 1                |\n| hh               |              | hour in 12-hour time, padded to 2                              | 01               |\n| H                |              | hour in 24-hour time, no padding                               | 9                |\n| HH               |              | hour in 24-hour time, padded to 2                              | 13               |\n| Z                |              | narrow offset                                                  | +5               |\n| ZZ               |              | short offset                                                   | +05:00           |\n| ZZZ              |              | techie offset                                                  | +0500            |\n| z                |              | IANA zone                                                      | America/New_York |\n| a                |              | meridiem                                                       | AM               |\n| d                |              | day of the month, no padding                                   | 6                |\n| dd               |              | day of the month, padded to 2                                  | 06               |\n| E                | c            | day of the week, as number from 1-7 (Monday is 1, Sunday is 7) | 3                |\n| EEE              | ccc          | day of the week, as an abbreviate localized string             | Wed              |\n| EEEE             | cccc         | day of the week, as an unabbreviated localized string          | Wednesday        |\n| M                | L            | month as an unpadded number                                    | 8                |\n| MM               | LL           | month as an padded number                                      | 08               |\n| MMM              | LLL          | month as an abbreviated localized string                       | Aug              |\n| MMMM             | LLLL         | month as an unabbreviated localized string                     | August           |\n| y                |              | year, 1-6 digits, very literally                               | 2014             |\n| yy               |              | two-digit year, interpreted as > 1960 (also accepts 4)         | 14               |\n| yyyy             |              | four-digit year                                                | 2014             |\n| yyyyy            |              | four- to six-digit years                                       | 10340            |\n| yyyyyy           |              | six-digit years                                                | 010340           |\n| G                |              | abbreviated localized era                                      | AD               |\n| GG               |              | unabbreviated localized era                                    | Anno Domini      |\n| GGGGG            |              | one-letter localized era                                       | A                |\n| kk               |              | ISO week year, unpadded                                        | 17               |\n| kkkk             |              | ISO week year, padded to 4                                     | 2014             |\n| W                |              | ISO week number, unpadded                                      | 32               |\n| WW               |              | ISO week number, padded to 2                                   | 32               |\n| o                |              | ordinal (day of year), unpadded                                | 218              |\n| ooo              |              | ordinal (day of year), padded to 3                             | 218              |\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/peterkhayes/Remix/luxon/docs/math.md",
    "name": "./docs/math.md",
    "content": "# Math\n\nThis page covers some oddball topics related to date and time math, which has some quirky corner cases.\n\n## Calendar math vs time math\n\n### The basics\n\nMath with dates and times can be unintuitive to programmers. If it's Feb 13, 2017 and I say \"in exactly one month\", you know I mean March 13. Exactly one month after that is April 13. But because February is a shorter month than March, that means we added a different amount of time in each case. On the other hand, if I said \"30 days from February 13\", you'd try to figure out what day that landed on in March. Here it is in Luxon:\n\n```js\nDateTime.local(2017, 2, 13).plus({ months: 1 }).toISODate() //=> '2017-03-13'\n\nDateTime.local(2017, 2, 13).plus({ days: 30 }).toISODate() //=> '2017-03-15'\n```\n\nMore generally we can differentiate two modes of math:\n\n * Calendar math works with higher-order, variable-length units like years and months\n * Time math works with lower-order, constant-length units such as hours, minutes, and seconds.\n\n### Which units use which math?\n\nThese units use calendar math:\n\n * **Years** vary because of leap years.\n * **Months** vary because they're just different lengths.\n * **Days** vary because DST transitions mean some days are 23 or 25 hours long.\n * **Quarters** are always three months, but months vary in length so quarters do too.\n * **Weeks** are always the same number of days, but days vary so weeks do too.\n \nThese units use time math:\n\n * **Hours** are always 60 minutes\n * **Minutes** are always 60 seconds\n * **Seconds** are always 1000 milliseconds\n\nDon't worry about leap seconds. Javascript and most other programming environments don't account for them; they just happen as abrupt, invisible changes to the underlying system's time.\n\n### How to think about calendar math\n\nIt's best not to think of calendar math as requiring arcane checks on the lengths of intervening periods. Instead, think of them as **adjusting that unit directly and keeping lower order date components constant**. Let's go back to the Feb 13 + 1 month example. If you didn't have Luxon, you would do something like this to accomplish that:\n\n```js\nvar d = new Date('2017-02-13')\nd.setMonth(d.getMonth() + 1)\nd.toLocaleString() //=> '3/13/2017, 12:00:00 AM'\n```\n\nAnd under the covers, that's more or less what Luxon does too. It doesn't boil the operation down to a milliseconds delta because that's not what's being asked. Instead, it fiddles with what it thinks the date should be and then uses the built-in Gregorian calendar to compute the new timestamp.\n\n### DSTs\n\nThere's a whole section about this in the [time zones documentation](zones.html#math-across-dsts). But here's a quick example (Spring Forward is early on March 12 in my time zone):\n\n```\nvar start = DateTime.local(2017, 3, 11, 10);\nstart.hour                          //=> 10, just for comparison\nstart.plus({days: 1}).hour          //=> 10, stayed the same\nstart.plus({hours: 24}).hour        //=> 11, DST pushed forward an hour\n```\n\nSo in adding a day, we kept the hour at 10, even though that's only 23 hours later.\n\n### Time math\n\nTime math is different. In time math, we're just adjusting the clock, adding or subtracting from the epoch timestamp. Adding 63 hours is really the same as adding 63 hours' worth of milliseconds. Under the covers, Luxon does this exactly the opposite of how it does calendar math; it boils the operation down to milliseconds, computes the new timestamp, and then computes the date out of that.\n\n## Math with multiple units\n\nIt's possible to do math with multiple units:\n\n```js\nDateTime.fromISO('2017-05-15').plus({months: 2, days: 6}).toISODate(); //=> '2017-07-21'\n```\n\nThis isn't as simple as it looks. For example, what should you expect this to do?\n\n```js\nDateTime.fromISO('2017-04-30').plus({months: 1, days: 1}).toISODate();\n```\n\nIf the day is added first, we'll get an intermediate value of May 1. Adding a month to that gives us June 1. But if the month is added first, we'll an intermediate value of May 30 and day after that is May 31. (See \"Calendar math vs time math above if this is confusing.) So the order matters.\n\nLuxon has a simple rule for this: **math is done from highest order to lowest order**. So the result of the example above is May 31. This rule isn't logically necessary, but it does seem reflect what people mean. Of course, Luxon can't enforce this rule if you do the math in separate operations:\n\n```js\nDateTime.fromISO('2017-04-30').plus({days: 1}).plus({months: 1}).toISODate() //=> '2017-06-01'\n```\n\nIt's not a coincidence that Luxon's interface makes it awkward to do this wrong.\n\n## Comparing DateTimes\n\nDateTime implements `#valueOf` to return the epoch timestamp, so you can compare DateTimes with `<`, `>`, `<=`, and `>=`. That lets you find out if one DateTime is after or before another DateTime.\n\n```js\nd1 < d2 // is d1 before d2?\n```\n\nHowever, `===` compares object identity (not a useful concept in a library with immutable types) and `#equals` compares both the time and additional metadata, such as the locale and time zone. If you're only interested in checking the equality of the timestamps, you need to coerce them:\n\n```js\n+d1 === +d2 // are d1 and d2 the same instant in time?\n```\n\nYou may also use `#hasSame` to make more subtle comparisons:\n\n```js\nd1.hasSame(d2, 'milllisecond'); // equivalent to `+d1 === +d2`\nd1.hasSame(d2, 'minute');       // both DateTimes are in the same minute (and hour, day, month, etc)\nd1.hasSame(d2, 'year');         // etc\n```\n\nNote that these are checking against the calendar. For example, if `d1` is in 2017, calling `hasSame` with \"year\" asks if d2 is also in 2017, not whether the DateTimes within a year of each other. For that, you'd need `diff` (see below).\n\n## Duration math\n\n### Basics\n\n[Durations](../class/src/duration.js~Duration.html) are quantities of time, like \"3 days and 6 hours\". Luxon has no idea *which* 3 days and 6 hours they represent; it's just how Luxon represents those quantities in abstract, unmoored from the timeline. This is both tremendously useful and occasionally confusing. I'm not going to give a detailed tour of their capabilities here (see the API docs for that), but I do want to clear up some of those confusions.\n\nHere's some very basic stuff to get us going:\n\n```js\nvar dur = Duration.fromObject({ days: 3, hours: 6})\n\n// examine it\ndur.toObject()          //=> { days: 3, hours: 6 }\n\n// express in minutes\ndur.as('minutes')       //=> 4680\n\n// convert to minutes\ndur.shiftTo('minutes').toObject() //=> { minutes: 4680 }\n\n// add to a DateTime\nDateTime.fromISO(\"2017-05-15\").plus(dur).toISO() //=> '2017-05-18T06:00:00.000-04:00'\n```\n\n### Diffs\n\nYou can subtract one time from another to find out how much time there is between them. Luxon's [diff](../class/src/datetime.js~DateTime.html#instance-method-diff) method does this and it returns a Duration. For example:\n\n```js\nvar end = DateTime.fromISO('2017-03-13');\nvar start = DateTime.fromISO('2017-02-13');\n\nvar diffInMonths = end.diff(start, 'months');\ndiffInMonths.toObject(); //=> { months: 1 }\n```\n\nNotice we had to pick the unit to keep track of the diff in. The default is milliseconds:\n\n```js\nvar diff = end.diff(start);\ndiff.toObject() //=> { milliseconds: 2415600000 }\n```\n\nFinally, you can diff using multiple units:\n\n```js\nvar end = DateTime.fromISO('2017-03-13');\nvar start = DateTime.fromISO('2017-02-15');\nend.diff(start, ['months', 'days']) //=> { months: 1, days: 2 }\n```\n\n### Casual vs longterm conversion accuracy\n\nDurations represent bundles of time with specific units, but Luxon allows you to convert between them:\n\n * `shiftTo` returns a new Duration denominated in the specified units.\n * `as` converts the duration to just that unit and returns its value\n\n```js\nvar dur = Duration.fromObject({ months: 4, weeks: 2, days: 6 })\n\ndur.as('days')                            //=> 140\ndur.shiftTo('days').toObject()            //=> { days: 140 }\ndur.shiftTo('weeks', 'hours').toObject()  //=> { weeks: 18, hours: 144 }\n```\n\nBut how do those conversions actually work? First, uncontroversially:\n\n * 1 week = 7 days\n * 1 day = 24 hours\n * 1 hour = 60 minutes\n * 1 minute = 60 seconds\n * 1 second = 1000 milliseconds\n \nThese are always true and you can roll them up and down with consistency (e.g. `1 hour = 60 * 60 * 1000 milliseconds`). However, this isn't really true for the higher order units, which vary in length, even putting DSTs aside. A year is sometimes 365 days long and sometimes 366. Months are 28, 29, 30, or 31 days. By default Luxon converts between these units using what you might call \"casual\" conversions:\n\n|         | Month | Week | Day |\n| ---     | ---   |  --- | --- |\n| Year    | 12    |   52 | 365 |\n| Quarter | 3     |   13 |  91 |\n| Month   |       |    4 |  30 |\n\nThese should match your intuition and for most purposes they work well. But they're not just wrong; they're not even self-consistent:\n\n```js\ndur.shiftTo('months').shiftTo('days').as('years') //=> 0.9863013698630136\n```\n\nThis is because 12 * 30 != 365. These errors can be annoying, but they can also cause significant issues if the errors accumulate:\n\n```js\nvar dur = Duration.fromObject({ years: 50000 });\nDateTime.local().plus(dur.shiftTo('milliseconds')).year //=> 51984\nDateTime.local().plus(dur).year                         //=> 52017\n```\n\nThose are 33 years apart! So Luxon offers an alternative conversion scheme called \"longterm\", based on the 400-year calendar cycle:\n\n|         | Month |     Week |       Day |\n|----     | ---   |      --- |       --- |\n| Year    | 12    |  52.1775 |  365.2425 |\n| Quarter |  3    | 13.04435 | 91.310625 |\n| Month   |       | 4.348125 | 30.436875 |\n\nYou can see why these are irritating to work with, which is why they're not the default.\n\nLuxon methods that create Durations de novo accept an option called `conversionAccuracy`. You can set it to \"casual\" or \"longterm\". It's a property of the Duration itself, so any conversions you do use the rule you've picked, and any new Durations you derive from it will retain that property.\n\n```js\nDuration.fromObject({ years: 23, conversionAccuracy: 'longterm' });\nDuration.fromISO('PY23', { conversionAccuracy: 'longterm' });\n\nend.diff(start, { conversionAccuracy: 'longterm' })\n```\n\nYou can also create an accurate Duration out of an existing one:\n\n```js\nvar pedanticDuration = casualDuration.reconfigure({conversionAccuracy: 'longterm' });\n```\n\nThese Durations will do their conversions differently.\n\n\n### Losing information\n\nBe careful of converting between units. It's easy to lose information. Let's say we converted a diff into days:\n\n\n```js\nvar end = DateTime.fromISO('2017-03-13');\nvar start = DateTime.fromISO('2017-02-13');\ndiffInMonths.as('days'); //=> 30\n```\n\nThat's our conversion between months and days (you could also do a longterm-accurate conversion; it wouldn't fix the issue ahead). But this isn't the number of days between February 15 and March 15!\n\n```js\nvar diffInDays = end.diff(start, 'days');\ndiffInDays.toObject(); //=> { days: 28 }\n```\n\nIt's important to remember that diffs are Duration objects, and a Duration is just a dumb pile of time units our computation spat out. Unlike an Interval, a Duration doesn't \"remember\" what the inputs to the diff were. So we lost some information converting between units. This mistake is really common when rolling up:\n\n\n```js\nvar diff = end.diff(start) // default unit is milliseconds\n\n// wtf, that's not a month!\ndiff.as('months'); //=> 0.9319444 \n\n// it's not even the right number of days! (hint: my time zone has a DST)\ndiff.shiftTo('hours').as('days'); //=> 27.958333333333332\n```\n\nNormally you won't run into this problem if you think clearly about what you want to do with a diff. But sometimes you really do want an object that represents the subtraction itself, not the result. [Intervals](../class/src/interval.js~Interval.html) can help. Intervals are mostly used to keep track of ranges of time, but they make for \"anchored\" diffs too. For example:\n\n```js\nvar end = DateTime.fromISO('2017-03-13');\nvar start = DateTime.fromISO('2017-02-13');\nvar i = Interval.fromDateTimes(start, end);\n\ni.length('days');       //=> 28\ni.length('months')      //=> 1\n```\n\nBecause the Interval stores its endpoints and computes `length` on the fly, it retakes the diff each time you query it. Of course, precisely because an Interval *isn't* an abstract bundle of time, it can't be used in places where Durations can. For example, you can't add them to DateTime via `plus()` because Luxon wouldn't know what units to do the math in (see \"Calendar vs time math\" above). But you can convert the interval into a Duration by picking the units:\n\n```js\ni.toDuration('months').toObject(); //=> { months: 1 }\ni.toDuration('days').toObject(); //=> { days: 28 }\n```\n\nYou can even pick multiple units:\n\n```js\nend = DateTime.fromISO('2018-05-25');\ni = start.until(end);\ni.toDuration(['years', 'months', 'days']).toObject(); //=> { years: 1, months: 3, days: 12 }\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/peterkhayes/Remix/luxon/docs/validity.md",
    "name": "./docs/validity.md",
    "content": "# Validity\n\n## Invalid DateTimes\n\nOne of the most irritating aspects of programming with time is that it's possible to end up with invalid dates. This is a bit subtle: barring integer overflows, there's no count of milliseconds that don't correspond to a valid DateTime, but when working with calendar units, it's pretty easy to say something like \"June 400th\". Luxon considers that invalid and will mark it accordingly.\n\nUnless you've asked Luxon to throw an exception when it creates an invalid DateTime (see more on that below), it will fail silently, creating an instance that doesn't know how to do anything. You can check validity with `isValid`:\n\n```js\n> var dt = DateTime.fromObject({ month: 6, day: 400 });\ndt.isValid //=> false\n```\n\nAll of the methods or getters that return primitives return degenerate ones:\n\n```js\ndt.year; //=>  NaN\ndt.toString(); //=> 'Invalid DateTime'\ndt.toObject(); //=> {}\n```\n\nMethods that return other Luxon objects will return invalid ones:\n\n```js\ndt.plus({ days: 4 }).isValid; //=> false\n```\n\n## Reasons a DateTimes can be invalid\n\nThe most common way to do that is to over- or underflow some unit:\n\n- February 40th\n- 28:00\n- -4 pm\n- etc\n\nBut there are other ways to do it:\n\n```js\n// specify a time zone that doesn't exist\nDateTime.local().setZone(\"America/Blorp\").isValid; //=> false\n\n// provide contradictory information (here, this date is not a Wedensday)\nDateTime.fromObject({ year: 2017, month: 5, day: 25, weekday: 3 }).isValid; //=> false\n```\n\nNote that some other kinds of mistakes throw, based on our judgment that they are more likely programmer errors than data issues:\n\n```js\nDateTime.local().set({ blorp: 7 }); //=> kerplosion\n```\n\n## Debugging invalid DateTimes\n\nBecause DateTimes fail silently, they can be a pain to debug. Luxon has some features that can help.\n\n### invalidReason and invalidExplanation\n\nInvalid DateTime objects are happy to tell you why they're invalid. `invalidReason` will give you a consistent error code you can use, whereas `invalidExplanation` will spell it out\n\n```js\nvar dt = DateTime.local().setZone(\"America/Blorp\");\ndt.invalidReason; //=>  'unsupported zone'\ndt.invalidExplantion; //=> 'the zone \"America/Blorp\" is not supported'\n```\n\n### throwOnInvalid\n\nYou can make Luxon throw whenever it creates an invalid DateTime. The message will combine `invalidReason` and `invalidExplanation`:\n\n```js\nSettings.throwOnInvalid = true;\nDateTime.local().setZone(\"America/Blorp\"); //=> Error: Invalid DateTime: unsupported zone: the zone \"America/Blorp\" is not supported\n```\n\nYou can of course leave this on in production too, but be sure to try/catch it appropriately.\n\n## Invalid Durations\n\nDurations can be invalid too. The easiest way to get one is to diff an invalid DateTime.\n\n```js\nDateTime.local(2017, 28).diffNow().isValid; //=> false\n```\n\n## Invalid Intervals\n\nIntervals can be invalid. This can happen a few different ways:\n\n- The end time is before the start time\n- It was created from invalid DateTime or Duration\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/peterkhayes/Remix/luxon/docs/matrix.md",
    "name": "./docs/matrix.md",
    "content": "# Support matrix\n\nThis page covers what platforms are supported by Luxon and what caveats apply to them.\n\n## Official support\n\nLuxon officially supports the last two versions of the major browsers, with some caveats.\n\n| Browser      | Versions | Caveats                                                                           |\n| ------------ | -------- | --------------------------------------------------------------------------------- |\n| Chrome       | >= 61    |                                                                                   |\n| FF           | >= 56    |                                                                                   |\n| Edge         | 18       |                                                                                   |\n|              | 16       | no intl tokens                                                                    |\n| IE           | >= 11    | needs platform polyfills, no intl tokens, no zones                                |\n|              | 10       | needs platform polyfills, no basic internationalization, no intl tokens, no zones |\n| Safari       | 11       |                                                                                   |\n|              | 10       | no intl tokens, no zones                                                          |\n| Node w/ICU   | >= 8     |                                                                                   |\n|              | 6        | no intl tokens, no zones                                                          |\n| Node w/o ICU | >= 8     | no intl tokens                                                                    |\n|              | 6        | no intl tokens, no zones                                                          |\n\n- Those caveats are explained in the next sections, along with possible polyfill options\n- \"w/ICU\" refers to providing Node with ICU data. See the [install](install.html#node) for instructions\n\n## Internet Explorer and platform polyfills\n\nIf you're supporting IE 10 or 11, you need some polyfills just to make Luxon work at all.\n\nWith IE 11, you can just add a polyfill like this to get the JS features you need:\n\n```html\n<script src=\"https://cdn.polyfill.io/v2/polyfill.js?features=default,String.prototype.repeat,Array.prototype.find,Array.prototype.findIndex,Math.trunc\"></script>\n```\n\nSo there are now two remaining caveats: Intl *token* support and zones. Keep reading to see what that means.\n\nWith IE 10, you have the same problems as IE 11, except that you don't even get basic Intl support. You'll need to tack on the languages you wish to support. See the Basic Internationalization polyfill section below.\n\nAltenatively, you can use a polyfilled build of Luxon, which you can find here:\n\n- [Download full polyfilled build](../../global-filled/luxon.js)\n- [Download minified polyfilled build](../../global-filled/luxon.min.js)\n\nThese use global polyfills, though, which means newer browsers will be running the injected code too. And the same doesn't-include-intl-and-zone-support caveats apply to it too.\n\n## Platform caveats\n\n**If the platforms you're targeting don't have caveats listed above, ignore this section**.\n\nIn the support table above, you can see that some platforms have caveats. They affect a subset of Luxon's features that depend on specific APIs that some older browsers don't support.\n\n1.  **Basic internationalization**. Luxon doesn't have internationalized strings in its code; instead it relies on the hosts implementation of the Intl API. This includes the very handy [toLocaleString](../class/src/datetime.js~DateTime.html#instance-method-toLocaleString). Most browsers and recent versions of Node support this.\n1.  **Internationalized tokens**. Listing the months or weekdays of a locale and outputting or parsing ad-hoc formats in non-English locales requires that Luxon be able to programmatically introspect the results of an Intl call. It does this using Intl's [formatToParts](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts) method, which is a relatively recent addition in most browsers. So you could have the Intl API without having that.\n1.  **Zones**. Luxon's support of IANA zones works by abusing the Intl API. That means you have to have that API and that the API must support a reasonable list of time zones. Zones are a recent addition to some platforms.\n\nIf the browser lacks these capabilities, Luxon tries its best:\n\n| Feature                              | Full support | No Intl at all                              | Intl but no formatToParts                          | No IANA zone support |\n| ------------------------------------ | ------------ | ------------------------------------------- | -------------------------------------------------- | -------------------- |\n| Most things                          | OK           | OK                                          | OK                                                 | OK                   |\n| Using explicit time zones            | OK           | Invalid DateTime                            | OK                                                 | Invalid DateTime     |\n| `DateTime#toLocaleString`            | OK           | Uses English with caveats†                  | OK                                                 | OK                   |\n| `DateTime#toLocaleParts`             | OK           | Empty array                                 | Empty array                                        | OK                   |\n| `DateTime#toFormat` in en-US         | OK           | OK                                          | OK                                                 | OK                   |\n| `DateTime#toFormat` in other locales | OK           | Uses English                                | Uses English if format contains localized strings‡ | OK                   |\n| `DateTime#fromFormat` in en-US       | OK           | OK                                          | OK                                                 | OK                   |\n| `DateTime#offsetNameShort`, etc      | OK           | Returns null                                | OK in most locales§                                |                      |\n| `fromFormat` in other locales        | OK           | Invalid DateTime if uses localized strings‡ | Uses English if format contains localized strings‡ | OK                   |\n| `Info.months`, etc in en-US          | OK           | OK                                          | OK                                                 | OK                   |\n| `Info.months`, etc in other locales  | OK           | Uses English                                | Uses English                                       | OK                   |\n\n† Specifically, the caveat here is that this English fallback only works as you might expect for Luxon-provided preset arguments, like `DateTime.DATETIME_MED`. If you provide your own, modify the presets, or even clone them, it will use `DateTime.DATETIME_HUGE`. If you don't provide any arguments at all, it defaults to `DateTime.DATE_SHORT`.\n\n‡ This means that Luxon can't parse anything with a word in it like localized versions of \"January\" or \"Tuesday\". It's fine with numbers, as long as they're Western numbers.\n\n§ This fallback uses a hack that is not guaranteed to work in every locale in every browser. It's worked where I tested it, though. It will fall back to returning `null` if it fails.\n\n## Polyfills\n\n### Intl\n\nIf your platform doesn't have any kind of Intl support (such as IE 10), you need to load them individually through a polyfill. The easiest way to that is like this:\n\n```html\n<script src=\"https://cdn.polyfill.io/v2/polyfill.js?features=Intl.~locale.zh,Intl.~locale.fr\"></script>\n```\n\nIf you're on a platform that already needs other polyfills, just tack those features to the end of your polyfill list.\n\n### Intl tokens\n\nPolyfilling Intl token support is a bit painful. This caveat applies to Edge < 18 and all the IEs. Fortunately, you probably don't need Intl token support!\n\nFirst, if you don't have Intl at all (e.g. as in IE 10), you are in luck. The polyfills in the previous section will give you Intl token support too!\n\nBut more likely, you have basic Intl support but not `formatToParts` (e.g. IE 11 or Edge 16). The problem here is that the polyfill service will ignore the Intl polyfills, so you won't get the support you need. Instead, you need to override all of Intl with the [Intl polyfill](https://github.com/andyearnshaw/Intl.js/) directly. [help wanted: instructions on exactly how to do that]\n\n### Zones\n\nIf you have an Intl API (either natively or through the Intl polyfill above) but no zone support, you can add it via the very nice [DateTime format pollyfill](https://github.com/yahoo/date-time-format-timezone). **Unfortunately, this currently breaks Chrome**. See issue [#190](https://github.com/moment/luxon/issues/190) for more. I don't currently have a good solution for IE with zones.\n\n## Older platforms\n\n- **Older versions of both Chrome and Firefox** will most likely work. It's just that I only officially support the last two versions. As you get to older versions of these browsers, the caveats listed above begin to apply to them. (e.g. FF started supporting `formatToParts` in 51 and time zones in 52). I haven't broken that out because it's complicated, Luxon doesn't officially support them, and no one runs them anyway.\n- **Older versions of IE** probably won't work at all.\n- **Older versions of Node** probably won't work without recompiling Luxon with a different Node target. In which case they'll work with some of the caveats.\n\n## Other platforms\n\nIf the platform you're targeting isn't on the list and you're unsure what caveats apply, you can check which pieces are supported:\n\n```js\nInfo.features(); //=> { intl: true, intlTokens: true, zones: true }\n```\n\nSpecific notes on other platforms:\n\n- **React Native on (specifically) Android** doesn't come with Intl support, so all three caveats apply to it. Use [jsc-android-buildscripts](https://github.com/SoftwareMansion/jsc-android-buildscripts) to fix it.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/peterkhayes/Remix/luxon/docs/moment.md",
    "name": "./docs/moment.md",
    "content": "# For Moment users\n\nLuxon borrows lots of ideas from [Moment.js](http://momentjs.com), but there are a lot of differences too. This document clarifies what they are.\n\n## Immutability\n\nLuxon's objects are immutable, whereas Moment's are mutable. For example, in Moment:\n\n```js\nvar m1 = moment();\nvar m2 = m1.add(1, 'hours');\nm1.valueOf() === m2.valueOf(); //=> true\n```\n\nThis happens because `m1` and `m2` are really the same object; `add()` *mutated* the object to be an hour later. Compare that to Luxon:\n\n```js\nvar d1 = DateTime.local();\nvar d2 = d1.plus({ hours: 1 });\nd1.valueOf() === d2.valueOf(); //=> false\n```\n\nThis happens because the `plus` method returns a new instance, leaving `d1` unmodified. It also means that Luxon doesn't require copy constructors or clone methods.\n\n## Major functional differences\n\n1. Months in Luxon are 1-indexed instead of 0-indexed like in Moment and the native Date type.\n1. Localizations and time zones are implemented by the native Intl API (or a polyfill of it), instead of by the library itself.\n1. Luxon has both a Duration type and an Interval type. The Interval type is like Twix.\n1. Luxon lacks the relative time features of Moment and won't support it until the required [facilities](https://github.com/tc39/proposal-intl-relative-time) are provided by the browser.\n\n## Other API style differences\n\n1. Luxon methods often take option objects as their last parameter\n1. Luxon has different static methods for object creation (e.g. `fromISO`), as opposed to Moment's one function that dispatches based on the input\n1. Luxon parsers are very strict, whereas Moment's are more lenient.\n1. Luxon uses getters instead of accessor methods, so `dateTime.year` instead of `dateTime.year()`\n1. Luxon centralizes its \"setters\", like `dateTime.set({year: 2016, month: 4})` instead of `dateTime.year(2016).month(4)` like in Moment.\n1. Luxon's Durations are a separate top-level class.\n1. Arguments to Luxon's methods are not automatically coerced into Luxon instances. E.g. `m.diff('2017-04-01')` would be `dt.diff(DateTime.fromISO('2017-04-01'))`.\n\n## DateTime method equivalence\n\nHere's a rough mapping of DateTime methods in Moment to ones in Luxon. I haven't comprehensively documented stuff that's in Luxon but not in Moment, just a few odds and ends that seemed obvious for inclusion; there are more. I've probably missed a few things too.\n\n### Creation\n\n| Operation               | Moment                   | Luxon                                 | Notes                                                                                                                                |\n|-------------------------|--------------------------|---------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------|\n| Now                     | `moment()`               | `DateTime.local()`                    |                                                                                                                                      |\n| From ISO                | `moment(String)`         | `DateTime.fromISO(String)`            |                                                                                                                                      |\n| From RFC 2822           | `moment(String)`         | `DateTime.fromRFC2822(String)`        |                                                                                                                                      |\n| From custom format      | `moment(String, String)` | `DateTime.fromFormat(String, String)` | The format tokens differ between Moment and Luxon, such that the same format string cannot be used between the two.             |\n| From object             | `moment(Object)`         | `DateTime.fromObject(Object)`         |                                                                                                                                      |\n| From timestamp          | `moment(Number)`         | `DateTime.fromMillis(Number)`         |                                                                                                                                      |\n| From JS Date            | `moment(Date)`           | `DateTime.fromJSDate(Date)`           |                                                                                                                                      |\n| From civil time         | `moment(Array)`          | `DateTime.local(Number...)`           | Like `DateTime.local(2016, 12, 25, 10, 30)`                                                                                          |\n| From UTC civil time     | `moment.utc(Array)`      | `DateTime.utc(Number...)`             | Moment also uses `moment.utc()` to take other arguments. In Luxon, use the appropriate method and pass in the `{ zone: 'utc'}` option |\n| Clone                   | `moment(Moment)`         | N/A                                   | Immutability makes this pointless; just reuse the object                                                                             |\n| Use the string's offset | `parseZone`              | See note                              | Methods taking strings that can specify offset or zone take a `setZone` argument                                                    |\n\n### Getters and setters\n\n#### Basic information getters\n\n| Property | Moment      | Luxon     | Notes                                            |\n|----------|-------------|-----------|--------------------------------------------------|\n| Validity | `isValid()` | `isValid` | See also `invalidReason`                         |\n| Locale   | `locale()`  | `locale`  |                                                  |\n| Zone     | `tz()`      | `zone`    | Moment requires a plugin for this, but not Luxon |\n\n#### Unit getters\n\n| Property               | Moment                               | Luxon         | Notes                                  |\n|------------------------|--------------------------------------|---------------|----------------------------------------|\n| Year                   | `year()`                             | `year`        |                                        |\n| Month                  | `month()`                            | `month`       |                                        |\n| Day of month           | `date()`                             | `day`         |                                        |\n| Day of week            | `day()`, `weekday()`, `isoWeekday()` | `weekday `    | 1-7, Monday is 1, Sunday is 7, per ISO |\n| Day of year            | `dayOfYear()`                        | `ordinal `    |                                        |\n| Hour of day            | `hour()`                             | `hour`        |                                        |\n| Minute of hour         | `minute()`                           | `minute`      |                                        |\n| Second of minute       | `second()`                           | `second`      |                                        |\n| Millisecond of seconds | `millisecond()`                      | `millisecond` |                                        |\n| Week of ISO week year  | `weekYear`, `isoWeekYear`            | `weekYear`    |                                        |\n| Quarter                | `quarter`                            | None          | Just divide the months by 4            |\n\n#### Programmatic get and set\n\nFor programmatic getting and setting, Luxon and Moment are very similar here:\n\n| Operation  | Moment                | Luxon         | Notes                                   |\n|------------|-----------------------|---------------|-----------------------------------------|\n| get value  | `get(String)`         | `get(String)` |                                         |\n| set value  | `set(String, Number)` | None          |                                         |\n| set values | `set(Object)`         | `set(Object)` | Like `dt.set({ year: 2016, month: 3 })` |\n\n### Transformation\n\n| Operation          | Moment                     | Luxon               | Notes                                   |\n|--------------------|----------------------------|---------------------|-----------------------------------------|\n| Addition           | `add(Number, String)`      | `plus(Object)`      | Like `dt.plus({ months: 3, days: 2 })`  |\n| Subtraction        | `subtract(Number, String)` | `minus(Object)`     | Like `dt.minus({ months: 3, days: 2 })` |\n| Start of unit      | `startOf(String)`          | `startOf(String)`   |                                         |\n| End of unit        | `endOf(String)`            | `endOf(String)`     |                                         |\n| Change unit values | `set(Object)`              | `set(Object)`       | Like `dt.set({ year: 2016, month: 3 })` |\n| Change time zone   | `tz(String)`               | `setZone(string)`      | Luxon doesn't require a plugin          |\n| Change zone to utc | `utc()`                    | `toUTC()`           |                                         |\n| Change local zone  | `local()`                  | `toLocal()`         |                                         |\n| Change offset      | `utcOffset(Number)`        | None                | Set the zone instead                    |\n| Change locale      | `locale(String)`           | `setLocale(String)` |                                         |\n\n### Query\n\n| Question                                   | Moment                  | Luxon                                            | Notes                                                                                           |\n|--------------------------------------------|-------------------------|--------------------------------------------------|-------------------------------------------------------------------------------------------------|\n| Is this time before that time?             | `m1.isBefore(m2)`       | `dt1 < dt2`                                      | The Moment versions of these take a unit. To do that in Luxon, use `startOf` on both instances. |\n| Is this time after that time?              | `m1.isAfter(m2)`        | `dt1 > dt2`                                      |                                                                                                 |\n| Is this time the same or before that time? | `m1.isSameOrBefore(m2)` | `dt1 <= dt2`                                     |                                                                                                 |\n| Is this time the same or after that time?  | `m1.isSameOrAfter(m2)`  | `dt1 >= dt2`                                     |                                                                                                 |\n| Do these two times have the same [unit]?   | `m1.isSame(m2, unit)`   | `dt1.hasSame(dt2, unit)`                         |                                                                                                 |\n| Is this time between these two times?      | `m1.isBetween(m2, m3)`  | `Interval.fromDateTimes(dt2, dt3).contains(dt1)` |                                                                                                 |\n| Is this time inside a DST                  | `isDST()`               | `isInDST`                                        |                                                                                                 |\n| Is this time's year a leap year?           | `isInLeapYear()`        | `isInLeapYear`                                   |                                                                                                 |\n| How many days are in this time's month?    | `daysInMonth()`         | `daysInMonth`                                    |                                                                                                 |\n| How many days are in this time's year?     | None                    | `daysInYear`                                     |                                                                                                 |\n\n### Output\n\n#### Basics\n\nSee the [formatting guide](formatting.html) for more about the string-outputting methods.\n\n| Output               | Moment         | Luxon            | Notes                                                                                                                                             |\n|----------------------|----------------|------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|\n| simple string        | `toString()`   | `toString()`     | Luxon just uses ISO 8601 for this. See Luxon's `toLocaleString()`                                                                                 |\n| full ISO 8601        | `iso()`        | `toISO()`        |                                                                                                                                                   |\n| ISO date only        | None           | `toISODate()`    |                                                                                                                                                   |\n| ISO time only        | None           | `toISOTime()`    |                                                                                                                                                   |\n| custom format        | `format(...)`  | `toFormat(...)`  | The format tokens differ between Moment and Luxon, such that the same format string cannot be used between the two.                               |\n| RFC 2822             |                | `toRFC2822()`    |                                                                                                                                                   |\n| HTTP date string     |                | `toHTTP()`       |                                                                                                                                                   |\n| JS Date              | `toDate()`     | `toJSDate()`     |                                                                                                                                                   |\n| Epoch time           | `valueOf()`    | `toMillis()` or `valueOf()`      |                                                                                                                                                   |\n| Object               | `toObject()`   | `toObject()`     |                                                                                                                                                   |\n| Duration             | `diff(Moment)` | `diff(DateTime)` | Moment's diff returns a count of milliseconds, but Luxon's returns a Duration. To replicate the Moment behavior, use `dt1.diff(d2).milliseconds`. |\n\n#### Humanization\n\nLuxon doesn't support these, and won't until the [Relative Time Format](https://github.com/tc39/proposal-intl-relative-time) proposal lands in browsers.\n\n| Operation            | Moment         | Luxon |\n|----------------------|----------------|-------|\n| Time from now        | `fromNow()`    | None  |\n| Time from other time | `from(Moment)` | None  |\n| Time to now          | `toNow()`      | None  |\n| Time to other time   | `to(Moment)`   | None  |\n| \"Calendar time\"      | `calendar()`   | None  |\n\n## Durations\n\nMoment Durations and Luxon Durations are broadly similar in purpose and capabilities. The main differences are:\n\n 1. Luxon durations have more sophisticated conversion capabilities. They can convert from one set of units to another using `shiftTo`. They can also be configured to use different unit conversions. See [Duration Math](math.html#duration-math) for more.\n 1. Luxon does not (yet) have an equivalent of Moment's `humanize` method\n 1. Like DateTimes, Luxon Durations have separate methods for creating objects from different sources.\n\nSee the [Duration API docs](../class/src/duration.js~Duration.html) for more.\n\n## Intervals\n\nMoment doesn't have direct support intervals, which must be provided by plugins like Twix or moment-range. Luxon's Intervals have similar capabilities to theirs, with the exception of the humanization features. See the [Interval API docs](../class/src/interval.js~Interval.html) for more.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/peterkhayes/Remix/luxon/docs/why.md",
    "name": "./docs/why.md",
    "content": "# Why does Luxon exist?\n\nWhat's the deal with this whole Luxon thing anyway? Why did I write it? How is it related to the Moment project? What's different about it? This page tries to hash all that out.\n\n## A disclaimer\n\nI should clarify here that I'm just one of Moment's maintainers; I'm not in charge and I'm not Moment's creator. The opinions here are solely mine. Finally, none of this is meant to bash Moment, a project I've spent a lot of time on and whose other developers I respect.\n\n## Origin\n\nLuxon started because I had a bunch of ideas on how to improve Moment but kept finding Moment wasn't a good codebase to explore them with. Namely:\n\n * I wanted to try out some ideas that I thought would provide a better, more explicit API but didn't want to break everything in Moment.\n * I had an idea on how to provide out-of-the-box, no-data-files-required support for time zones, but Moment's design made that difficult.\n * I wanted to completely rethink how internationalization worked by using the Intl API that comes packaged in browsers.\n * I wanted to use a modern JS toolchain, which would require a major retrofit to Moment.\n\nSo I decided to write something from scratch, a sort of modernized Moment. It's a combination of all the things I learned maintaining Moment and Twix, plus a bunch of fresh ideas. I worked on it in little slivers of spare time for about two years. But now it's ready to actually use, and the Moment team likes it enough that we pulled it under the organization's umbrella.\n\n## Ideas in Luxon\n\nLuxon is built around a few core ideas:\n\n 1. Keep the basic chainable date wrapper idea from Moment.\n 1. Make all the types immutable.\n 1. Make the API explicit; different methods do different things and have well-defined options.\n 1. Use the Intl API to provide internationalization, including token parsing. Fall back to English if the browser doesn't support those APIs.\n 1. Abuse the Intl API horribly to provide time zone support. Only possible for modern browsers.\n 1. Provide more comprehensive duration support.\n 1. Directly provide interval support.\n 1. Write inline docs for everything.\n\nThese ideas have some big advantages:\n\n 1. It's much easier to understand and debug code that uses Luxon.\n 1. Using native browser capabilities for internationalization leads to a much better behavior and is dramatically easier to maintain.\n 1. Luxon has the best time zone support of any JS date library.\n 1. Luxon's durations are both flexible and easy to use.\n 1. The documentation is very good.\n\nThey also have some disadvantages:\n\n 1. Using modern browser capabilities means that the fallback behavior introduces complexity for the programmer.\n 1. Never keeping internationalized strings in the code base means that some capabilities have to wait until the browsers provide it.\n 1. Some aspects of the Intl API are browser-dependent, which means Luxon's behavior is too.\n\n## Place in the Moment project\n\nLuxon lives in the Moment project because, basically, we all really like it, and it represents a huge improvement.\n\nBut Luxon doesn't quite fulfill Moment's mandate. First, it doesn't provide some of Moment's most commonly-used features, like relative date formatting. These features will [soon](https://github.com/tc39/proposal-intl-relative-time) be added to modern browsers and quickly folded into Luxon, but they aren't there yet. And even when they are, Luxon will only be able to provide that functionality to those newer environments. In fact, none of Luxon's Intl features work as expected on sufficiently outdated browsers, whereas Moment's all work everywhere. That represents a good tradeoff, IMO, but it's clearly a different one than Moment makes. Luxon makes a major break in API conventions. Part of Moment's charm is that you just call `moment()` on basically anything and you get date, whereas Luxon forces you to decide that you want to call `fromISO` or whatever. The upshot of all that is that Luxon feels like a different library; that's why it's not Moment 3.0.\n\nSo what is it then? We're not really sure. We're calling it a Moment labs project. Will its ideas get backported into Moment 3? Will it gradually siphon users away from Moment and become the focus of the Moment project? Will the march of modern browsers retire the arguments above and cause us to revisit branding Luxon as Moment? We don't know.\n\nThere, now you know as much as I do.\n\n## Future plans\n\nLuxon is fully usable and I plan to support it indefinitely. It's also largely complete. It will certainly add relative time formatting (and an English-only fallback) when that becomes possible. Luxon will also eventually strip out its fallbacks for missing platform features. But overall I expect the core functionality to stay basically as it is, adding mostly minor tweaks and bugfixes.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/peterkhayes/Remix/luxon/changelog.md",
    "name": "./changelog.md",
    "content": "# Changelog\n\n## 1.7.1\n\n- Floor the seconds instead of rounding them when outputting the 'X' format\n- Change the options to toLocale to override the configuration (the previous options were essentially ignored)\n\n## 1.6.2\n\n- Fixing merge error that resulted in bad error messages\n\n## 1.6.0\n\n- **midly breaking** Rework negative durations\n- Fix handling weekdays at the end of leap week years\n- Add isDuration, isDateTime, and isInterval\n- Fix handling of Luxon object arguments passed from other execution contexts\n\n## 1.5.0\n\n- Improved error message\n- Added DateTime#invalidExplanation, Duration#invalidExplanation, Interval#invalidExplanation to provide more details on invalid objects\n\n## 1.4.6\n\n- Cache Intl objects for an 85x speed up on basic operations using non-en locales\n\n## 1.4.5\n\n- Fix minified builds\n\n## 1.4.4\n\n- Fix hour formatting in RFC822 strings\n- Interval.fromISO accepts formats with durations\n\n## 1.4.3\n\nRemoval accidentally-introduced runtime dependency\n\n## 1.4.2\n\n- Handle locale strings with BCP 47 extensions. Especially helpful for environments with funky default locales\n- Support for [weekYear]-W[weekNumber] ISO 8601 strings\n\n## 1.4.1\n\n- Empty diffs now have all the asked-for units in them, set at 0\n- Duration operations perserve the superset of units\n\n## 1.4.0\n\n- Add x and X to toFormat for formatting Epoch seconds and Epoch milliseconds\n- Parser allows a wider range of IANA zone specifiers\n- BREAKING: Etc/GMT+10 is now interpreted as UTC-10, per spec\n\n## 1.3.3\n\nDocumentation fixes\n\n## 1.3.2\n\n- DateTime.fromMillis will throw if passed a non-number\n- Fixes for type checking across JS contexts\n\n## 1.3.1\n\n- Include milliseconds in Duration#toISO\n- Avoid deprecation warning from DateTime#inspect in Node 10\n\n## 1.3.0\n\n- **mildly breaking change** Duration.toFormat now floors its outputs instead of rounding them (see #224)\n- Added 'floor' option to Duration.toFormat and deprecated the 'round' option\n- Added `Dateime.toBSON`\n- Fixed infinite loop when passing invalid or zero-length durations to Interval#splitBy\n- Added better error handling to Duration.fromObject()\n\n## 1.2.1\n\n- 222x speed-up in DateTime creation for non-en locales\n- Added `DateTime#toMillis` alias for `DateTime#valueOf`\n- Fixed types on zone exports\n\n## 1.2.0\n\n- Export Zone classes\n- Fix `endOf` and `startOf` for quarters\n- Change `toFormat(\"Z\")` to return a number for UTC\n- Allow \"GTM\" as an argument to `setZone`\n\n## 1.1.0\n\n- Support for zone names with more than two components\n- Fixed long-term-accurate conversions for months\n- Added `weeksInWeekYear`\n\n## 1.0.0\n\n- The big one-oh. No changes from 0.5.8.\n\n## 0.5.8\n\n- Large perf improvements for `DateTime#toFormat()`, when using non-intl numbers\n\n## 0.5.7\n\n- Added AMD build to the NPM package\n- Large performance improvements to technical formatting (e.g. `DateTime#toISO`)\n\n## 0.5.6\n\n- Refactor internals\n- Added support for fractional seconds in `Duration.fromISO`\n- Added browser global to the NPM package\n\n## 0.5.5\n\n- Best-we-can-do fix for `DateTime#toLocaleString()` for fixed-offset zones when showing the zone name in the output\n- Fixed `Duration#shiftTo` for unormalized Durations that need a rollup cascade\n\n## 0.5.4\n\n- Fix default locales in Node\n- Fix prototype to help with React inspection\n- Improve REPL output for Durations in Node\n\n## 0.5.3\n\n- Remove errant ICU runtime dep (again)\n\n## 0.5.2\n\n- Remove comments from minified builds (introduced by 0.5.1)\n\n## 0.5.1\n\n- Fixed minified builds (oops)\n- Fix computation of fractional parts of diffs\n\n## 0.5.0\n\n- `isBefore()` returns true for the end of the interval, consistent with being half-open\n- `zoneName` now rturns `null` for invalid DateTimes\n- Added quarter support\n- Adding a month to Jan 31 gives Feb 28/29\n\n## 0.4.0\n\n- Always round down to the nearest millisecond when parsing\n\n## 0.3.1\n\n- Fixed `toLocaleString` for fixed-offset zones in the absence of Intl\n- Added `Info.isValidIANAZone`\n- Made malformed zone specifiers result in invalid DateTime instances\n\n## 0.3.0\n\n- Rename DateTime.fromString to DateTime.fromFormat (leaving deprecated DateTime.fromString)\n- Rename DateTime.fromStringExplain to DateTime.fromFormatExplain (leaving deprecated DateTime.fromStringExplain)\n- Support Etc/GMT IANA zones\n- Perf fixes for zones\n- Rework build infrastructure\n\n## 0.2.12\n\n- Fix DateTime.fromObject's handling of default zones\n- Change `keepCalendarTime` to `keepLocalTime`\n\n## 0.2.11\n\n- Handle no arguments in `DateTime.min` and `DateTime.max`\n- Documentation fixes\n\n## 0.2.10\n\n- Fix bug where Durations could sometimes mutate\n\n## 0.2.9\n\n- Fix `DateTime.fromMillis(0)` more thoroughly\n\n## 0.2.8\n\n- Fix sourcemaps\n\n## 0.2.7\n\n- Fix `DateTime.fromMillis(0)`\n\n## 0.2.6\n\n- Fix 'h' and 'hh' `toFormat` tokens for midnight\n\n## 0.2.5\n\n- Better `shiftTo` behavior for durations with floating point components\n\n## 0.2.4\n\n- Fix `toHTTP` to use 24-hour hours\n- Tighten up regular expressions\n- Various documentation fixes\n\n## 0.2.3\n\n- Fixes for `diff` with multiple units\n\n## 0.2.2\n\n- Fixes for `fromSQL`, `toSQL`, `toSQLTime`, and `toSQLDate`\n- Add `includeOffset` option to `toISO` and `toISOTime`\n\n## 0.2.1\n\n- Add `module` field to package.json\n\n## 0.2.0\n\n- Remove polyfills from main builds\n- Update compilation toolchain to target builds more exactly\n- Fix IE in polyfill build\n\n## 0.1.0\n\n- Add `.fromSQL`, `#toSQL`, `#toSQLTime`, `#toSQLDate`\n- Fix AM/PM parsing\n- Major perf improvements\n- Default to system locale when using macro formats in `#toFormat`\n- `.fromISO` accepts standalone times\n- See https://github.com/moment/luxon/issues/93 for important news concerning field accessibility\n\n## 0.0.22\n\n- Add 'u' formatting and parsing\n- Add 'y', 'yyyyy', and 'yyyyyy' parsing tokens\n- Add 'yyyyyy' formatting token\n- Better error messages for missing arguments to `DateTime.fromString`\n\n## 0.0.21\n\n- Fix zones for Edge\n\n## 0.0.20\n\n- Fix `fromISO` to accept various levels of subsecond precision\n\n## 0.0.19\n\n- Fixed parsing for ordinals\n- Made parsing stricter\n\n## 0.0.18\n\n- Fixed formatting for non-hour aligned fixed-offset zones\n- Fixed longterm conversion accuracy option in diffs\n- Fixed invalid handling in `Interval#set`\n\n## 0.0.17\n\n- Fixing formatting for fixed-offset zones\n\n## 0.0.16\n\n- Fixes for IE 9 & 10\n\n## 0.0.15\n\n- Fixing busted release 0.0.14\n\n## 0.0.13\n\n- toLocaleString() and others default to the system's locale\n- support for ISO week durations in `Duration.fromISO`\n\n## 0.0.12\n\n- Improve non-Intl fallbacks for toLocaleString\n- Fix `offsetNameShort` and `offsetNameLong` for non-Intl environments\n- Added `weekdayShort`, `weekdayLong`, `monthShort`, `monthLong` DateTime getters\n\n## 0.0.10\n\n- Only include build dir in NPM module\n\n## 0.0.9\n\n- Move to Moment Github org\n\n## 0.0.8\n\n- The local zone can now report its IANA name\n- Fixed parsing bug for `yy` and `kk`\n- Improved test coverage\n\n## 0.0.7\n\n- Added `toLocaleParts`\n- Slightly more friendly month/weekday parsing\n- Default locale setting\n\n## 0.0.6\n\n- Stricter `toJSDate`\n- `fromISO` now supports `year` and `year-month` formats\n- More graceful degradation in the absence of platform features\n\n## 0.0.5\n\nExperimental, but now broadly useful.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/peterkhayes/Remix/luxon/contributing.md",
    "name": "./contributing.md",
    "content": "# Contributing to Luxon\n\n## General guidelines\n\nPatches are welcome. Luxon is at this point just a baby and it could use lots of help. But before you dive in...Luxon is one of those tightly-scoped libraries where the default answer to \"should this library do X?\" is likely \"no\". **So ask first!** It might save you some time and energy.\n\nHere are some vague notes on Luxon's design philosophy:\n\n1.  We won't accept patches that can't be internationalized using the JS environment's (e.g. the browser's) native capabilities. This means that most convenient humanization features are out of scope.\n1.  We try hard to have a clear definition of what Luxon does and doesn't do. With few exceptions, this is not a \"do what I mean\" library.\n1.  Luxon shouldn't contain simple conveniences that bloat the library to save callers a couple lines of code. Write those lines in your own code.\n1.  Most of the complexity of JS module loading compatibility is left to the build. If you have a \"this can't be loaded in my bespoke JS module loader\" problems, this isn't something you should be solving with changes to the `src` directory. If it's a common use case and is possible to generate with Rollup, it can get its own build command.\n1.  We prefer documentation clarifications and gotchas to go in the docstrings, not in the guides on the docs page. Obviously, if the guides are wrong, they should be fixed, but we don't want them to turn into troubleshooting pages. On the other hand, making sure the method-level documentation has ample examples and notes is great.\n1.  You'll need to sign a CLA as part of your first pull request to Luxon.\n\n## Building and testing\n\nBuilding and testing is done through npm scripts. The tests run in Node and require Node 10+ with full-icu support. This is because some of the features available in Luxon (like internationalization and time zones) need that stuff and we test it all. On any platform, if you have Node 10 installed with full-icu, you're good to go; just run npm scripts like `npm run test`. But you probably don't have that, so read on.\n\n### OSX\n\nMac is easy:\nOpen the terminal.\n\n```\nbrew install node --with-full-icu\nnpm install\n./scripts/test\n```\n\nIf that's for whatever reason a pain, the Linux instructions should also work, as well as the Docker ones.\n\n### Linux\n\nThere are two ways to get full-icu support in Linux: build it with that support, or provide it as a module. We'll cover the latter. Assuming you've installed Node 10:\n\n```\nnpm install\nnpm install full-icu\n./scripts/test\n```\n\nWhere `scripts/test` is just `NODE_ICU_DATA=\"$(pwd)/node_modules/full-icu\" npm run test`, which is required for making Node load the full-icu module you just installed. You can run all the other npm scripts (e.g. `npm run docs`) directly; they don't require Intl support.\n\n### Windows\n\nIf you have [Bash](https://git-scm.com/downloads) or [WSL](https://docs.microsoft.com/en-us/windows/wsl/install-win10), the Linux instructions seem to work fine.\n\nI would love to add instructions for a non-WSL install of the dev env!\n\n### Docker\n\nIn case messing with your Node environment just to run Luxon's tests is too much to ask, we've provided a Docker container. You'll need a functioning Docker environment, but the rest is easy:\n\n```\n./docker/npm install\n./docker/npm run test\n```\n\n## Patch basics\n\nOnce you're sure your bugfix or feature makes sense for Luxon, make sure you take these steps:\n\n1.  Be sure to add tests and run them with `scripts/test`\n1.  Be sure you run `npm run lint!` before you commit. Note this will modify your source files to line up with the style guidelines.\n1.  Make sure you add or ESDoc annotations appropriately. You can run `npm run docs` to generate the HTML for them. They land in the `build/docs` directory. This also builds the markdown files in `/docs` into the guide on the Luxon website.\n1.  To test Luxon in your browser, run `npm run site` and then open `build/demo/global.html`. You can access Luxon classes in the console like `window.luxon.DateTime`.\n1.  To test in Node, run `npm run build` and then run something like `var DateTime = require('./build/cjs/luxon').DateTime`.\n\nLuxon uses [Husky](https://github.com/typicode/husky) to run the formatter on your code as a pre-commit hook. You should still run `npm run lint!` yourself to catch other issues, but this hook will help prevent you from failing the build with a trivial formatting error.\n\n## npm script reference\n\n| Command                  | Function                                |\n| ------------------------ | --------------------------------------- |\n| `npm run build`          | Build all the distributable files       |\n| `npm run build-node`     | Build just for Node                     |\n| `npm run test`           | Run the test suite, but see notes above |\n| `npm run format`         | Run the Prettier formatter              |\n| `npm run lint!`          | Run the formatter and the linter        |\n| `npm run docs`           | Build the doc pages                     |\n| `npm run site`           | Build the Luxon website                 |\n| `npm check-doc-coverage` | Check whether there's full doc coverage |\n",
    "static": true,
    "access": "public"
  }
]
